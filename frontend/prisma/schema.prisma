generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres.qkhermeufcstwtlyttpo:postgres@aws-0-eu-central-1.pooler.supabase.com:5432/postgres"
}

//==============================================================================
// CORE: USERS & AUTHENTICATION
//==============================================================================

model User {
  id                Int                @id @default(autoincrement())
  name              String             @db.VarChar(100)
  email             String             @unique @db.VarChar(100)
  password          String             @db.VarChar(100)
  role              String             @default("employee") @db.VarChar(20)
  phone             String?            @db.VarChar(30)
  status            String             @default("active") @db.Text
  profilePicture    String?            @db.VarChar(255) // Legacy field, keeping for backward compatibility
  profilePictureId  Int?               // Reference to the File model
  createdAt         DateTime           @default(now()) @db.Timestamp(6)
  updatedAt         DateTime           @updatedAt @db.Timestamp(6)
  createdBy         Int?                             
  updatedBy         Int?
  lastLoginAt       DateTime?
  resetToken        String?
  resetTokenExpiry  DateTime?
  settings          UserSettings?
  activities        UserActivity[]
  appointments      Appointment[]
  refreshTokens     RefreshToken[]
  customerLogs      CustomerLog[]
  appointmentNotes  AppointmentNote[]
  appointmentLogs   AppointmentLog[]
  contactRequests   ContactRequest[]
  requestNotes      RequestNote[]
  requestLogs       RequestLog[]
  permissions       UserPermission[]
  profilePictureFile File?             @relation("ProfilePicture", fields: [profilePictureId], references: [id])

  @@index([email])
  @@index([name])
  @@index([profilePictureId])
}

model UserSettings {
  id                  Int      @id @default(autoincrement())
  userId              Int      @unique
  darkMode            Boolean  @default(false)
  emailNotifications  Boolean  @default(true)
  pushNotifications   Boolean  @default(false)
  language            String   @default("de") @db.VarChar(10)
  notificationInterval String   @default("immediate") @db.VarChar(20)
  createdAt           DateTime @default(now()) @db.Timestamp(6)
  updatedAt           DateTime @updatedAt @db.Timestamp(6)
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserActivity {
  id        Int       @id @default(autoincrement())
  userId    Int
  timestamp DateTime? @default(now()) @db.Timestamp(6)
  activity  String    @db.VarChar(255)
  details   String?   @db.Text
  ipAddress String?   @db.VarChar(255)
  user      User      @relation(fields: [userId], references: [id])
}

model UserSession {
  sid    String   @id @db.VarChar
  sess   Json
  expire DateTime @db.Timestamp(6)
}

//==============================================================================
// ROLES & PERMISSIONS
//==============================================================================

model Permission {
  id          Int              @id @default(autoincrement())
  code        String           @unique @db.VarChar(100)
  name        String           @db.VarChar(100)
  description String           @db.Text
  category    String           @db.VarChar(50)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  createdBy   Int?
  updatedBy   Int?
  users       UserPermission[]

  @@index([code])
  @@index([category])
}

model UserPermission {
  id           Int        @id @default(autoincrement())
  userId       Int
  permissionId Int
  grantedAt    DateTime   @default(now())
  grantedBy    Int?
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([userId, permissionId])
  @@index([userId])
  @@index([permissionId])
}

model RefreshToken {
  token           String    @id
  userId          Int
  expiresAt       DateTime
  createdAt       DateTime  @default(now())
  createdByIp     String?
  isRevoked       Boolean   @default(false)
  revokedAt       DateTime?
  revokedByIp     String?
  replacedByToken String?
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model SystemSettings {
  id          Int      @id @default(autoincrement())
  key         String   @unique @db.VarChar(100)
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

//==============================================================================
// CRM: CUSTOMERS
//==============================================================================

model Customer {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(100)
  company        String?          @db.VarChar(100)
  email          String?          @db.VarChar(100)
  phone          String?          @db.VarChar(30)
  address        String?          @db.Text
  postalCode     String?          @db.VarChar(10)
  city           String?          @db.VarChar(100)
  country        String           @default("Deutschland") @db.VarChar(100)
  vatNumber      String?          @db.VarChar(50)
  notes          String?          @db.Text
  newsletter     Boolean          @default(false)
  status         String           @default("active") @db.VarChar(20)
  type           String           @default("private") @db.VarChar(20)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  createdBy      Int?
  updatedBy      Int?
  appointments   Appointment[]
  logs           CustomerLog[]
  contactRequests ContactRequest[]

  @@index([email])
  @@index([status])
}

model CustomerLog {
  id         Int      @id @default(autoincrement())
  customerId Int
  userId     Int?
  userName   String   @db.Text
  action     String   @db.Text
  details    String?  @db.Text
  createdAt  DateTime @default(now()) @db.Timestamp(6)
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

//==============================================================================
// SCHEDULING: APPOINTMENTS & CALENDAR
//==============================================================================

model Appointment {
  id              Int               @id @default(autoincrement())
  title           String            @db.VarChar(200)
  customerId      Int?
  appointmentDate DateTime          @db.Timestamp(6)
  duration        Int?
  location        String?           @db.VarChar(200)
  description     String?           @db.Text
  status          String            @default("planned") @db.VarChar(20)
  createdBy       Int?
  createdAt       DateTime          @default(now()) @db.Timestamp(6)
  updatedAt       DateTime          @updatedAt @db.Timestamp(6)
  customer        Customer?         @relation(fields: [customerId], references: [id])
  creator         User?             @relation(fields: [createdBy], references: [id])
  notes           AppointmentNote[]
  logs            AppointmentLog[]
  contactRequests ContactRequest[]

  @@index([customerId])
  @@index([appointmentDate])
  @@index([status])
}

model AppointmentNote {
  id            Int         @id @default(autoincrement())
  appointmentId Int
  userId        Int
  userName      String      @db.VarChar(100)
  text          String      @db.Text
  createdAt     DateTime    @default(now()) @db.Timestamp(6)
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
}

model AppointmentLog {
  id            Int         @id @default(autoincrement())
  appointmentId Int
  userId        Int
  userName      String      @db.Text
  action        String      @db.Text
  details       String?     @db.Text
  createdAt     DateTime    @default(now()) @db.Timestamp(6)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
}

//==============================================================================
// CONTACT & REQUESTS
//==============================================================================

model ContactRequest {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(100)
  email       String        @db.VarChar(100)
  phone       String?       @db.VarChar(30)
  service     String        @db.VarChar(50)
  message     String        @db.Text
  status      String        @default("new") @db.VarChar(20)
  processorId Int?
  customerId  Int?
  appointmentId Int?
  ipAddress   String?       @db.VarChar(255)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt @db.Timestamp(6)
  notes       RequestNote[]
  logs        RequestLog[]
  customer    Customer?     @relation(fields: [customerId], references: [id])
  appointment Appointment?  @relation(fields: [appointmentId], references: [id])
  processor   User?         @relation(fields: [processorId], references: [id])

  @@index([email])
  @@index([status])
  @@index([createdAt])
}

model RequestNote {
  id        Int           @id @default(autoincrement())
  requestId Int
  userId    Int
  userName  String        @db.VarChar(100)
  text      String        @db.Text
  createdAt DateTime      @default(now()) @db.Timestamp(6)
  request   ContactRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id])
}

model RequestLog {
  id        Int      @id @default(autoincrement())
  requestId Int
  userId    Int
  userName  String   @db.VarChar(255)
  action    String   @db.VarChar(255)
  details   String?  @db.Text
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  request   ContactRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
}

//==============================================================================
// NOTIFICATIONS
//==============================================================================

model Notification {
  id            Int       @id @default(autoincrement())
  userId        Int?
  referenceId   Int?
  referenceType String?   @db.VarChar(50)
  type          String    @db.VarChar(20)
  title         String    @db.VarChar(100)
  message       String?   @db.Text
  description   String?   @db.Text
  read          Boolean   @default(false)
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updatedAt     DateTime  @updatedAt
  createdBy     Int?
  updatedBy     Int?
}

//==============================================================================
// FILE STORAGE
//==============================================================================

model File {
  id            Int       @id @default(autoincrement())
  filename      String    @db.VarChar(255)
  originalName  String    @db.VarChar(255)
  mimeType      String    @db.VarChar(100)
  path          String    @db.VarChar(255)
  size          Int
  type          String    @default("general") @db.VarChar(50)
  uploadedAt    DateTime  @default(now())
  uploadedBy    Int?
  description   String?   @db.Text
  isDeleted     Boolean   @default(false)
  deletedAt     DateTime?
  userProfiles  User[]    @relation("ProfilePicture")

  @@index([type])
  @@index([uploadedBy])
  @@index([path])
}