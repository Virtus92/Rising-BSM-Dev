/**
 * Type-safe accessors for Prisma models
 * 
 * This is a workaround for TypeScript errors when accessing certain models
 * that are dynamically generated by Prisma but not properly typed.
 */

import { PrismaClient } from '@prisma/client';

/**
 * Access the Permission model
 */
export function Permission(prisma: PrismaClient): any {
  return (prisma as any).permission;
}

/**
 * Access the Role model
 */
export function Role(prisma: PrismaClient): any {
  return (prisma as any).role;
}

/**
 * Access the RolePermission model
 */
export function RolePermission(prisma: PrismaClient): any {
  return (prisma as any).rolePermission;
}

/**
 * Access the UserRole model
 */
export function UserRole(prisma: PrismaClient): any {
  return (prisma as any).userRole;
}

/**
 * Direct raw query executor
 * 
 * @param prisma - Prisma client
 * @param query - SQL query string
 * @param params - Query parameters
 * @returns Query result
 */
export async function executeRawQuery(prisma: PrismaClient, query: string, ...params: any[]): Promise<any> {
  return await prisma.$executeRawUnsafe(query, ...params);
}

/**
 * Count query result type helper
 */
export interface CountResult {
  count: number;
}
