 generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//==============================================================================
// CORE: USERS & AUTHENTICATION
//==============================================================================

model User {
  id               Int               @id @default(autoincrement())
  name             String            @db.VarChar(100)
  email            String            @unique @db.VarChar(100)
  password         String            @map("passwort") @db.VarChar(100)
  role             String            @default("mitarbeiter") @map("rolle") @db.VarChar(20)
  phone            String?           @map("telefon") @db.VarChar(30)
  status           String            @default("aktiv") @db.Text
  profilePicture   String?           @map("profilbild") @db.VarChar(255)
  createdAt        DateTime          @default(now()) @map("erstellt_am") @db.Timestamp(6)
  updatedAt        DateTime          @updatedAt @map("aktualisiert_am") @db.Timestamp(6)
  resetToken       String?
  resetTokenExpiry DateTime?
  settings         UserSettings?
  activities       UserActivity[]
  projects         Project[]
  appointments     Appointment[]
  refreshTokens    RefreshToken[]
  serviceLogs      ServiceLog[]
  customerLogs     CustomerLog[]
  requestLogs      RequestLog[]
  projectNotes     ProjectNote[]
  requestNotes     RequestNote[]
  appointmentNotes AppointmentNote[]
  appointmentLogs  AppointmentLog[]

  @@map("benutzer")
}

model UserSettings {
  id                   Int      @id @default(autoincrement())
  userId               Int      @unique @map("benutzer_id")
  darkMode             Boolean  @default(false) @map("dark_mode")
  emailNotifications   Boolean  @default(true) @map("benachrichtigungen_email")
  pushNotifications    Boolean  @default(false) @map("benachrichtigungen_push")
  language             String   @default("de") @map("sprache") @db.VarChar(10)
  notificationInterval String   @default("sofort") @map("benachrichtigungen_intervall") @db.VarChar(20)
  createdAt            DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt            DateTime @updatedAt @map("updated_at") @db.Timestamp(6)
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("benutzer_einstellungen")
}

model UserActivity {
  id        Int       @id @default(autoincrement())
  userId    Int       @map("benutzer_id")
  timestamp DateTime? @default(now()) @map("zeitstempel") @db.Timestamp(6)
  activity  String    @map("aktivitaet") @db.VarChar(255)
  ipAddress String?   @map("ip_adresse") @db.VarChar(255)
  user      User      @relation(fields: [userId], references: [id])

  @@map("benutzer_aktivitaet")
}

model UserSession {
  sid    String   @id @db.VarChar
  sess   Json
  expire DateTime @db.Timestamp(6)

  @@map("user_sessions")
}

model RefreshToken {
  id              Int       @id @default(autoincrement())
  token           String    @unique
  expires         DateTime
  createdAt       DateTime  @default(now())
  createdByIp     String?
  revoked         Boolean   @default(false)
  revokedAt       DateTime?
  revokedByIp     String?
  replacedByToken String?
  userId          Int
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model SystemSettings {
  id          Int      @id @default(autoincrement())
  key         String   @unique @db.VarChar(100)
  value       String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("system_settings")
}

//==============================================================================
// CRM: CUSTOMERS, PROJECTS & SERVICES
//==============================================================================

model Customer {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(100)
  company      String?        @map("firma") @db.VarChar(100)
  email        String?        @db.VarChar(100)
  phone        String?        @map("telefon") @db.VarChar(30)
  address      String?        @map("adresse") @db.Text
  postalCode   String?        @map("plz") @db.VarChar(10)
  city         String?        @map("ort") @db.VarChar(100)
  country      String         @default("Ã–sterreich") @map("land") @db.VarChar(100)
  notes        String?        @map("notizen") @db.Text
  newsletter   Boolean        @default(false)
  status       String         @default("aktiv") @db.VarChar(20)
  type         String         @default("privat") @map("kundentyp") @db.VarChar(20)
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  projects     Project[]
  appointments Appointment[]
  invoices     Invoice[]
  logs         CustomerLog[]

  @@index([email])
  @@index([status])
  @@map("kunden")
}

model CustomerLog {
  id         Int      @id @default(autoincrement())
  customerId Int      @map("kunde_id")
  userId     Int?     @map("benutzer_id")
  userName   String   @map("benutzer_name") @db.Text
  action     String   @map("aktion") @db.Text
  details    String?  @db.Text
  createdAt  DateTime @default(now()) @map("erstellt_am") @db.Timestamp(6)
  user       User?    @relation(fields: [userId], references: [id])
  customer   Customer @relation(fields: [customerId], references: [id])  // Add this relation

  @@map("kunden_log")
}

model Service {
  id           Int               @id @default(autoincrement())
  name         String            @db.VarChar(100)
  description  String?           @map("beschreibung") @db.Text
  priceBase    Decimal           @map("preis_basis") @db.Decimal
  vatRate      Decimal           @default(20.00) @map("mwst_satz") @db.Decimal
  active       Boolean           @default(true) @map("aktiv")
  unit         String?           @map("einheit") @db.VarChar(20)
  createdAt    DateTime          @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime          @updatedAt @map("updated_at") @db.Timestamp(6)
  projects     Project[]
  invoiceItems InvoicePosition[]
  logs         ServiceLog[]

  @@map("dienstleistungen")
}

model ServiceLog {
  id          Int      @id @default(autoincrement())
  serviceId   Int      @map("dienstleistung_id")
  userId      Int?     @map("benutzer_id")
  userName    String?  @map("benutzer_name") @db.VarChar(255)
  action      String   @map("aktion") @db.VarChar(255)
  details     String?  @db.Text
  createdAt   DateTime @default(now()) @map("erstellt_am") @db.Timestamp(6)
  user        User?    @relation(fields: [userId], references: [id])
  service     Service  @relation(fields: [serviceId], references: [id])  // Add this relation

  @@map("dienstleistungen_log")
}

model Project {
  id          Int            @id @default(autoincrement())
  title       String         @map("titel") @db.VarChar(200)
  customerId  Int?           @map("kunde_id")
  serviceId   Int?           @map("dienstleistung_id")
  startDate   DateTime?      @map("start_datum") @db.Date
  endDate     DateTime?      @map("end_datum") @db.Date
  amount      Decimal?       @map("betrag") @db.Decimal
  description String?        @map("beschreibung") @db.Text
  status      String         @default("neu") @db.VarChar(20)
  createdBy   Int?           @map("erstellt_von")
  createdAt   DateTime       @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime       @updatedAt @map("updated_at") @db.Timestamp(6)
  customer    Customer?      @relation(fields: [customerId], references: [id])
  service     Service?       @relation(fields: [serviceId], references: [id])
  creator     User?          @relation(fields: [createdBy], references: [id])
  invoices    Invoice[]
  appointments Appointment[]
  notes       ProjectNote[]

  @@map("projekte")
}

model ProjectNote {
  id        Int      @id @default(autoincrement())
  projectId Int?     @map("projekt_id")
  userId    Int?     @map("benutzer_id")
  userName  String   @map("benutzer_name") @db.Text
  text      String   @db.Text
  createdAt DateTime @default(now()) @map("erstellt_am") @db.Timestamp(6)
  project   Project? @relation(fields: [projectId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])

  @@map("projekt_notizen")
}

model ProjectLog {
  id        Int      @id @default(autoincrement())
  projectId Int
  userId    Int
  userName  String
  action    String
  details   String?
  createdAt DateTime @default(now())

  @@map("project_log")
}

//==============================================================================
// SCHEDULING: APPOINTMENTS & CALENDAR
//==============================================================================

model Appointment {
  id              Int               @id @default(autoincrement())
  title           String            @map("titel") @db.VarChar(200)
  customerId      Int?              @map("kunde_id")
  projectId       Int?              @map("projekt_id")
  appointmentDate DateTime          @map("termin_datum") @db.Timestamp(6)
  duration        Int?              @map("dauer")
  location        String?           @map("ort") @db.VarChar(200)
  description     String?           @map("beschreibung") @db.Text
  status          String            @default("geplant") @db.VarChar(20)
  createdBy       Int?              @map("erstellt_von")
  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime          @updatedAt @map("updated_at") @db.Timestamp(6)
  customer        Customer?         @relation(fields: [customerId], references: [id])
  project         Project?          @relation(fields: [projectId], references: [id])
  creator         User?             @relation(fields: [createdBy], references: [id])
  notes           AppointmentNote[]

  @@index([customerId])
  @@index([appointmentDate])
  @@index([status])
  @@map("termine")
}

model AppointmentNote {
  id            Int         @id @default(autoincrement())
  appointmentId Int         @map("termin_id")
  userId        Int         @map("benutzer_id")
  userName      String      @map("benutzer_name") @db.VarChar(100)
  text          String      @db.Text
  createdAt     DateTime    @default(now()) @map("erstellt_am") @db.Timestamp(6)
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  user          User        @relation(fields: [userId], references: [id])

  @@map("termin_notizen")
}

model AppointmentLog {
  id            Int      @id @default(autoincrement())
  appointmentId Int      @map("termin_id")
  userId        Int      @map("benutzer_id")
  userName      String   @map("benutzer_name") @db.Text
  action        String   @map("aktion") @db.Text
  details       String?  @db.Text
  createdAt     DateTime @default(now()) @map("erstellt_am") @db.Timestamp(6)
  user          User     @relation(fields: [userId], references: [id])

  @@map("termin_log")
}

//==============================================================================
// FINANCE: INVOICES & PAYMENTS
//==============================================================================

model Invoice {
  id              Int               @id @default(autoincrement())
  invoiceNumber   String            @map("rechnungsnummer") @db.VarChar(50)
  projectId       Int?              @map("projekt_id")
  customerId      Int?              @map("kunde_id")
  amount          Decimal           @map("betrag") @db.Decimal
  vatAmount       Decimal           @map("mwst_betrag") @db.Decimal
  totalAmount     Decimal           @map("gesamtbetrag") @db.Decimal
  invoiceDate     DateTime          @map("rechnungsdatum") @db.Date
  dueDate         DateTime          @map("faelligkeitsdatum") @db.Date
  paidAt          DateTime?         @map("bezahlt_am") @db.Timestamp(6)
  status          String            @default("offen") @db.VarChar(20)
  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime          @updatedAt @map("updated_at") @db.Timestamp(6)
  positions       InvoicePosition[]
  project         Project?          @relation(fields: [projectId], references: [id])
  customer        Customer?         @relation(fields: [customerId], references: [id])

  @@index([invoiceDate], name: "idx_rechnungsdatum")
  @@map("rechnungen")
}

model InvoicePosition {
  id         Int      @id @default(autoincrement())
  invoiceId  Int      @map("rechnung_id")
  serviceId  Int      @map("dienstleistung_id")
  quantity   Int      @map("anzahl")
  unitPrice  Decimal  @map("einzelpreis") @db.Decimal
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamp(6)
  invoice    Invoice  @relation(fields: [invoiceId], references: [id])
  service    Service  @relation(fields: [serviceId], references: [id])

  @@map("rechnungspositionen")
}

//==============================================================================
// CONTACT & NOTIFICATIONS
//==============================================================================

model ContactRequest {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(100)
  email       String        @db.VarChar(100)
  phone       String?       @db.VarChar(30)
  service     String        @db.VarChar(50)
  message     String        @db.Text
  status      String        @default("neu") @db.VarChar(20)
  processorId Int?          @map("bearbeiter_id")
  ipAddress   String?       @map("ip_adresse") @db.VarChar(255)
  createdAt   DateTime      @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime      @updatedAt @map("updated_at") @db.Timestamp(6)
  notes       RequestNote[]

  @@map("kontaktanfragen")
}

model ContactRequestOld {
  id        BigInt   @id
  name      String?
  email     String?
  phone     String?
  service   String?
  message   String?  @db.Text
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  @@map("kontaktanfragen_old")
}

model RequestNote {
  id        Int           @id @default(autoincrement())
  requestId Int           @map("anfrage_id")
  userId    Int           @map("benutzer_id")
  userName  String        @map("benutzer_name") @db.VarChar(100)
  text      String        @db.Text
  createdAt DateTime      @default(now()) @map("erstellt_am") @db.Timestamp(6)
  request   ContactRequest @relation(fields: [requestId], references: [id])
  user      User          @relation(fields: [userId], references: [id])

  @@map("anfragen_notizen")
}

model RequestLog {
  id        Int      @id @default(autoincrement())
  requestId Int      @map("anfrage_id")
  userId    Int      @map("benutzer_id")
  userName  String   @map("benutzer_name") @db.VarChar(255)
  action    String   @map("aktion") @db.VarChar(255)
  details   String?  @db.Text
  createdAt DateTime @default(now()) @map("erstellt_am") @db.Timestamp(6)
  user      User     @relation(fields: [userId], references: [id])

  @@map("anfragen_log")
}

model Notification {
  id            Int       @id @default(autoincrement())
  userId        Int?      @map("benutzer_id")
  referenceId   Int?      @map("referenz_id")
  referenceType String?   @map("referenz_typ") @db.VarChar(50)
  type          String    @map("typ") @db.VarChar(20)
  title         String    @map("titel") @db.VarChar(100)
  message       String?   @map("nachricht") @db.Text
  description   String?   @map("beschreibung") @db.Text
  read          Boolean   @default(false) @map("gelesen")
  createdAt     DateTime  @default(now()) @map("erstellt_am") @db.Timestamp(6)
  updatedAt     DateTime  @updatedAt

  @@map("benachrichtigungen")
}

//==============================================================================
// CONTENT: BLOG & DOCUMENTS
//==============================================================================

model BlogPost {
  id             Int                @id @default(autoincrement())
  title          String             @db.VarChar(255)
  slug           String             @db.VarChar(255)
  content        String             @db.Text
  excerpt        String?            @db.Text
  featuredImage  String?            @map("featured_image") @db.VarChar(255)
  status         String             @default("draft") @db.VarChar(50)
  seoTitle       String?            @map("seo_title") @db.VarChar(255)
  seoDescription String?            @map("seo_description") @db.Text
  seoKeywords    String?            @map("seo_keywords") @db.Text
  authorId       Int?               @map("author_id")
  publishedAt    DateTime?          @map("published_at") @db.Timestamp(6)
  createdAt      DateTime           @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt      DateTime           @updatedAt @map("updated_at") @db.Timestamp(6)
  categories     BlogPostCategory[]
  tags           BlogPostTag[]
  analytics      BlogAnalytics[]

  @@index([status], name: "idx_blog_post_status")
  @@map("blog_posts")
}

model BlogCategory {
  id          Int                @id @default(autoincrement())
  name        String             @db.VarChar(100)
  slug        String             @db.VarChar(100)
  description String?            @db.Text
  createdAt   DateTime           @default(now()) @map("created_at") @db.Timestamp(6)
  posts       BlogPostCategory[]

  @@map("blog_categories")
}

model BlogPostCategory {
  postId     Int
  categoryId Int
  post       BlogPost     @relation(fields: [postId], references: [id], onDelete: Cascade)
  category   BlogCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([postId, categoryId])
  @@map("blog_post_categories")
}

model BlogTag {
  id        Int           @id @default(autoincrement())
  name      String        @db.VarChar(100)
  slug      String        @db.VarChar(100)
  createdAt DateTime      @default(now()) @map("created_at") @db.Timestamp(6)
  posts     BlogPostTag[]

  @@map("blog_tags")
}

model BlogPostTag {
  postId Int
  tagId  Int
  post   BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    BlogTag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
  @@map("blog_post_tags")
}

model BlogAnalytics {
  id             Int       @id @default(autoincrement())
  postId         Int?      @map("post_id")
  views          Int       @default(0)
  uniqueVisitors Int       @default(0) @map("unique_visitors")
  date           DateTime  @db.Date
  post           BlogPost? @relation(fields: [postId], references: [id])

  @@map("blog_analytics")
}

model BlogSeoKeyword {
  id             Int       @id @default(autoincrement())
  keyword        String    @db.VarChar(255)
  searchVolume   Int?      @map("search_volume")
  currentRanking Int?      @map("current_ranking")
  targetPostId   Int?      @map("target_post_id")
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt      DateTime  @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("blog_seo_keywords")
}

model BlogAiRequest {
  id             Int       @id @default(autoincrement())
  topic          String    @db.VarChar(255)
  targetAudience String?   @map("target_audience") @db.VarChar(100)
  tone           String?   @db.VarChar(100)
  keywords       String?   @db.Text
  resultPostId   Int?      @map("result_post_id")
  requestedBy    Int?      @map("requested_by")
  status         String    @default("pending") @db.VarChar(50)
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  completedAt    DateTime? @map("completed_at") @db.Timestamp(6)

  @@map("blog_ai_requests")
}

model Document {
  id       BigInt  @id
  metadata Json?
  content  String? @db.Text

  @@map("documents")
}