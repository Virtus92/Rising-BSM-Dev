# paths/users.yaml
users:
  get:
    tags:
      - Users
    summary: Get all users
    description: Retrieve list of users with optional filtering (admin only)
    operationId: getAllUsers
    parameters:
      - in: query
        name: status
        schema:
          type: string
          enum: [aktiv, inaktiv, gesperrt]
        description: Filter by status
      - in: query
        name: role
        schema:
          type: string
          enum: [admin, manager, mitarbeiter, benutzer]
        description: Filter by role
      - in: query
        name: search
        schema:
          type: string
        description: Search term for name or email
      - in: query
        name: page
        schema:
          type: integer
          default: 1
        description: Page number (1-based)
      - in: query
        name: limit
        schema:
          type: integer
          default: 20
          maximum: 100
        description: Items per page
      - in: query
        name: sortBy
        schema:
          type: string
          enum: [name, email, role, status, created_at]
          default: name
        description: Field to sort by
      - in: query
        name: sortDirection
        schema:
          type: string
          enum: [asc, desc]
          default: asc
        description: Sort direction
    responses:
      '200':
        description: List of users
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                data:
                  type: array
                  items:
                    $ref: '../schemas/models.yaml#/User'
                pagination:
                  $ref: '../schemas/common.yaml#/Pagination'
                meta:
                  type: object
                  properties:
                    filters:
                      type: object
                      properties:
                        status:
                          type: string
                        role:
                          type: string
                        search:
                          type: string
      '401':
        $ref: '../openapi.yaml#/components/responses/UnauthorizedError'
      '403':
        $ref: '../openapi.yaml#/components/responses/ForbiddenError'

  post:
    tags:
      - Users
    summary: Create new user
    description: Add a new user account (admin only)
    operationId: createUser
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - email
              - password
            properties:
              name:
                type: string
                description: Full name
                minLength: 2
                maxLength: 100
              email:
                type: string
                format: email
                description: Email address (must be unique)
              password:
                type: string
                format: password
                description: Password (min 8 characters)
                minLength: 8
              role:
                type: string
                enum: [admin, manager, mitarbeiter, benutzer]
                default: mitarbeiter
                description: User role
              phone:
                type: string
                description: Phone number
                maxLength: 30
                nullable: true
              status:
                type: string
                enum: [aktiv, inaktiv, gesperrt]
                default: aktiv
                description: User status
    responses:
      '201':
        description: User created
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                data:
                  $ref: '../schemas/models.yaml#/User'
                message:
                  type: string
                  example: "User created successfully"
      '400':
        $ref: '../openapi.yaml#/components/responses/ValidationError'
      '401':
        $ref: '../openapi.yaml#/components/responses/UnauthorizedError'
      '403':
        $ref: '../openapi.yaml#/components/responses/ForbiddenError'
      '409':
        description: Email already exists
        content:
          application/json:
            schema:
              $ref: '../schemas/error.yaml#/Error'

users-id:
  get:
    tags:
      - Users
    summary: Get user by ID
    description: Retrieve detailed user information (admin only)
    operationId: getUserById
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: User ID
    responses:
      '200':
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                data:
                  type: object
                  allOf:
                    - $ref: '../schemas/models.yaml#/User'
                    - type: object
                      properties:
                        activity:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: integer
                              activity:
                                type: string
                              activityLabel:
                                type: string
                              timestamp:
                                type: string
                                format: date-time
                              formattedDate:
                                type: string
                        settings:
                          type: object
                          properties:
                            language:
                              type: string
                            darkMode:
                              type: boolean
                            emailNotifications:
                              type: boolean
                            pushNotifications:
                              type: boolean
                            notificationInterval:
                              type: string
      '401':
        $ref: '../openapi.yaml#/components/responses/UnauthorizedError'
      '403':
        $ref: '../openapi.yaml#/components/responses/ForbiddenError'
      '404':
        $ref: '../openapi.yaml#/components/responses/NotFoundError'

  put:
    tags:
      - Users
    summary: Update user
    description: Update an existing user (admin only)
    operationId: updateUser
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: User ID
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: Full name
                minLength: 2
                maxLength: 100
              email:
                type: string
                format: email
                description: Email address
              password:
                type: string
                format: password
                description: New password (min 8 characters)
                minLength: 8
              role:
                type: string
                enum: [admin, manager, mitarbeiter, benutzer]
                description: User role
              phone:
                type: string
                description: Phone number
                maxLength: 30
                nullable: true
              status:
                type: string
                enum: [aktiv, inaktiv, gesperrt]
                description: User status
    responses:
      '200':
        description: User updated
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                data:
                  $ref: '../schemas/models.yaml#/User'
                message:
                  type: string
                  example: "User updated successfully"
      '400':
        $ref: '../openapi.yaml#/components/responses/ValidationError'
      '401':
        $ref: '../openapi.yaml#/components/responses/UnauthorizedError'
      '403':
        $ref: '../openapi.yaml#/components/responses/ForbiddenError'
      '404':
        $ref: '../openapi.yaml#/components/responses/NotFoundError'
      '409':
        description: Email already exists
        content:
          application/json:
            schema:
              $ref: '../schemas/error.yaml#/Error'

  delete:
    tags:
      - Users
    summary: Delete user
    description: Delete or deactivate a user (admin only)
    operationId: deleteUser
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: User ID
    responses:
      '200':
        description: User deleted or deactivated
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                id:
                  type: integer
                message:
                  type: string
                  example: "User has been deactivated"
      '400':
        description: Cannot delete own account
        content:
          application/json:
            schema:
              $ref: '../schemas/error.yaml#/Error'
      '401':
        $ref: '../openapi.yaml#/components/responses/UnauthorizedError'
      '403':
        $ref: '../openapi.yaml#/components/responses/ForbiddenError'
      '404':
        $ref: '../openapi.yaml#/components/responses/NotFoundError'

users-id-status:
  patch:
    tags:
      - Users
    summary: Update user status
    description: Change the status of a user (activate/deactivate/lock)
    operationId: updateUserStatus
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: User ID
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - status
            properties:
              status:
                type: string
                enum: [aktiv, inaktiv, gesperrt]
                description: New user status
              note:
                type: string
                description: Optional note about the status change
                maxLength: 1000
    responses:
      '200':
        description: Status updated successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                data:
                  type: object
                  properties:
                    id:
                      type: integer
                    status:
                      type: string
                    statusLabel:
                      type: string
                message:
                  type: string
                  example: "User status updated successfully"
      '400':
        $ref: '../openapi.yaml#/components/responses/ValidationError'
      '401':
        $ref: '../openapi.yaml#/components/responses/UnauthorizedError'
      '403':
        $ref: '../openapi.yaml#/components/responses/ForbiddenError'
      '404':
        $ref: '../openapi.yaml#/components/responses/NotFoundError'

users-id-reset-password:
  post:
    tags:
      - Users
    summary: Reset user password
    description: Reset password for a user (admin only)
    operationId: resetUserPassword
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: User ID
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - password
            properties:
              password:
                type: string
                format: password
                description: New password (min 8 characters)
                minLength: 8
              sendEmail:
                type: boolean
                default: true
                description: Whether to send password reset email to user
    responses:
      '200':
        description: Password reset successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                message:
                  type: string
                  example: "User password has been reset"
      '400':
        $ref: '../openapi.yaml#/components/responses/ValidationError'
      '401':
        $ref: '../openapi.yaml#/components/responses/UnauthorizedError'
      '403':
        $ref: '../openapi.yaml#/components/responses/ForbiddenError'
      '404':
        $ref: '../openapi.yaml#/components/responses/NotFoundError'

users-batch-status:
  patch:
    tags:
      - Users
    summary: Batch update user status
    description: Change the status of multiple users at once
    operationId: batchUpdateUserStatus
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - ids
              - status
            properties:
              ids:
                type: array
                items:
                  type: integer
                description: Array of user IDs to update
                minItems: 1
              status:
                type: string
                enum: [aktiv, inaktiv, gesperrt]
                description: New user status
              note:
                type: string
                description: Optional note about the status change
                maxLength: 1000
    responses:
      '200':
        description: Status updated successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                count:
                  type: integer
                  description: Number of users updated
                message:
                  type: string
                  example: "3 users updated successfully"
      '400':
        $ref: '../openapi.yaml#/components/responses/ValidationError'
      '401':
        $ref: '../openapi.yaml#/components/responses/UnauthorizedError'
      '403':
        $ref: '../openapi.yaml#/components/responses/ForbiddenError'