# paths/users.yaml
users:
  get:
    tags:
      - Users
    summary: Get all users
    description: Retrieve list of users with optional filtering
    operationId: getAllUsers
    parameters:
      - in: query
        name: status
        schema:
          type: string
          enum: [aktiv, inaktiv, gesperrt]
        description: Filter by status
      - in: query
        name: role
        schema:
          type: string
          enum: [admin, manager, mitarbeiter, benutzer]
        description: Filter by role
      - in: query
        name: search
        schema:
          type: string
        description: Search term for name or email
      - in: query
        name: page
        schema:
          type: integer
          default: 1
        description: Page number
      - in: query
        name: limit
        schema:
          type: integer
          default: 20
        description: Items per page
    responses:
      '200':
        description: List of users
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                data:
                  type: array
                  items:
                    $ref: '../schemas/models.yaml#/User'
                pagination:
                  $ref: '../schemas/common.yaml#/Pagination'
      '401':
        $ref: '../openapi.yaml#/components/responses/UnauthorizedError'
      '403':
        $ref: '../openapi.yaml#/components/responses/ForbiddenError'

  post:
    tags:
      - Users
    summary: Create new user
    description: Add a new user account
    operationId: createUser
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - email
              - password
            properties:
              name:
                type: string
                description: Full name
                minLength: 2
              email:
                type: string
                format: email
                description: Email address (must be unique)
              password:
                type: string
                format: password
                description: Password (min 8 characters)
                minLength: 8
              role:
                type: string
                enum: [admin, manager, mitarbeiter, benutzer]
                default: mitarbeiter
                description: User role
              phone:
                type: string
                description: Phone number
              status:
                type: string
                enum: [aktiv, inaktiv, gesperrt]
                default: aktiv
                description: User status
    responses:
      '201':
        description: User created
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                data:
                  $ref: '../schemas/models.yaml#/User'
                message:
                  type: string
                  example: User created successfully
      '400':
        $ref: '../openapi.yaml#/components/responses/ValidationError'
      '401':
        $ref: '../openapi.yaml#/components/responses/UnauthorizedError'
      '403':
        $ref: '../openapi.yaml#/components/responses/ForbiddenError'
      '409':
        description: Email already exists
        content:
          application/json:
            schema:
              $ref: '../schemas/error.yaml#/Error'

users-id:
  get:
    tags:
      - Users
    summary: Get user by ID
    description: Retrieve detailed user information
    operationId: getUserById
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: User ID
    responses:
      '200':
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                data:
                  $ref: '../schemas/models.yaml#/User'
      '401':
        $ref: '../openapi.yaml#/components/responses/UnauthorizedError'
      '403':
        $ref: '../openapi.yaml#/components/responses/ForbiddenError'
      '404':
        $ref: '../openapi.yaml#/components/responses/NotFoundError'

  put:
    tags:
      - Users
    summary: Update user
    description: Update an existing user
    operationId: updateUser
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: User ID
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: Full name
                minLength: 2
              email:
                type: string
                format: email
                description: Email address
              password:
                type: string
                format: password
                description: New password (min 8 characters)
                minLength: 8
              role:
                type: string
                enum: [admin, manager, mitarbeiter, benutzer]
                description: User role
              phone:
                type: string
                description: Phone number
              status:
                type: string
                enum: [aktiv, inaktiv, gesperrt]
                description: User status
    responses:
      '200':
        description: User updated
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                data:
                  $ref: '../schemas/models.yaml#/User'
                message:
                  type: string
                  example: User updated successfully
      '400':
        $ref: '../openapi.yaml#/components/responses/ValidationError'
      '401':
        $ref: '../openapi.yaml#/components/responses/UnauthorizedError'
      '403':
        $ref: '../openapi.yaml#/components/responses/ForbiddenError'
      '404':
        $ref: '../openapi.yaml#/components/responses/NotFoundError'
      '409':
        description: Email already exists
        content:
          application/json:
            schema:
              $ref: '../schemas/error.yaml#/Error'

  delete:
    tags:
      - Users
    summary: Delete user
    description: Delete or deactivate a user
    operationId: deleteUser
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: User ID
    responses:
      '200':
        description: User deleted or deactivated
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                message:
                  type: string
                  example: User has been deactivated
      '400':
        description: Cannot delete own account
        content:
          application/json:
            schema:
              $ref: '../schemas/error.yaml#/Error'
      '401':
        $ref: '../openapi.yaml#/components/responses/UnauthorizedError'
      '403':
        $ref: '../openapi.yaml#/components/responses/ForbiddenError'
      '404':
        $ref: '../openapi.yaml#/components/responses/NotFoundError'

users-id-status:
  patch:
    tags:
      - Users
    summary: Update user status
    description: Change the status of a user (activate/deactivate/lock)
    operationId: updateUserStatus
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: User ID
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - status
            properties:
              status:
                type: string
                enum: [aktiv, inaktiv, gesperrt]
                description: New user status
    responses:
      '200':
        description: Status updated successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                data:
                  $ref: '../schemas/models.yaml#/User'
                message:
                  type: string
                  example: User status updated successfully
      '400':
        $ref: '../openapi.yaml#/components/responses/ValidationError'
      '401':
        $ref: '../openapi.yaml#/components/responses/UnauthorizedError'
      '403':
        $ref: '../openapi.yaml#/components/responses/ForbiddenError'
      '404':
        $ref: '../openapi.yaml#/components/responses/NotFoundError'