customers:
  get:
    tags:
      - Customers
    summary: Get all customers
    description: Retrieve list of customers with optional filtering
    operationId: getAllCustomers
    parameters:
      - in: query
        name: status
        schema:
          type: string
          enum: [aktiv, inaktiv, geloescht]
        description: Filter by status
      - in: query
        name: type
        schema:
          type: string
          enum: [privat, geschaeft]
        description: Filter by customer type
      - in: query
        name: search
        schema:
          type: string
        description: Search term for name, email or company
      - in: query
        name: page
        schema:
          type: integer
          default: 1
        description: Page number
      - in: query
        name: limit
        schema:
          type: integer
          default: 20
        description: Items per page
    responses:
      '200':
        description: List of customers
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                customers:
                  type: array
                  items:
                    $ref: '../schemas/models.yaml#/Customer'
                pagination:
                  $ref: '../schemas/common.yaml#/Pagination'
                filters:
                  type: object
                  properties:
                    status:
                      type: string
                    type:
                      type: string
                    search:
                      type: string
      '401':
        $ref: '../openapi.yaml#/components/responses/UnauthorizedError'

  post:
    tags:
      - Customers
    summary: Create new customer
    description: Add a new customer
    operationId: createCustomer
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - email
            properties:
              name:
                type: string
                minLength: 2
                description: Customer name
              firma:
                type: string
                description: Company name
              email:
                type: string
                format: email
                description: Customer email address
              telefon:
                type: string
                description: Phone number
              adresse:
                type: string
                description: Street address
              plz:
                type: string
                description: Postal code
              ort:
                type: string
                description: City
              notizen:
                type: string
                description: Notes about the customer
              newsletter:
                type: boolean
                description: Newsletter subscription status
              status:
                type: string
                enum: [aktiv, inaktiv, geloescht]
                description: Customer status
              kundentyp:
                type: string
                enum: [privat, geschaeft]
                description: Customer type
    responses:
      '201':
        description: Customer created
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                customerId:
                  type: integer
                message:
                  type: string
      '400':
        $ref: '../openapi.yaml#/components/responses/ValidationError'
      '401':
        $ref: '../openapi.yaml#/components/responses/UnauthorizedError'

customers-id:
  get:
    tags:
      - Customers
    summary: Get customer by ID
    description: Retrieve detailed customer information
    operationId: getCustomerById
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: Customer ID
    responses:
      '200':
        description: Customer details
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                customer:
                  $ref: '../schemas/models.yaml#/Customer'
                appointments:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                      title:
                        type: string
                      date:
                        type: string
                      status:
                        type: string
                      statusLabel:
                        type: string
                      statusClass:
                        type: string
                projects:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                      title:
                        type: string
                      date:
                        type: string
                      status:
                        type: string
                      statusLabel:
                        type: string
                      statusClass:
                        type: string
      '404':
        $ref: '../openapi.yaml#/components/responses/NotFoundError'
      '401':
        $ref: '../openapi.yaml#/components/responses/UnauthorizedError'

  put:
    tags:
      - Customers
    summary: Update customer
    description: Update an existing customer
    operationId: updateCustomer
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: Customer ID
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - email
            properties:
              name:
                type: string
                minLength: 2
                description: Customer name
              firma:
                type: string
                description: Company name
              email:
                type: string
                format: email
                description: Customer email address
              telefon:
                type: string
                description: Phone number
              adresse:
                type: string
                description: Street address
              plz:
                type: string
                description: Postal code
              ort:
                type: string
                description: City
              notizen:
                type: string
                description: Notes about the customer
              newsletter:
                type: boolean
                description: Newsletter subscription status
              status:
                type: string
                enum: [aktiv, inaktiv, geloescht]
                description: Customer status
              kundentyp:
                type: string
                enum: [privat, geschaeft]
                description: Customer type
    responses:
      '200':
        description: Customer updated
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                customerId:
                  type: integer
                message:
                  type: string
      '400':
        $ref: '../openapi.yaml#/components/responses/ValidationError'
      '404':
        $ref: '../openapi.yaml#/components/responses/NotFoundError'
      '401':
        $ref: '../openapi.yaml#/components/responses/UnauthorizedError'

  delete:
    tags:
      - Customers
    summary: Delete customer
    description: Mark customer as deleted (soft delete)
    operationId: deleteCustomer
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: Customer ID
    responses:
      '200':
        description: Customer deleted
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                message:
                  type: string
      '400':
        description: Cannot delete customer with related data
        content:
          application/json:
            schema:
              $ref: '../schemas/error.yaml#/Error'
      '404':
        $ref: '../openapi.yaml#/components/responses/NotFoundError'
      '401':
        $ref: '../openapi.yaml#/components/responses/UnauthorizedError'