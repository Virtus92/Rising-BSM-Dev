customers:
  get:
    tags:
      - Customers
    summary: Get all customers
    description: Retrieve list of customers with optional filtering and pagination
    operationId: getAllCustomers
    parameters:
      - in: query
        name: status
        schema:
          type: string
          enum: [active, inactive, deleted]
        description: Filter by status
      - in: query
        name: type
        schema:
          type: string
          enum: [private, business]
        description: Filter by customer type
      - in: query
        name: search
        schema:
          type: string
        description: Search term for name, email, or company
      - in: query
        name: page
        schema:
          type: integer
          default: 1
        description: Page number (1-based)
      - in: query
        name: limit
        schema:
          type: integer
          default: 20
          maximum: 100
        description: Items per page
      - in: query
        name: city
        schema:
          type: string
        description: Filter by city
      - in: query
        name: postalCode
        schema:
          type: string
        description: Filter by postal code
      - in: query
        name: newsletter
        schema:
          type: boolean
        description: Filter by newsletter subscription
      - in: query
        name: startDate
        schema:
          type: string
          format: date
        description: Filter by creation date (from)
      - in: query
        name: endDate
        schema:
          type: string
          format: date
        description: Filter by creation date (to)
      - in: query
        name: sortBy
        schema:
          type: string
          enum: [name, email, company, city, status, createdAt]
          default: name
        description: Field to sort by
      - in: query
        name: sortDirection
        schema:
          type: string
          enum: [asc, desc]
          default: asc
        description: Sort direction
    responses:
      '200':
        description: List of customers
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                data:
                  type: array
                  items:
                    $ref: '../schemas/customers.yaml#/Customer'
                message:
                  type: string
                  example: "Customers retrieved successfully"
                meta:
                  type: object
                  properties:
                    timestamp:
                      type: string
                      format: date-time
                    pagination:
                      $ref: '../schemas/common.yaml#/Pagination'
                    filters:
                      type: object
                      properties:
                        status:
                          type: string
                        type:
                          type: string
                        search:
                          type: string
      '401':
        $ref: '../openapi.yaml#/components/responses/UnauthorizedError'

  post:
    tags:
      - Customers
    summary: Create new customer
    description: Add a new customer
    operationId: createCustomer
    requestBody:
      required: true
      content:
        application/json:
            schema:
              $ref: '../schemas/customers.yaml#/CustomerCreate'
    responses:
      '201':
        description: Customer created
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                data:
                  $ref: '../schemas/customers.yaml#/Customer'
                message:
                  type: string
                  example: "Customer created successfully"
                meta:
                  type: object
                  properties:
                    timestamp:
                      type: string
                      format: date-time
      '400':
        $ref: '../openapi.yaml#/components/responses/ValidationError'
      '401':
        $ref: '../openapi.yaml#/components/responses/UnauthorizedError'
      '409':
        description: Email already exists
        content:
          application/json:
            schema:
              $ref: '../schemas/error.yaml#/Error'

customers-statistics:
  get:
    tags:
      - Customers
    summary: Get customer statistics
    description: Retrieve statistics about customers like counts by type, status, growth
    operationId: getCustomerStatistics
    responses:
      '200':
        description: Customer statistics
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                data:
                  $ref: '../schemas/customers.yaml#/CustomerStatistics'
                message:
                  type: string
                  example: "Customer statistics retrieved successfully"
                meta:
                  type: object
                  properties:
                    timestamp:
                      type: string
                      format: date-time
      '401':
        $ref: '../openapi.yaml#/components/responses/UnauthorizedError'

customers-search:
  get:
    tags:
      - Customers
    summary: Search customers
    description: Search for customers with specific term and filters
    operationId: searchCustomers
    parameters:
      - in: query
        name: term
        required: true
        schema:
          type: string
          minLength: 2
        description: Search term
      - in: query
        name: page
        schema:
          type: integer
          default: 1
        description: Page number (1-based)
      - in: query
        name: limit
        schema:
          type: integer
          default: 20
          maximum: 100
        description: Items per page
    responses:
      '200':
        description: Search results
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                data:
                  type: array
                  items:
                    $ref: '../schemas/customers.yaml#/Customer'
                message:
                  type: string
                  example: "Customers retrieved successfully"
                meta:
                  type: object
                  properties:
                    timestamp:
                      type: string
                      format: date-time
                    pagination:
                      $ref: '../schemas/common.yaml#/Pagination'
      '400':
        $ref: '../openapi.yaml#/components/responses/ValidationError'
      '401':
        $ref: '../openapi.yaml#/components/responses/UnauthorizedError'

customers-bulk-update:
  post:
    tags:
      - Customers
    summary: Bulk update customers
    description: Update multiple customers at once
    operationId: bulkUpdateCustomers
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - customerIds
              - data
            properties:
              customerIds:
                type: array
                items:
                  type: integer
                description: Array of customer IDs to update
                minItems: 1
              data:
                $ref: '../schemas/customers.yaml#/CustomerUpdate'
    responses:
      '200':
        description: Customers updated successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                data:
                  type: object
                  properties:
                    count:
                      type: integer
                      description: Number of customers updated
                    ids:
                      type: array
                      items:
                        type: integer
                message:
                  type: string
                  example: "3 customers updated successfully"
                meta:
                  type: object
                  properties:
                    timestamp:
                      type: string
                      format: date-time
      '400':
        $ref: '../openapi.yaml#/components/responses/ValidationError'
      '401':
        $ref: '../openapi.yaml#/components/responses/UnauthorizedError'
      '403':
        $ref: '../openapi.yaml#/components/responses/ForbiddenError'

customers-export:
  get:
    tags:
      - Customers
    summary: Export customers
    description: Export customers to CSV or Excel file
    operationId: exportCustomers
    parameters:
      - in: query
        name: format
        schema:
          type: string
          enum: [csv, excel]
          default: csv
        description: Export format
      - in: query
        name: status
        schema:
          type: string
          enum: [active, inactive, deleted]
        description: Filter by status
      - in: query
        name: type
        schema:
          type: string
          enum: [private, business]
        description: Filter by customer type
      - in: query
        name: search
        schema:
          type: string
        description: Search term
      - in: query
        name: startDate
        schema:
          type: string
          format: date
        description: Start date for filtering (YYYY-MM-DD)
      - in: query
        name: endDate
        schema:
          type: string
          format: date
        description: End date for filtering (YYYY-MM-DD)
    responses:
      '200':
        description: File export successful
        content:
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              type: string
              format: binary
          text/csv:
            schema:
              type: string
              format: binary
      '400':
        $ref: '../openapi.yaml#/components/responses/ValidationError'
      '401':
        $ref: '../openapi.yaml#/components/responses/UnauthorizedError'

customers-id:
  get:
    tags:
      - Customers
    summary: Get customer by ID
    description: Retrieve detailed customer information with projects and appointments
    operationId: getCustomerById
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: Customer ID
    responses:
      '200':
        description: Customer details
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                data:
                  $ref: '../schemas/customers.yaml#/CustomerWithDetails'
                message:
                  type: string
                  example: "Customer retrieved successfully"
                meta:
                  type: object
                  properties:
                    timestamp:
                      type: string
                      format: date-time
      '404':
        $ref: '../openapi.yaml#/components/responses/NotFoundError'
      '401':
        $ref: '../openapi.yaml#/components/responses/UnauthorizedError'

  put:
    tags:
      - Customers
    summary: Update customer
    description: Update an existing customer
    operationId: updateCustomer
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: Customer ID
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../schemas/customers.yaml#/CustomerUpdate'
    responses:
      '200':
        description: Customer updated
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                data:
                  $ref: '../schemas/customers.yaml#/Customer'
                message:
                  type: string
                  example: "Customer updated successfully"
                meta:
                  type: object
                  properties:
                    timestamp:
                      type: string
                      format: date-time
      '400':
        $ref: '../openapi.yaml#/components/responses/ValidationError'
      '404':
        $ref: '../openapi.yaml#/components/responses/NotFoundError'
      '401':
        $ref: '../openapi.yaml#/components/responses/UnauthorizedError'
      '409':
        description: Email already exists
        content:
          application/json:
            schema:
              $ref: '../schemas/error.yaml#/Error'

  delete:
    tags:
      - Customers
    summary: Delete customer
    description: Delete (soft-delete) a customer
    operationId: deleteCustomer
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: Customer ID
      - in: query
        name: mode
        schema:
          type: string
          enum: [soft, hard]
          default: soft
        description: "Delete mode: soft (archive) or hard (permanent deletion for GDPR compliance)"
    responses:
      '200':
        description: Customer deleted
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                data:
                  type: object
                  properties:
                    success:
                      type: boolean
                    id:
                      type: integer
                message:
                  type: string
                  example: "Customer deleted successfully"
                meta:
                  type: object
                  properties:
                    timestamp:
                      type: string
                      format: date-time
      '404':
        $ref: '../openapi.yaml#/components/responses/NotFoundError'
      '401':
        $ref: '../openapi.yaml#/components/responses/UnauthorizedError'
      '400':
        description: Validation error or business logic constraint
        content:
          application/json:
            schema:
              $ref: '../schemas/error.yaml#/Error'
      '409':
        description: Cannot delete customer due to active related records
        content:
          application/json:
            schema:
              $ref: '../schemas/error.yaml#/Error'

customers-id-notes:
  post:
    tags:
      - Customers
    summary: Add note to customer
    description: Add a new note to an existing customer
    operationId: addCustomerNote
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: Customer ID
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../schemas/customers.yaml#/CustomerNote'
    responses:
      '201':
        description: Note added successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                data:
                  type: object
                  properties:
                    success:
                      type: boolean
                    message:
                      type: string
                message:
                  type: string
                  example: "Note added successfully"
                meta:
                  type: object
                  properties:
                    timestamp:
                      type: string
                      format: date-time
      '400':
        $ref: '../openapi.yaml#/components/responses/ValidationError'
      '404':
        $ref: '../openapi.yaml#/components/responses/NotFoundError'
      '401':
        $ref: '../openapi.yaml#/components/responses/UnauthorizedError'

customers-id-status:
  patch:
    tags:
      - Customers
    summary: Update customer status
    description: Change the status of a customer
    operationId: updateCustomerStatus
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: Customer ID
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../schemas/customers.yaml#/CustomerStatusUpdate'
    responses:
      '200':
        description: Status updated successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                data:
                  type: object
                  properties:
                    id:
                      type: integer
                    status:
                      type: string
                    statusLabel:
                      type: string
                message:
                  type: string
                  example: "Customer status updated successfully"
                meta:
                  type: object
                  properties:
                    timestamp:
                      type: string
                      format: date-time
      '400':
        $ref: '../openapi.yaml#/components/responses/ValidationError'
      '404':
        $ref: '../openapi.yaml#/components/responses/NotFoundError'
      '401':
        $ref: '../openapi.yaml#/components/responses/UnauthorizedError'

customers-id-insights:
  get:
    tags:
      - Customers
    summary: Get customer insights
    description: Retrieve detailed insights for a customer including activity, metrics, and business intelligence
    operationId: getCustomerInsights
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: Customer ID
    responses:
      '200':
        description: Customer insights
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                data:
                  type: object
                  properties:
                    customer:
                      $ref: '../schemas/customers.yaml#/Customer'
                    projectStats:
                      type: object
                      properties:
                        total:
                          type: integer
                        byStatus:
                          type: object
                          additionalProperties:
                            type: integer
                    appointmentStats:
                      type: object
                      properties:
                        total:
                          type: integer
                        upcoming:
                          type: integer
                    financials:
                      type: object
                      properties:
                        totalRevenue:
                          type: string
                        averageProjectValue:
                          type: string
                    activity:
                      type: object
                      properties:
                        recent:
                          type: array
                          items:
                            type: object
                            properties:
                              action:
                                type: string
                              date:
                                type: string
                              by:
                                type: string
                              details:
                                type: string
                        lastUpdate:
                          type: string
                message:
                  type: string
                  example: "Customer insights retrieved successfully"
                meta:
                  type: object
                  properties:
                    timestamp:
                      type: string
                      format: date-time
      '404':
        $ref: '../openapi.yaml#/components/responses/NotFoundError'
      '401':
        $ref: '../openapi.yaml#/components/responses/UnauthorizedError'

customers-id-similar:
  get:
    tags:
      - Customers
    summary: Get similar customers
    description: Find customers with similar attributes
    operationId: getSimilarCustomers
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: Reference customer ID
      - in: query
        name: limit
        schema:
          type: integer
          default: 5
          maximum: 20
        description: Maximum number of similar customers to return
    responses:
      '200':
        description: Similar customers
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                data:
                  type: array
                  items:
                    $ref: '../schemas/customers.yaml#/Customer'
                message:
                  type: string
                  example: "Similar customers retrieved successfully"
                meta:
                  type: object
                  properties:
                    timestamp:
                      type: string
                      format: date-time
      '404':
        $ref: '../openapi.yaml#/components/responses/NotFoundError'
      '401':
        $ref: '../openapi.yaml#/components/responses/UnauthorizedError'

customers-id-history:
  get:
    tags:
      - Customers
    summary: Get customer history
    description: Retrieve the activity history for a customer
    operationId: getCustomerHistory
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: Customer ID
    responses:
      '200':
        description: Customer history
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                data:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                      action:
                        type: string
                      timestamp:
                        type: string
                      relativeTime:
                        type: string
                      user:
                        type: string
                      details:
                        type: string
                message:
                  type: string
                  example: "Customer history retrieved successfully"
                meta:
                  type: object
                  properties:
                    timestamp:
                      type: string
                      format: date-time
      '404':
        $ref: '../openapi.yaml#/components/responses/NotFoundError'
      '401':
        $ref: '../openapi.yaml#/components/responses/UnauthorizedError'