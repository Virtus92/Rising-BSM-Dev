customers:
  get:
    tags:
      - Customers
    summary: Get all customers
    description: Retrieve list of customers with optional filtering and pagination
    operationId: getAllCustomers
    parameters:
      - in: query
        name: status
        schema:
          type: string
          enum: [aktiv, inaktiv, geloescht]
        description: Filter by status
      - in: query
        name: type
        schema:
          type: string
          enum: [privat, geschaeft]
        description: Filter by customer type
      - in: query
        name: search
        schema:
          type: string
        description: Search term for name, email, or company
      - in: query
        name: page
        schema:
          type: integer
          default: 1
        description: Page number (1-based)
      - in: query
        name: limit
        schema:
          type: integer
          default: 20
          maximum: 100
        description: Items per page
      - in: query
        name: sortBy
        schema:
          type: string
          enum: [name, email, firma, ort, status, created_at]
          default: name
        description: Field to sort by
      - in: query
        name: sortDirection
        schema:
          type: string
          enum: [asc, desc]
          default: asc
        description: Sort direction
    responses:
      '200':
        description: List of customers
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                data:
                  type: array
                  items:
                    $ref: '../schemas/customers.yaml#/Customer'
                message:
                  type: string
                  example: "Customers retrieved successfully"
                meta:
                  type: object
                  properties:
                    timestamp:
                      type: string
                      format: date-time
                    pagination:
                      $ref: '../schemas/common.yaml#/Pagination'
                    filters:
                      type: object
                      properties:
                        status:
                          type: string
                        type:
                          type: string
                        search:
                          type: string
      '401':
        $ref: '../openapi.yaml#/components/responses/UnauthorizedError'

  post:
    tags:
      - Customers
    summary: Create new customer
    description: Add a new customer
    operationId: createCustomer
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../schemas/customers.yaml#/CustomerCreate'
    responses:
      '201':
        description: Customer created
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                data:
                  $ref: '../schemas/customers.yaml#/Customer'
                message:
                  type: string
                  example: "Customer created successfully"
                meta:
                  type: object
                  properties:
                    timestamp:
                      type: string
                      format: date-time
      '400':
        $ref: '../openapi.yaml#/components/responses/ValidationError'
      '401':
        $ref: '../openapi.yaml#/components/responses/UnauthorizedError'
      '409':
        description: Email already exists
        content:
          application/json:
            schema:
              $ref: '../schemas/error.yaml#/Error'

customers-statistics:
  get:
    tags:
      - Customers
    summary: Get customer statistics
    description: Retrieve statistics about customers like counts by type, status, growth
    operationId: getCustomerStatistics
    responses:
      '200':
        description: Customer statistics
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                data:
                  type: object
                  properties:
                    stats:
                      type: object
                      properties:
                        total:
                          type: integer
                        active:
                          type: integer
                        private:
                          type: integer
                        business:
                          type: integer
                    growthData:
                      type: array
                      items:
                        type: object
                        properties:
                          month:
                            type: string
                          count:
                            type: integer
                message:
                  type: string
                  example: "Customer statistics retrieved successfully"
                meta:
                  type: object
                  properties:
                    timestamp:
                      type: string
                      format: date-time
      '401':
        $ref: '../openapi.yaml#/components/responses/UnauthorizedError'

customers-id:
  get:
    tags:
      - Customers
    summary: Get customer by ID
    description: Retrieve detailed customer information with projects and appointments
    operationId: getCustomerById
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: Customer ID
    responses:
      '200':
        description: Customer details
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                data:
                  $ref: '../schemas/customers.yaml#/CustomerWithDetails'
                message:
                  type: string
                  example: "Customer retrieved successfully"
                meta:
                  type: object
                  properties:
                    timestamp:
                      type: string
                      format: date-time
      '404':
        $ref: '../openapi.yaml#/components/responses/NotFoundError'
      '401':
        $ref: '../openapi.yaml#/components/responses/UnauthorizedError'

  put:
    tags:
      - Customers
    summary: Update customer
    description: Update an existing customer
    operationId: updateCustomer
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: Customer ID
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../schemas/customers.yaml#/CustomerUpdate'
    responses:
      '200':
        description: Customer updated
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                data:
                  $ref: '../schemas/customers.yaml#/Customer'
                message:
                  type: string
                  example: "Customer updated successfully"
                meta:
                  type: object
                  properties:
                    timestamp:
                      type: string
                      format: date-time
      '400':
        $ref: '../openapi.yaml#/components/responses/ValidationError'
      '404':
        $ref: '../openapi.yaml#/components/responses/NotFoundError'
      '401':
        $ref: '../openapi.yaml#/components/responses/UnauthorizedError'
      '409':
        description: Email already exists
        content:
          application/json:
            schema:
              $ref: '../schemas/error.yaml#/Error'

customers-id-notes:
  post:
    tags:
      - Customers
    summary: Add note to customer
    description: Add a new note to an existing customer
    operationId: addCustomerNote
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: Customer ID
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../schemas/customers.yaml#/CustomerNote'
    responses:
      '201':
        description: Note added successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                data:
                  type: object
                  properties:
                    success:
                      type: boolean
                    message:
                      type: string
                message:
                  type: string
                  example: "Note added successfully"
                meta:
                  type: object
                  properties:
                    timestamp:
                      type: string
                      format: date-time
      '400':
        $ref: '../openapi.yaml#/components/responses/ValidationError'
      '404':
        $ref: '../openapi.yaml#/components/responses/NotFoundError'
      '401':
        $ref: '../openapi.yaml#/components/responses/UnauthorizedError'

customers-id-status:
  patch:
    tags:
      - Customers
    summary: Update customer status
    description: Change the status of a customer
    operationId: updateCustomerStatus
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: Customer ID
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../schemas/customers.yaml#/CustomerStatusUpdate'
    responses:
      '200':
        description: Status updated successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                data:
                  type: object
                  properties:
                    id:
                      type: integer
                    status:
                      type: string
                    statusLabel:
                      type: string
                message:
                  type: string
                  example: "Customer status updated successfully"
                meta:
                  type: object
                  properties:
                    timestamp:
                      type: string
                      format: date-time
      '400':
        $ref: '../openapi.yaml#/components/responses/ValidationError'
      '404':
        $ref: '../openapi.yaml#/components/responses/NotFoundError'
      '401':
        $ref: '../openapi.yaml#/components/responses/UnauthorizedError'