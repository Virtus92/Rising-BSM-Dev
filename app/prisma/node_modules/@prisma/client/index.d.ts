
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model UserSettings
 * 
 */
export type UserSettings = $Result.DefaultSelection<Prisma.$UserSettingsPayload>
/**
 * Model UserActivity
 * 
 */
export type UserActivity = $Result.DefaultSelection<Prisma.$UserActivityPayload>
/**
 * Model UserSession
 * 
 */
export type UserSession = $Result.DefaultSelection<Prisma.$UserSessionPayload>
/**
 * Model Permission
 * 
 */
export type Permission = $Result.DefaultSelection<Prisma.$PermissionPayload>
/**
 * Model UserPermission
 * 
 */
export type UserPermission = $Result.DefaultSelection<Prisma.$UserPermissionPayload>
/**
 * Model RefreshToken
 * 
 */
export type RefreshToken = $Result.DefaultSelection<Prisma.$RefreshTokenPayload>
/**
 * Model SystemSettings
 * 
 */
export type SystemSettings = $Result.DefaultSelection<Prisma.$SystemSettingsPayload>
/**
 * Model Customer
 * 
 */
export type Customer = $Result.DefaultSelection<Prisma.$CustomerPayload>
/**
 * Model CustomerLog
 * 
 */
export type CustomerLog = $Result.DefaultSelection<Prisma.$CustomerLogPayload>
/**
 * Model Appointment
 * 
 */
export type Appointment = $Result.DefaultSelection<Prisma.$AppointmentPayload>
/**
 * Model AppointmentNote
 * 
 */
export type AppointmentNote = $Result.DefaultSelection<Prisma.$AppointmentNotePayload>
/**
 * Model AppointmentLog
 * 
 */
export type AppointmentLog = $Result.DefaultSelection<Prisma.$AppointmentLogPayload>
/**
 * Model ContactRequest
 * 
 */
export type ContactRequest = $Result.DefaultSelection<Prisma.$ContactRequestPayload>
/**
 * Model RequestNote
 * 
 */
export type RequestNote = $Result.DefaultSelection<Prisma.$RequestNotePayload>
/**
 * Model RequestLog
 * 
 */
export type RequestLog = $Result.DefaultSelection<Prisma.$RequestLogPayload>
/**
 * Model RequestData
 * 
 */
export type RequestData = $Result.DefaultSelection<Prisma.$RequestDataPayload>
/**
 * Model RequestDataHistory
 * 
 */
export type RequestDataHistory = $Result.DefaultSelection<Prisma.$RequestDataHistoryPayload>
/**
 * Model N8NWebhook
 * 
 */
export type N8NWebhook = $Result.DefaultSelection<Prisma.$N8NWebhookPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model File
 * 
 */
export type File = $Result.DefaultSelection<Prisma.$FilePayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userSettings`: Exposes CRUD operations for the **UserSettings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserSettings
    * const userSettings = await prisma.userSettings.findMany()
    * ```
    */
  get userSettings(): Prisma.UserSettingsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userActivity`: Exposes CRUD operations for the **UserActivity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserActivities
    * const userActivities = await prisma.userActivity.findMany()
    * ```
    */
  get userActivity(): Prisma.UserActivityDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userSession`: Exposes CRUD operations for the **UserSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserSessions
    * const userSessions = await prisma.userSession.findMany()
    * ```
    */
  get userSession(): Prisma.UserSessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.permission`: Exposes CRUD operations for the **Permission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Permissions
    * const permissions = await prisma.permission.findMany()
    * ```
    */
  get permission(): Prisma.PermissionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userPermission`: Exposes CRUD operations for the **UserPermission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserPermissions
    * const userPermissions = await prisma.userPermission.findMany()
    * ```
    */
  get userPermission(): Prisma.UserPermissionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.refreshToken`: Exposes CRUD operations for the **RefreshToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RefreshTokens
    * const refreshTokens = await prisma.refreshToken.findMany()
    * ```
    */
  get refreshToken(): Prisma.RefreshTokenDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.systemSettings`: Exposes CRUD operations for the **SystemSettings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SystemSettings
    * const systemSettings = await prisma.systemSettings.findMany()
    * ```
    */
  get systemSettings(): Prisma.SystemSettingsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.customer`: Exposes CRUD operations for the **Customer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customers
    * const customers = await prisma.customer.findMany()
    * ```
    */
  get customer(): Prisma.CustomerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.customerLog`: Exposes CRUD operations for the **CustomerLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CustomerLogs
    * const customerLogs = await prisma.customerLog.findMany()
    * ```
    */
  get customerLog(): Prisma.CustomerLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.appointment`: Exposes CRUD operations for the **Appointment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Appointments
    * const appointments = await prisma.appointment.findMany()
    * ```
    */
  get appointment(): Prisma.AppointmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.appointmentNote`: Exposes CRUD operations for the **AppointmentNote** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AppointmentNotes
    * const appointmentNotes = await prisma.appointmentNote.findMany()
    * ```
    */
  get appointmentNote(): Prisma.AppointmentNoteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.appointmentLog`: Exposes CRUD operations for the **AppointmentLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AppointmentLogs
    * const appointmentLogs = await prisma.appointmentLog.findMany()
    * ```
    */
  get appointmentLog(): Prisma.AppointmentLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.contactRequest`: Exposes CRUD operations for the **ContactRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContactRequests
    * const contactRequests = await prisma.contactRequest.findMany()
    * ```
    */
  get contactRequest(): Prisma.ContactRequestDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.requestNote`: Exposes CRUD operations for the **RequestNote** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RequestNotes
    * const requestNotes = await prisma.requestNote.findMany()
    * ```
    */
  get requestNote(): Prisma.RequestNoteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.requestLog`: Exposes CRUD operations for the **RequestLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RequestLogs
    * const requestLogs = await prisma.requestLog.findMany()
    * ```
    */
  get requestLog(): Prisma.RequestLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.requestData`: Exposes CRUD operations for the **RequestData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RequestData
    * const requestData = await prisma.requestData.findMany()
    * ```
    */
  get requestData(): Prisma.RequestDataDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.requestDataHistory`: Exposes CRUD operations for the **RequestDataHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RequestDataHistories
    * const requestDataHistories = await prisma.requestDataHistory.findMany()
    * ```
    */
  get requestDataHistory(): Prisma.RequestDataHistoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.n8NWebhook`: Exposes CRUD operations for the **N8NWebhook** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more N8NWebhooks
    * const n8NWebhooks = await prisma.n8NWebhook.findMany()
    * ```
    */
  get n8NWebhook(): Prisma.N8NWebhookDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.file`: Exposes CRUD operations for the **File** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Files
    * const files = await prisma.file.findMany()
    * ```
    */
  get file(): Prisma.FileDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    UserSettings: 'UserSettings',
    UserActivity: 'UserActivity',
    UserSession: 'UserSession',
    Permission: 'Permission',
    UserPermission: 'UserPermission',
    RefreshToken: 'RefreshToken',
    SystemSettings: 'SystemSettings',
    Customer: 'Customer',
    CustomerLog: 'CustomerLog',
    Appointment: 'Appointment',
    AppointmentNote: 'AppointmentNote',
    AppointmentLog: 'AppointmentLog',
    ContactRequest: 'ContactRequest',
    RequestNote: 'RequestNote',
    RequestLog: 'RequestLog',
    RequestData: 'RequestData',
    RequestDataHistory: 'RequestDataHistory',
    N8NWebhook: 'N8NWebhook',
    Notification: 'Notification',
    File: 'File'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "userSettings" | "userActivity" | "userSession" | "permission" | "userPermission" | "refreshToken" | "systemSettings" | "customer" | "customerLog" | "appointment" | "appointmentNote" | "appointmentLog" | "contactRequest" | "requestNote" | "requestLog" | "requestData" | "requestDataHistory" | "n8NWebhook" | "notification" | "file"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      UserSettings: {
        payload: Prisma.$UserSettingsPayload<ExtArgs>
        fields: Prisma.UserSettingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserSettingsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserSettingsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>
          }
          findFirst: {
            args: Prisma.UserSettingsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserSettingsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>
          }
          findMany: {
            args: Prisma.UserSettingsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>[]
          }
          create: {
            args: Prisma.UserSettingsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>
          }
          createMany: {
            args: Prisma.UserSettingsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserSettingsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>[]
          }
          delete: {
            args: Prisma.UserSettingsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>
          }
          update: {
            args: Prisma.UserSettingsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>
          }
          deleteMany: {
            args: Prisma.UserSettingsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserSettingsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserSettingsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>[]
          }
          upsert: {
            args: Prisma.UserSettingsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingsPayload>
          }
          aggregate: {
            args: Prisma.UserSettingsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserSettings>
          }
          groupBy: {
            args: Prisma.UserSettingsGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserSettingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserSettingsCountArgs<ExtArgs>
            result: $Utils.Optional<UserSettingsCountAggregateOutputType> | number
          }
        }
      }
      UserActivity: {
        payload: Prisma.$UserActivityPayload<ExtArgs>
        fields: Prisma.UserActivityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserActivityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserActivityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload>
          }
          findFirst: {
            args: Prisma.UserActivityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserActivityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload>
          }
          findMany: {
            args: Prisma.UserActivityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload>[]
          }
          create: {
            args: Prisma.UserActivityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload>
          }
          createMany: {
            args: Prisma.UserActivityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserActivityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload>[]
          }
          delete: {
            args: Prisma.UserActivityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload>
          }
          update: {
            args: Prisma.UserActivityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload>
          }
          deleteMany: {
            args: Prisma.UserActivityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserActivityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserActivityUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload>[]
          }
          upsert: {
            args: Prisma.UserActivityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload>
          }
          aggregate: {
            args: Prisma.UserActivityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserActivity>
          }
          groupBy: {
            args: Prisma.UserActivityGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserActivityGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserActivityCountArgs<ExtArgs>
            result: $Utils.Optional<UserActivityCountAggregateOutputType> | number
          }
        }
      }
      UserSession: {
        payload: Prisma.$UserSessionPayload<ExtArgs>
        fields: Prisma.UserSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          findFirst: {
            args: Prisma.UserSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          findMany: {
            args: Prisma.UserSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>[]
          }
          create: {
            args: Prisma.UserSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          createMany: {
            args: Prisma.UserSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>[]
          }
          delete: {
            args: Prisma.UserSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          update: {
            args: Prisma.UserSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          deleteMany: {
            args: Prisma.UserSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserSessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>[]
          }
          upsert: {
            args: Prisma.UserSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          aggregate: {
            args: Prisma.UserSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserSession>
          }
          groupBy: {
            args: Prisma.UserSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserSessionCountArgs<ExtArgs>
            result: $Utils.Optional<UserSessionCountAggregateOutputType> | number
          }
        }
      }
      Permission: {
        payload: Prisma.$PermissionPayload<ExtArgs>
        fields: Prisma.PermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PermissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PermissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          findFirst: {
            args: Prisma.PermissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PermissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          findMany: {
            args: Prisma.PermissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>[]
          }
          create: {
            args: Prisma.PermissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          createMany: {
            args: Prisma.PermissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PermissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>[]
          }
          delete: {
            args: Prisma.PermissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          update: {
            args: Prisma.PermissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          deleteMany: {
            args: Prisma.PermissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PermissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PermissionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>[]
          }
          upsert: {
            args: Prisma.PermissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          aggregate: {
            args: Prisma.PermissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePermission>
          }
          groupBy: {
            args: Prisma.PermissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PermissionCountArgs<ExtArgs>
            result: $Utils.Optional<PermissionCountAggregateOutputType> | number
          }
        }
      }
      UserPermission: {
        payload: Prisma.$UserPermissionPayload<ExtArgs>
        fields: Prisma.UserPermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserPermissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserPermissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          findFirst: {
            args: Prisma.UserPermissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserPermissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          findMany: {
            args: Prisma.UserPermissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>[]
          }
          create: {
            args: Prisma.UserPermissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          createMany: {
            args: Prisma.UserPermissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserPermissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>[]
          }
          delete: {
            args: Prisma.UserPermissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          update: {
            args: Prisma.UserPermissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          deleteMany: {
            args: Prisma.UserPermissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserPermissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserPermissionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>[]
          }
          upsert: {
            args: Prisma.UserPermissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          aggregate: {
            args: Prisma.UserPermissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserPermission>
          }
          groupBy: {
            args: Prisma.UserPermissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserPermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserPermissionCountArgs<ExtArgs>
            result: $Utils.Optional<UserPermissionCountAggregateOutputType> | number
          }
        }
      }
      RefreshToken: {
        payload: Prisma.$RefreshTokenPayload<ExtArgs>
        fields: Prisma.RefreshTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RefreshTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RefreshTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          findFirst: {
            args: Prisma.RefreshTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RefreshTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          findMany: {
            args: Prisma.RefreshTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>[]
          }
          create: {
            args: Prisma.RefreshTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          createMany: {
            args: Prisma.RefreshTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RefreshTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>[]
          }
          delete: {
            args: Prisma.RefreshTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          update: {
            args: Prisma.RefreshTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          deleteMany: {
            args: Prisma.RefreshTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RefreshTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RefreshTokenUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>[]
          }
          upsert: {
            args: Prisma.RefreshTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          aggregate: {
            args: Prisma.RefreshTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRefreshToken>
          }
          groupBy: {
            args: Prisma.RefreshTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<RefreshTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.RefreshTokenCountArgs<ExtArgs>
            result: $Utils.Optional<RefreshTokenCountAggregateOutputType> | number
          }
        }
      }
      SystemSettings: {
        payload: Prisma.$SystemSettingsPayload<ExtArgs>
        fields: Prisma.SystemSettingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SystemSettingsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SystemSettingsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>
          }
          findFirst: {
            args: Prisma.SystemSettingsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SystemSettingsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>
          }
          findMany: {
            args: Prisma.SystemSettingsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>[]
          }
          create: {
            args: Prisma.SystemSettingsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>
          }
          createMany: {
            args: Prisma.SystemSettingsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SystemSettingsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>[]
          }
          delete: {
            args: Prisma.SystemSettingsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>
          }
          update: {
            args: Prisma.SystemSettingsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>
          }
          deleteMany: {
            args: Prisma.SystemSettingsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SystemSettingsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SystemSettingsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>[]
          }
          upsert: {
            args: Prisma.SystemSettingsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>
          }
          aggregate: {
            args: Prisma.SystemSettingsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSystemSettings>
          }
          groupBy: {
            args: Prisma.SystemSettingsGroupByArgs<ExtArgs>
            result: $Utils.Optional<SystemSettingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.SystemSettingsCountArgs<ExtArgs>
            result: $Utils.Optional<SystemSettingsCountAggregateOutputType> | number
          }
        }
      }
      Customer: {
        payload: Prisma.$CustomerPayload<ExtArgs>
        fields: Prisma.CustomerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findFirst: {
            args: Prisma.CustomerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findMany: {
            args: Prisma.CustomerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          create: {
            args: Prisma.CustomerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          createMany: {
            args: Prisma.CustomerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CustomerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          delete: {
            args: Prisma.CustomerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          update: {
            args: Prisma.CustomerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          deleteMany: {
            args: Prisma.CustomerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CustomerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          upsert: {
            args: Prisma.CustomerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          aggregate: {
            args: Prisma.CustomerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomer>
          }
          groupBy: {
            args: Prisma.CustomerGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomerGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerCountArgs<ExtArgs>
            result: $Utils.Optional<CustomerCountAggregateOutputType> | number
          }
        }
      }
      CustomerLog: {
        payload: Prisma.$CustomerLogPayload<ExtArgs>
        fields: Prisma.CustomerLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerLogPayload>
          }
          findFirst: {
            args: Prisma.CustomerLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerLogPayload>
          }
          findMany: {
            args: Prisma.CustomerLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerLogPayload>[]
          }
          create: {
            args: Prisma.CustomerLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerLogPayload>
          }
          createMany: {
            args: Prisma.CustomerLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CustomerLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerLogPayload>[]
          }
          delete: {
            args: Prisma.CustomerLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerLogPayload>
          }
          update: {
            args: Prisma.CustomerLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerLogPayload>
          }
          deleteMany: {
            args: Prisma.CustomerLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CustomerLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerLogPayload>[]
          }
          upsert: {
            args: Prisma.CustomerLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerLogPayload>
          }
          aggregate: {
            args: Prisma.CustomerLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomerLog>
          }
          groupBy: {
            args: Prisma.CustomerLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomerLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerLogCountArgs<ExtArgs>
            result: $Utils.Optional<CustomerLogCountAggregateOutputType> | number
          }
        }
      }
      Appointment: {
        payload: Prisma.$AppointmentPayload<ExtArgs>
        fields: Prisma.AppointmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AppointmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AppointmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          findFirst: {
            args: Prisma.AppointmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AppointmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          findMany: {
            args: Prisma.AppointmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>[]
          }
          create: {
            args: Prisma.AppointmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          createMany: {
            args: Prisma.AppointmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AppointmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>[]
          }
          delete: {
            args: Prisma.AppointmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          update: {
            args: Prisma.AppointmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          deleteMany: {
            args: Prisma.AppointmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AppointmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AppointmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>[]
          }
          upsert: {
            args: Prisma.AppointmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          aggregate: {
            args: Prisma.AppointmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAppointment>
          }
          groupBy: {
            args: Prisma.AppointmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<AppointmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AppointmentCountArgs<ExtArgs>
            result: $Utils.Optional<AppointmentCountAggregateOutputType> | number
          }
        }
      }
      AppointmentNote: {
        payload: Prisma.$AppointmentNotePayload<ExtArgs>
        fields: Prisma.AppointmentNoteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AppointmentNoteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentNotePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AppointmentNoteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentNotePayload>
          }
          findFirst: {
            args: Prisma.AppointmentNoteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentNotePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AppointmentNoteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentNotePayload>
          }
          findMany: {
            args: Prisma.AppointmentNoteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentNotePayload>[]
          }
          create: {
            args: Prisma.AppointmentNoteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentNotePayload>
          }
          createMany: {
            args: Prisma.AppointmentNoteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AppointmentNoteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentNotePayload>[]
          }
          delete: {
            args: Prisma.AppointmentNoteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentNotePayload>
          }
          update: {
            args: Prisma.AppointmentNoteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentNotePayload>
          }
          deleteMany: {
            args: Prisma.AppointmentNoteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AppointmentNoteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AppointmentNoteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentNotePayload>[]
          }
          upsert: {
            args: Prisma.AppointmentNoteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentNotePayload>
          }
          aggregate: {
            args: Prisma.AppointmentNoteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAppointmentNote>
          }
          groupBy: {
            args: Prisma.AppointmentNoteGroupByArgs<ExtArgs>
            result: $Utils.Optional<AppointmentNoteGroupByOutputType>[]
          }
          count: {
            args: Prisma.AppointmentNoteCountArgs<ExtArgs>
            result: $Utils.Optional<AppointmentNoteCountAggregateOutputType> | number
          }
        }
      }
      AppointmentLog: {
        payload: Prisma.$AppointmentLogPayload<ExtArgs>
        fields: Prisma.AppointmentLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AppointmentLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AppointmentLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentLogPayload>
          }
          findFirst: {
            args: Prisma.AppointmentLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AppointmentLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentLogPayload>
          }
          findMany: {
            args: Prisma.AppointmentLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentLogPayload>[]
          }
          create: {
            args: Prisma.AppointmentLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentLogPayload>
          }
          createMany: {
            args: Prisma.AppointmentLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AppointmentLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentLogPayload>[]
          }
          delete: {
            args: Prisma.AppointmentLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentLogPayload>
          }
          update: {
            args: Prisma.AppointmentLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentLogPayload>
          }
          deleteMany: {
            args: Prisma.AppointmentLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AppointmentLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AppointmentLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentLogPayload>[]
          }
          upsert: {
            args: Prisma.AppointmentLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentLogPayload>
          }
          aggregate: {
            args: Prisma.AppointmentLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAppointmentLog>
          }
          groupBy: {
            args: Prisma.AppointmentLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AppointmentLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AppointmentLogCountArgs<ExtArgs>
            result: $Utils.Optional<AppointmentLogCountAggregateOutputType> | number
          }
        }
      }
      ContactRequest: {
        payload: Prisma.$ContactRequestPayload<ExtArgs>
        fields: Prisma.ContactRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContactRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContactRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactRequestPayload>
          }
          findFirst: {
            args: Prisma.ContactRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContactRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactRequestPayload>
          }
          findMany: {
            args: Prisma.ContactRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactRequestPayload>[]
          }
          create: {
            args: Prisma.ContactRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactRequestPayload>
          }
          createMany: {
            args: Prisma.ContactRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContactRequestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactRequestPayload>[]
          }
          delete: {
            args: Prisma.ContactRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactRequestPayload>
          }
          update: {
            args: Prisma.ContactRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactRequestPayload>
          }
          deleteMany: {
            args: Prisma.ContactRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContactRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ContactRequestUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactRequestPayload>[]
          }
          upsert: {
            args: Prisma.ContactRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactRequestPayload>
          }
          aggregate: {
            args: Prisma.ContactRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContactRequest>
          }
          groupBy: {
            args: Prisma.ContactRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContactRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContactRequestCountArgs<ExtArgs>
            result: $Utils.Optional<ContactRequestCountAggregateOutputType> | number
          }
        }
      }
      RequestNote: {
        payload: Prisma.$RequestNotePayload<ExtArgs>
        fields: Prisma.RequestNoteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RequestNoteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestNotePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RequestNoteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestNotePayload>
          }
          findFirst: {
            args: Prisma.RequestNoteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestNotePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RequestNoteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestNotePayload>
          }
          findMany: {
            args: Prisma.RequestNoteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestNotePayload>[]
          }
          create: {
            args: Prisma.RequestNoteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestNotePayload>
          }
          createMany: {
            args: Prisma.RequestNoteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RequestNoteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestNotePayload>[]
          }
          delete: {
            args: Prisma.RequestNoteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestNotePayload>
          }
          update: {
            args: Prisma.RequestNoteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestNotePayload>
          }
          deleteMany: {
            args: Prisma.RequestNoteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RequestNoteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RequestNoteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestNotePayload>[]
          }
          upsert: {
            args: Prisma.RequestNoteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestNotePayload>
          }
          aggregate: {
            args: Prisma.RequestNoteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRequestNote>
          }
          groupBy: {
            args: Prisma.RequestNoteGroupByArgs<ExtArgs>
            result: $Utils.Optional<RequestNoteGroupByOutputType>[]
          }
          count: {
            args: Prisma.RequestNoteCountArgs<ExtArgs>
            result: $Utils.Optional<RequestNoteCountAggregateOutputType> | number
          }
        }
      }
      RequestLog: {
        payload: Prisma.$RequestLogPayload<ExtArgs>
        fields: Prisma.RequestLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RequestLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RequestLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestLogPayload>
          }
          findFirst: {
            args: Prisma.RequestLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RequestLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestLogPayload>
          }
          findMany: {
            args: Prisma.RequestLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestLogPayload>[]
          }
          create: {
            args: Prisma.RequestLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestLogPayload>
          }
          createMany: {
            args: Prisma.RequestLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RequestLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestLogPayload>[]
          }
          delete: {
            args: Prisma.RequestLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestLogPayload>
          }
          update: {
            args: Prisma.RequestLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestLogPayload>
          }
          deleteMany: {
            args: Prisma.RequestLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RequestLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RequestLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestLogPayload>[]
          }
          upsert: {
            args: Prisma.RequestLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestLogPayload>
          }
          aggregate: {
            args: Prisma.RequestLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRequestLog>
          }
          groupBy: {
            args: Prisma.RequestLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<RequestLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.RequestLogCountArgs<ExtArgs>
            result: $Utils.Optional<RequestLogCountAggregateOutputType> | number
          }
        }
      }
      RequestData: {
        payload: Prisma.$RequestDataPayload<ExtArgs>
        fields: Prisma.RequestDataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RequestDataFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestDataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RequestDataFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestDataPayload>
          }
          findFirst: {
            args: Prisma.RequestDataFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestDataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RequestDataFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestDataPayload>
          }
          findMany: {
            args: Prisma.RequestDataFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestDataPayload>[]
          }
          create: {
            args: Prisma.RequestDataCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestDataPayload>
          }
          createMany: {
            args: Prisma.RequestDataCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RequestDataCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestDataPayload>[]
          }
          delete: {
            args: Prisma.RequestDataDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestDataPayload>
          }
          update: {
            args: Prisma.RequestDataUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestDataPayload>
          }
          deleteMany: {
            args: Prisma.RequestDataDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RequestDataUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RequestDataUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestDataPayload>[]
          }
          upsert: {
            args: Prisma.RequestDataUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestDataPayload>
          }
          aggregate: {
            args: Prisma.RequestDataAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRequestData>
          }
          groupBy: {
            args: Prisma.RequestDataGroupByArgs<ExtArgs>
            result: $Utils.Optional<RequestDataGroupByOutputType>[]
          }
          count: {
            args: Prisma.RequestDataCountArgs<ExtArgs>
            result: $Utils.Optional<RequestDataCountAggregateOutputType> | number
          }
        }
      }
      RequestDataHistory: {
        payload: Prisma.$RequestDataHistoryPayload<ExtArgs>
        fields: Prisma.RequestDataHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RequestDataHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestDataHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RequestDataHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestDataHistoryPayload>
          }
          findFirst: {
            args: Prisma.RequestDataHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestDataHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RequestDataHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestDataHistoryPayload>
          }
          findMany: {
            args: Prisma.RequestDataHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestDataHistoryPayload>[]
          }
          create: {
            args: Prisma.RequestDataHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestDataHistoryPayload>
          }
          createMany: {
            args: Prisma.RequestDataHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RequestDataHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestDataHistoryPayload>[]
          }
          delete: {
            args: Prisma.RequestDataHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestDataHistoryPayload>
          }
          update: {
            args: Prisma.RequestDataHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestDataHistoryPayload>
          }
          deleteMany: {
            args: Prisma.RequestDataHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RequestDataHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RequestDataHistoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestDataHistoryPayload>[]
          }
          upsert: {
            args: Prisma.RequestDataHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestDataHistoryPayload>
          }
          aggregate: {
            args: Prisma.RequestDataHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRequestDataHistory>
          }
          groupBy: {
            args: Prisma.RequestDataHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<RequestDataHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.RequestDataHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<RequestDataHistoryCountAggregateOutputType> | number
          }
        }
      }
      N8NWebhook: {
        payload: Prisma.$N8NWebhookPayload<ExtArgs>
        fields: Prisma.N8NWebhookFieldRefs
        operations: {
          findUnique: {
            args: Prisma.N8NWebhookFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$N8NWebhookPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.N8NWebhookFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$N8NWebhookPayload>
          }
          findFirst: {
            args: Prisma.N8NWebhookFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$N8NWebhookPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.N8NWebhookFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$N8NWebhookPayload>
          }
          findMany: {
            args: Prisma.N8NWebhookFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$N8NWebhookPayload>[]
          }
          create: {
            args: Prisma.N8NWebhookCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$N8NWebhookPayload>
          }
          createMany: {
            args: Prisma.N8NWebhookCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.N8NWebhookCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$N8NWebhookPayload>[]
          }
          delete: {
            args: Prisma.N8NWebhookDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$N8NWebhookPayload>
          }
          update: {
            args: Prisma.N8NWebhookUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$N8NWebhookPayload>
          }
          deleteMany: {
            args: Prisma.N8NWebhookDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.N8NWebhookUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.N8NWebhookUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$N8NWebhookPayload>[]
          }
          upsert: {
            args: Prisma.N8NWebhookUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$N8NWebhookPayload>
          }
          aggregate: {
            args: Prisma.N8NWebhookAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateN8NWebhook>
          }
          groupBy: {
            args: Prisma.N8NWebhookGroupByArgs<ExtArgs>
            result: $Utils.Optional<N8NWebhookGroupByOutputType>[]
          }
          count: {
            args: Prisma.N8NWebhookCountArgs<ExtArgs>
            result: $Utils.Optional<N8NWebhookCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      File: {
        payload: Prisma.$FilePayload<ExtArgs>
        fields: Prisma.FileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          findFirst: {
            args: Prisma.FileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          findMany: {
            args: Prisma.FileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>[]
          }
          create: {
            args: Prisma.FileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          createMany: {
            args: Prisma.FileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>[]
          }
          delete: {
            args: Prisma.FileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          update: {
            args: Prisma.FileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          deleteMany: {
            args: Prisma.FileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>[]
          }
          upsert: {
            args: Prisma.FileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          aggregate: {
            args: Prisma.FileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFile>
          }
          groupBy: {
            args: Prisma.FileGroupByArgs<ExtArgs>
            result: $Utils.Optional<FileGroupByOutputType>[]
          }
          count: {
            args: Prisma.FileCountArgs<ExtArgs>
            result: $Utils.Optional<FileCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    userSettings?: UserSettingsOmit
    userActivity?: UserActivityOmit
    userSession?: UserSessionOmit
    permission?: PermissionOmit
    userPermission?: UserPermissionOmit
    refreshToken?: RefreshTokenOmit
    systemSettings?: SystemSettingsOmit
    customer?: CustomerOmit
    customerLog?: CustomerLogOmit
    appointment?: AppointmentOmit
    appointmentNote?: AppointmentNoteOmit
    appointmentLog?: AppointmentLogOmit
    contactRequest?: ContactRequestOmit
    requestNote?: RequestNoteOmit
    requestLog?: RequestLogOmit
    requestData?: RequestDataOmit
    requestDataHistory?: RequestDataHistoryOmit
    n8NWebhook?: N8NWebhookOmit
    notification?: NotificationOmit
    file?: FileOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    activities: number
    appointments: number
    refreshTokens: number
    customerLogs: number
    appointmentNotes: number
    appointmentLogs: number
    contactRequests: number
    requestNotes: number
    requestLogs: number
    permissions: number
    requestData: number
    requestDataHistory: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activities?: boolean | UserCountOutputTypeCountActivitiesArgs
    appointments?: boolean | UserCountOutputTypeCountAppointmentsArgs
    refreshTokens?: boolean | UserCountOutputTypeCountRefreshTokensArgs
    customerLogs?: boolean | UserCountOutputTypeCountCustomerLogsArgs
    appointmentNotes?: boolean | UserCountOutputTypeCountAppointmentNotesArgs
    appointmentLogs?: boolean | UserCountOutputTypeCountAppointmentLogsArgs
    contactRequests?: boolean | UserCountOutputTypeCountContactRequestsArgs
    requestNotes?: boolean | UserCountOutputTypeCountRequestNotesArgs
    requestLogs?: boolean | UserCountOutputTypeCountRequestLogsArgs
    permissions?: boolean | UserCountOutputTypeCountPermissionsArgs
    requestData?: boolean | UserCountOutputTypeCountRequestDataArgs
    requestDataHistory?: boolean | UserCountOutputTypeCountRequestDataHistoryArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserActivityWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRefreshTokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RefreshTokenWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCustomerLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAppointmentNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentNoteWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAppointmentLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountContactRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactRequestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRequestNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RequestNoteWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRequestLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RequestLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPermissionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRequestDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RequestDataWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRequestDataHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RequestDataHistoryWhereInput
  }


  /**
   * Count Type PermissionCountOutputType
   */

  export type PermissionCountOutputType = {
    users: number
  }

  export type PermissionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | PermissionCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * PermissionCountOutputType without action
   */
  export type PermissionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionCountOutputType
     */
    select?: PermissionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PermissionCountOutputType without action
   */
  export type PermissionCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPermissionWhereInput
  }


  /**
   * Count Type CustomerCountOutputType
   */

  export type CustomerCountOutputType = {
    appointments: number
    logs: number
    contactRequests: number
  }

  export type CustomerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    appointments?: boolean | CustomerCountOutputTypeCountAppointmentsArgs
    logs?: boolean | CustomerCountOutputTypeCountLogsArgs
    contactRequests?: boolean | CustomerCountOutputTypeCountContactRequestsArgs
  }

  // Custom InputTypes
  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCountOutputType
     */
    select?: CustomerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerLogWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountContactRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactRequestWhereInput
  }


  /**
   * Count Type AppointmentCountOutputType
   */

  export type AppointmentCountOutputType = {
    notes: number
    logs: number
    contactRequests: number
  }

  export type AppointmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notes?: boolean | AppointmentCountOutputTypeCountNotesArgs
    logs?: boolean | AppointmentCountOutputTypeCountLogsArgs
    contactRequests?: boolean | AppointmentCountOutputTypeCountContactRequestsArgs
  }

  // Custom InputTypes
  /**
   * AppointmentCountOutputType without action
   */
  export type AppointmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentCountOutputType
     */
    select?: AppointmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AppointmentCountOutputType without action
   */
  export type AppointmentCountOutputTypeCountNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentNoteWhereInput
  }

  /**
   * AppointmentCountOutputType without action
   */
  export type AppointmentCountOutputTypeCountLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentLogWhereInput
  }

  /**
   * AppointmentCountOutputType without action
   */
  export type AppointmentCountOutputTypeCountContactRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactRequestWhereInput
  }


  /**
   * Count Type ContactRequestCountOutputType
   */

  export type ContactRequestCountOutputType = {
    notes: number
    logs: number
    requestData: number
  }

  export type ContactRequestCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notes?: boolean | ContactRequestCountOutputTypeCountNotesArgs
    logs?: boolean | ContactRequestCountOutputTypeCountLogsArgs
    requestData?: boolean | ContactRequestCountOutputTypeCountRequestDataArgs
  }

  // Custom InputTypes
  /**
   * ContactRequestCountOutputType without action
   */
  export type ContactRequestCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactRequestCountOutputType
     */
    select?: ContactRequestCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ContactRequestCountOutputType without action
   */
  export type ContactRequestCountOutputTypeCountNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RequestNoteWhereInput
  }

  /**
   * ContactRequestCountOutputType without action
   */
  export type ContactRequestCountOutputTypeCountLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RequestLogWhereInput
  }

  /**
   * ContactRequestCountOutputType without action
   */
  export type ContactRequestCountOutputTypeCountRequestDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RequestDataWhereInput
  }


  /**
   * Count Type RequestDataCountOutputType
   */

  export type RequestDataCountOutputType = {
    history: number
  }

  export type RequestDataCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    history?: boolean | RequestDataCountOutputTypeCountHistoryArgs
  }

  // Custom InputTypes
  /**
   * RequestDataCountOutputType without action
   */
  export type RequestDataCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestDataCountOutputType
     */
    select?: RequestDataCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RequestDataCountOutputType without action
   */
  export type RequestDataCountOutputTypeCountHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RequestDataHistoryWhereInput
  }


  /**
   * Count Type FileCountOutputType
   */

  export type FileCountOutputType = {
    userProfiles: number
  }

  export type FileCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userProfiles?: boolean | FileCountOutputTypeCountUserProfilesArgs
  }

  // Custom InputTypes
  /**
   * FileCountOutputType without action
   */
  export type FileCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileCountOutputType
     */
    select?: FileCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FileCountOutputType without action
   */
  export type FileCountOutputTypeCountUserProfilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    profilePictureId: number | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    profilePictureId: number | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    role: string | null
    phone: string | null
    status: string | null
    profilePicture: string | null
    profilePictureId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdBy: number | null
    updatedBy: number | null
    lastLoginAt: Date | null
    resetToken: string | null
    resetTokenExpiry: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    role: string | null
    phone: string | null
    status: string | null
    profilePicture: string | null
    profilePictureId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdBy: number | null
    updatedBy: number | null
    lastLoginAt: Date | null
    resetToken: string | null
    resetTokenExpiry: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    role: number
    phone: number
    status: number
    profilePicture: number
    profilePictureId: number
    createdAt: number
    updatedAt: number
    createdBy: number
    updatedBy: number
    lastLoginAt: number
    resetToken: number
    resetTokenExpiry: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    profilePictureId?: true
    createdBy?: true
    updatedBy?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    profilePictureId?: true
    createdBy?: true
    updatedBy?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    phone?: true
    status?: true
    profilePicture?: true
    profilePictureId?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    updatedBy?: true
    lastLoginAt?: true
    resetToken?: true
    resetTokenExpiry?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    phone?: true
    status?: true
    profilePicture?: true
    profilePictureId?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    updatedBy?: true
    lastLoginAt?: true
    resetToken?: true
    resetTokenExpiry?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    phone?: true
    status?: true
    profilePicture?: true
    profilePictureId?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    updatedBy?: true
    lastLoginAt?: true
    resetToken?: true
    resetTokenExpiry?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    name: string
    email: string
    password: string
    role: string
    phone: string | null
    status: string
    profilePicture: string | null
    profilePictureId: number | null
    createdAt: Date
    updatedAt: Date
    createdBy: number | null
    updatedBy: number | null
    lastLoginAt: Date | null
    resetToken: string | null
    resetTokenExpiry: Date | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    phone?: boolean
    status?: boolean
    profilePicture?: boolean
    profilePictureId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    updatedBy?: boolean
    lastLoginAt?: boolean
    resetToken?: boolean
    resetTokenExpiry?: boolean
    settings?: boolean | User$settingsArgs<ExtArgs>
    activities?: boolean | User$activitiesArgs<ExtArgs>
    appointments?: boolean | User$appointmentsArgs<ExtArgs>
    refreshTokens?: boolean | User$refreshTokensArgs<ExtArgs>
    customerLogs?: boolean | User$customerLogsArgs<ExtArgs>
    appointmentNotes?: boolean | User$appointmentNotesArgs<ExtArgs>
    appointmentLogs?: boolean | User$appointmentLogsArgs<ExtArgs>
    contactRequests?: boolean | User$contactRequestsArgs<ExtArgs>
    requestNotes?: boolean | User$requestNotesArgs<ExtArgs>
    requestLogs?: boolean | User$requestLogsArgs<ExtArgs>
    permissions?: boolean | User$permissionsArgs<ExtArgs>
    profilePictureFile?: boolean | User$profilePictureFileArgs<ExtArgs>
    requestData?: boolean | User$requestDataArgs<ExtArgs>
    requestDataHistory?: boolean | User$requestDataHistoryArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    phone?: boolean
    status?: boolean
    profilePicture?: boolean
    profilePictureId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    updatedBy?: boolean
    lastLoginAt?: boolean
    resetToken?: boolean
    resetTokenExpiry?: boolean
    profilePictureFile?: boolean | User$profilePictureFileArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    phone?: boolean
    status?: boolean
    profilePicture?: boolean
    profilePictureId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    updatedBy?: boolean
    lastLoginAt?: boolean
    resetToken?: boolean
    resetTokenExpiry?: boolean
    profilePictureFile?: boolean | User$profilePictureFileArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    phone?: boolean
    status?: boolean
    profilePicture?: boolean
    profilePictureId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    updatedBy?: boolean
    lastLoginAt?: boolean
    resetToken?: boolean
    resetTokenExpiry?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "password" | "role" | "phone" | "status" | "profilePicture" | "profilePictureId" | "createdAt" | "updatedAt" | "createdBy" | "updatedBy" | "lastLoginAt" | "resetToken" | "resetTokenExpiry", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    settings?: boolean | User$settingsArgs<ExtArgs>
    activities?: boolean | User$activitiesArgs<ExtArgs>
    appointments?: boolean | User$appointmentsArgs<ExtArgs>
    refreshTokens?: boolean | User$refreshTokensArgs<ExtArgs>
    customerLogs?: boolean | User$customerLogsArgs<ExtArgs>
    appointmentNotes?: boolean | User$appointmentNotesArgs<ExtArgs>
    appointmentLogs?: boolean | User$appointmentLogsArgs<ExtArgs>
    contactRequests?: boolean | User$contactRequestsArgs<ExtArgs>
    requestNotes?: boolean | User$requestNotesArgs<ExtArgs>
    requestLogs?: boolean | User$requestLogsArgs<ExtArgs>
    permissions?: boolean | User$permissionsArgs<ExtArgs>
    profilePictureFile?: boolean | User$profilePictureFileArgs<ExtArgs>
    requestData?: boolean | User$requestDataArgs<ExtArgs>
    requestDataHistory?: boolean | User$requestDataHistoryArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profilePictureFile?: boolean | User$profilePictureFileArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profilePictureFile?: boolean | User$profilePictureFileArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      settings: Prisma.$UserSettingsPayload<ExtArgs> | null
      activities: Prisma.$UserActivityPayload<ExtArgs>[]
      appointments: Prisma.$AppointmentPayload<ExtArgs>[]
      refreshTokens: Prisma.$RefreshTokenPayload<ExtArgs>[]
      customerLogs: Prisma.$CustomerLogPayload<ExtArgs>[]
      appointmentNotes: Prisma.$AppointmentNotePayload<ExtArgs>[]
      appointmentLogs: Prisma.$AppointmentLogPayload<ExtArgs>[]
      contactRequests: Prisma.$ContactRequestPayload<ExtArgs>[]
      requestNotes: Prisma.$RequestNotePayload<ExtArgs>[]
      requestLogs: Prisma.$RequestLogPayload<ExtArgs>[]
      permissions: Prisma.$UserPermissionPayload<ExtArgs>[]
      profilePictureFile: Prisma.$FilePayload<ExtArgs> | null
      requestData: Prisma.$RequestDataPayload<ExtArgs>[]
      requestDataHistory: Prisma.$RequestDataHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      password: string
      role: string
      phone: string | null
      status: string
      profilePicture: string | null
      profilePictureId: number | null
      createdAt: Date
      updatedAt: Date
      createdBy: number | null
      updatedBy: number | null
      lastLoginAt: Date | null
      resetToken: string | null
      resetTokenExpiry: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    settings<T extends User$settingsArgs<ExtArgs> = {}>(args?: Subset<T, User$settingsArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    activities<T extends User$activitiesArgs<ExtArgs> = {}>(args?: Subset<T, User$activitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    appointments<T extends User$appointmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$appointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    refreshTokens<T extends User$refreshTokensArgs<ExtArgs> = {}>(args?: Subset<T, User$refreshTokensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    customerLogs<T extends User$customerLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$customerLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    appointmentNotes<T extends User$appointmentNotesArgs<ExtArgs> = {}>(args?: Subset<T, User$appointmentNotesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentNotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    appointmentLogs<T extends User$appointmentLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$appointmentLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    contactRequests<T extends User$contactRequestsArgs<ExtArgs> = {}>(args?: Subset<T, User$contactRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    requestNotes<T extends User$requestNotesArgs<ExtArgs> = {}>(args?: Subset<T, User$requestNotesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestNotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    requestLogs<T extends User$requestLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$requestLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    permissions<T extends User$permissionsArgs<ExtArgs> = {}>(args?: Subset<T, User$permissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    profilePictureFile<T extends User$profilePictureFileArgs<ExtArgs> = {}>(args?: Subset<T, User$profilePictureFileArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    requestData<T extends User$requestDataArgs<ExtArgs> = {}>(args?: Subset<T, User$requestDataArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestDataPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    requestDataHistory<T extends User$requestDataHistoryArgs<ExtArgs> = {}>(args?: Subset<T, User$requestDataHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestDataHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly status: FieldRef<"User", 'String'>
    readonly profilePicture: FieldRef<"User", 'String'>
    readonly profilePictureId: FieldRef<"User", 'Int'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly createdBy: FieldRef<"User", 'Int'>
    readonly updatedBy: FieldRef<"User", 'Int'>
    readonly lastLoginAt: FieldRef<"User", 'DateTime'>
    readonly resetToken: FieldRef<"User", 'String'>
    readonly resetTokenExpiry: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.settings
   */
  export type User$settingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    where?: UserSettingsWhereInput
  }

  /**
   * User.activities
   */
  export type User$activitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserActivity
     */
    omit?: UserActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    where?: UserActivityWhereInput
    orderBy?: UserActivityOrderByWithRelationInput | UserActivityOrderByWithRelationInput[]
    cursor?: UserActivityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserActivityScalarFieldEnum | UserActivityScalarFieldEnum[]
  }

  /**
   * User.appointments
   */
  export type User$appointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * User.refreshTokens
   */
  export type User$refreshTokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    where?: RefreshTokenWhereInput
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    cursor?: RefreshTokenWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RefreshTokenScalarFieldEnum | RefreshTokenScalarFieldEnum[]
  }

  /**
   * User.customerLogs
   */
  export type User$customerLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerLog
     */
    select?: CustomerLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerLog
     */
    omit?: CustomerLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerLogInclude<ExtArgs> | null
    where?: CustomerLogWhereInput
    orderBy?: CustomerLogOrderByWithRelationInput | CustomerLogOrderByWithRelationInput[]
    cursor?: CustomerLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerLogScalarFieldEnum | CustomerLogScalarFieldEnum[]
  }

  /**
   * User.appointmentNotes
   */
  export type User$appointmentNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentNote
     */
    select?: AppointmentNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppointmentNote
     */
    omit?: AppointmentNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentNoteInclude<ExtArgs> | null
    where?: AppointmentNoteWhereInput
    orderBy?: AppointmentNoteOrderByWithRelationInput | AppointmentNoteOrderByWithRelationInput[]
    cursor?: AppointmentNoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentNoteScalarFieldEnum | AppointmentNoteScalarFieldEnum[]
  }

  /**
   * User.appointmentLogs
   */
  export type User$appointmentLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentLog
     */
    select?: AppointmentLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppointmentLog
     */
    omit?: AppointmentLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentLogInclude<ExtArgs> | null
    where?: AppointmentLogWhereInput
    orderBy?: AppointmentLogOrderByWithRelationInput | AppointmentLogOrderByWithRelationInput[]
    cursor?: AppointmentLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentLogScalarFieldEnum | AppointmentLogScalarFieldEnum[]
  }

  /**
   * User.contactRequests
   */
  export type User$contactRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactRequest
     */
    select?: ContactRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactRequest
     */
    omit?: ContactRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactRequestInclude<ExtArgs> | null
    where?: ContactRequestWhereInput
    orderBy?: ContactRequestOrderByWithRelationInput | ContactRequestOrderByWithRelationInput[]
    cursor?: ContactRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContactRequestScalarFieldEnum | ContactRequestScalarFieldEnum[]
  }

  /**
   * User.requestNotes
   */
  export type User$requestNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestNote
     */
    select?: RequestNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestNote
     */
    omit?: RequestNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestNoteInclude<ExtArgs> | null
    where?: RequestNoteWhereInput
    orderBy?: RequestNoteOrderByWithRelationInput | RequestNoteOrderByWithRelationInput[]
    cursor?: RequestNoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RequestNoteScalarFieldEnum | RequestNoteScalarFieldEnum[]
  }

  /**
   * User.requestLogs
   */
  export type User$requestLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestLog
     */
    select?: RequestLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestLog
     */
    omit?: RequestLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestLogInclude<ExtArgs> | null
    where?: RequestLogWhereInput
    orderBy?: RequestLogOrderByWithRelationInput | RequestLogOrderByWithRelationInput[]
    cursor?: RequestLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RequestLogScalarFieldEnum | RequestLogScalarFieldEnum[]
  }

  /**
   * User.permissions
   */
  export type User$permissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    where?: UserPermissionWhereInput
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    cursor?: UserPermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }

  /**
   * User.profilePictureFile
   */
  export type User$profilePictureFileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
  }

  /**
   * User.requestData
   */
  export type User$requestDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestData
     */
    select?: RequestDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestData
     */
    omit?: RequestDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestDataInclude<ExtArgs> | null
    where?: RequestDataWhereInput
    orderBy?: RequestDataOrderByWithRelationInput | RequestDataOrderByWithRelationInput[]
    cursor?: RequestDataWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RequestDataScalarFieldEnum | RequestDataScalarFieldEnum[]
  }

  /**
   * User.requestDataHistory
   */
  export type User$requestDataHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestDataHistory
     */
    select?: RequestDataHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestDataHistory
     */
    omit?: RequestDataHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestDataHistoryInclude<ExtArgs> | null
    where?: RequestDataHistoryWhereInput
    orderBy?: RequestDataHistoryOrderByWithRelationInput | RequestDataHistoryOrderByWithRelationInput[]
    cursor?: RequestDataHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RequestDataHistoryScalarFieldEnum | RequestDataHistoryScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model UserSettings
   */

  export type AggregateUserSettings = {
    _count: UserSettingsCountAggregateOutputType | null
    _avg: UserSettingsAvgAggregateOutputType | null
    _sum: UserSettingsSumAggregateOutputType | null
    _min: UserSettingsMinAggregateOutputType | null
    _max: UserSettingsMaxAggregateOutputType | null
  }

  export type UserSettingsAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserSettingsSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserSettingsMinAggregateOutputType = {
    id: number | null
    userId: number | null
    darkMode: boolean | null
    emailNotifications: boolean | null
    pushNotifications: boolean | null
    language: string | null
    notificationInterval: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserSettingsMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    darkMode: boolean | null
    emailNotifications: boolean | null
    pushNotifications: boolean | null
    language: string | null
    notificationInterval: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserSettingsCountAggregateOutputType = {
    id: number
    userId: number
    darkMode: number
    emailNotifications: number
    pushNotifications: number
    language: number
    notificationInterval: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserSettingsAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserSettingsSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserSettingsMinAggregateInputType = {
    id?: true
    userId?: true
    darkMode?: true
    emailNotifications?: true
    pushNotifications?: true
    language?: true
    notificationInterval?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserSettingsMaxAggregateInputType = {
    id?: true
    userId?: true
    darkMode?: true
    emailNotifications?: true
    pushNotifications?: true
    language?: true
    notificationInterval?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserSettingsCountAggregateInputType = {
    id?: true
    userId?: true
    darkMode?: true
    emailNotifications?: true
    pushNotifications?: true
    language?: true
    notificationInterval?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserSettingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSettings to aggregate.
     */
    where?: UserSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSettings to fetch.
     */
    orderBy?: UserSettingsOrderByWithRelationInput | UserSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserSettings
    **/
    _count?: true | UserSettingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserSettingsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSettingsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserSettingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserSettingsMaxAggregateInputType
  }

  export type GetUserSettingsAggregateType<T extends UserSettingsAggregateArgs> = {
        [P in keyof T & keyof AggregateUserSettings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserSettings[P]>
      : GetScalarType<T[P], AggregateUserSettings[P]>
  }




  export type UserSettingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSettingsWhereInput
    orderBy?: UserSettingsOrderByWithAggregationInput | UserSettingsOrderByWithAggregationInput[]
    by: UserSettingsScalarFieldEnum[] | UserSettingsScalarFieldEnum
    having?: UserSettingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserSettingsCountAggregateInputType | true
    _avg?: UserSettingsAvgAggregateInputType
    _sum?: UserSettingsSumAggregateInputType
    _min?: UserSettingsMinAggregateInputType
    _max?: UserSettingsMaxAggregateInputType
  }

  export type UserSettingsGroupByOutputType = {
    id: number
    userId: number
    darkMode: boolean
    emailNotifications: boolean
    pushNotifications: boolean
    language: string
    notificationInterval: string
    createdAt: Date
    updatedAt: Date
    _count: UserSettingsCountAggregateOutputType | null
    _avg: UserSettingsAvgAggregateOutputType | null
    _sum: UserSettingsSumAggregateOutputType | null
    _min: UserSettingsMinAggregateOutputType | null
    _max: UserSettingsMaxAggregateOutputType | null
  }

  type GetUserSettingsGroupByPayload<T extends UserSettingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserSettingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserSettingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserSettingsGroupByOutputType[P]>
            : GetScalarType<T[P], UserSettingsGroupByOutputType[P]>
        }
      >
    >


  export type UserSettingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    darkMode?: boolean
    emailNotifications?: boolean
    pushNotifications?: boolean
    language?: boolean
    notificationInterval?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSettings"]>

  export type UserSettingsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    darkMode?: boolean
    emailNotifications?: boolean
    pushNotifications?: boolean
    language?: boolean
    notificationInterval?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSettings"]>

  export type UserSettingsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    darkMode?: boolean
    emailNotifications?: boolean
    pushNotifications?: boolean
    language?: boolean
    notificationInterval?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSettings"]>

  export type UserSettingsSelectScalar = {
    id?: boolean
    userId?: boolean
    darkMode?: boolean
    emailNotifications?: boolean
    pushNotifications?: boolean
    language?: boolean
    notificationInterval?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserSettingsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "darkMode" | "emailNotifications" | "pushNotifications" | "language" | "notificationInterval" | "createdAt" | "updatedAt", ExtArgs["result"]["userSettings"]>
  export type UserSettingsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserSettingsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserSettingsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserSettingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserSettings"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      darkMode: boolean
      emailNotifications: boolean
      pushNotifications: boolean
      language: string
      notificationInterval: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userSettings"]>
    composites: {}
  }

  type UserSettingsGetPayload<S extends boolean | null | undefined | UserSettingsDefaultArgs> = $Result.GetResult<Prisma.$UserSettingsPayload, S>

  type UserSettingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserSettingsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserSettingsCountAggregateInputType | true
    }

  export interface UserSettingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserSettings'], meta: { name: 'UserSettings' } }
    /**
     * Find zero or one UserSettings that matches the filter.
     * @param {UserSettingsFindUniqueArgs} args - Arguments to find a UserSettings
     * @example
     * // Get one UserSettings
     * const userSettings = await prisma.userSettings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserSettingsFindUniqueArgs>(args: SelectSubset<T, UserSettingsFindUniqueArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserSettings that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserSettingsFindUniqueOrThrowArgs} args - Arguments to find a UserSettings
     * @example
     * // Get one UserSettings
     * const userSettings = await prisma.userSettings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserSettingsFindUniqueOrThrowArgs>(args: SelectSubset<T, UserSettingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsFindFirstArgs} args - Arguments to find a UserSettings
     * @example
     * // Get one UserSettings
     * const userSettings = await prisma.userSettings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserSettingsFindFirstArgs>(args?: SelectSubset<T, UserSettingsFindFirstArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserSettings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsFindFirstOrThrowArgs} args - Arguments to find a UserSettings
     * @example
     * // Get one UserSettings
     * const userSettings = await prisma.userSettings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserSettingsFindFirstOrThrowArgs>(args?: SelectSubset<T, UserSettingsFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserSettings
     * const userSettings = await prisma.userSettings.findMany()
     * 
     * // Get first 10 UserSettings
     * const userSettings = await prisma.userSettings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userSettingsWithIdOnly = await prisma.userSettings.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserSettingsFindManyArgs>(args?: SelectSubset<T, UserSettingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserSettings.
     * @param {UserSettingsCreateArgs} args - Arguments to create a UserSettings.
     * @example
     * // Create one UserSettings
     * const UserSettings = await prisma.userSettings.create({
     *   data: {
     *     // ... data to create a UserSettings
     *   }
     * })
     * 
     */
    create<T extends UserSettingsCreateArgs>(args: SelectSubset<T, UserSettingsCreateArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserSettings.
     * @param {UserSettingsCreateManyArgs} args - Arguments to create many UserSettings.
     * @example
     * // Create many UserSettings
     * const userSettings = await prisma.userSettings.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserSettingsCreateManyArgs>(args?: SelectSubset<T, UserSettingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserSettings and returns the data saved in the database.
     * @param {UserSettingsCreateManyAndReturnArgs} args - Arguments to create many UserSettings.
     * @example
     * // Create many UserSettings
     * const userSettings = await prisma.userSettings.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserSettings and only return the `id`
     * const userSettingsWithIdOnly = await prisma.userSettings.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserSettingsCreateManyAndReturnArgs>(args?: SelectSubset<T, UserSettingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserSettings.
     * @param {UserSettingsDeleteArgs} args - Arguments to delete one UserSettings.
     * @example
     * // Delete one UserSettings
     * const UserSettings = await prisma.userSettings.delete({
     *   where: {
     *     // ... filter to delete one UserSettings
     *   }
     * })
     * 
     */
    delete<T extends UserSettingsDeleteArgs>(args: SelectSubset<T, UserSettingsDeleteArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserSettings.
     * @param {UserSettingsUpdateArgs} args - Arguments to update one UserSettings.
     * @example
     * // Update one UserSettings
     * const userSettings = await prisma.userSettings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserSettingsUpdateArgs>(args: SelectSubset<T, UserSettingsUpdateArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserSettings.
     * @param {UserSettingsDeleteManyArgs} args - Arguments to filter UserSettings to delete.
     * @example
     * // Delete a few UserSettings
     * const { count } = await prisma.userSettings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserSettingsDeleteManyArgs>(args?: SelectSubset<T, UserSettingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserSettings
     * const userSettings = await prisma.userSettings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserSettingsUpdateManyArgs>(args: SelectSubset<T, UserSettingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSettings and returns the data updated in the database.
     * @param {UserSettingsUpdateManyAndReturnArgs} args - Arguments to update many UserSettings.
     * @example
     * // Update many UserSettings
     * const userSettings = await prisma.userSettings.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserSettings and only return the `id`
     * const userSettingsWithIdOnly = await prisma.userSettings.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserSettingsUpdateManyAndReturnArgs>(args: SelectSubset<T, UserSettingsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserSettings.
     * @param {UserSettingsUpsertArgs} args - Arguments to update or create a UserSettings.
     * @example
     * // Update or create a UserSettings
     * const userSettings = await prisma.userSettings.upsert({
     *   create: {
     *     // ... data to create a UserSettings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserSettings we want to update
     *   }
     * })
     */
    upsert<T extends UserSettingsUpsertArgs>(args: SelectSubset<T, UserSettingsUpsertArgs<ExtArgs>>): Prisma__UserSettingsClient<$Result.GetResult<Prisma.$UserSettingsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsCountArgs} args - Arguments to filter UserSettings to count.
     * @example
     * // Count the number of UserSettings
     * const count = await prisma.userSettings.count({
     *   where: {
     *     // ... the filter for the UserSettings we want to count
     *   }
     * })
    **/
    count<T extends UserSettingsCountArgs>(
      args?: Subset<T, UserSettingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserSettingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserSettingsAggregateArgs>(args: Subset<T, UserSettingsAggregateArgs>): Prisma.PrismaPromise<GetUserSettingsAggregateType<T>>

    /**
     * Group by UserSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserSettingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserSettingsGroupByArgs['orderBy'] }
        : { orderBy?: UserSettingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserSettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserSettings model
   */
  readonly fields: UserSettingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserSettings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserSettingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserSettings model
   */
  interface UserSettingsFieldRefs {
    readonly id: FieldRef<"UserSettings", 'Int'>
    readonly userId: FieldRef<"UserSettings", 'Int'>
    readonly darkMode: FieldRef<"UserSettings", 'Boolean'>
    readonly emailNotifications: FieldRef<"UserSettings", 'Boolean'>
    readonly pushNotifications: FieldRef<"UserSettings", 'Boolean'>
    readonly language: FieldRef<"UserSettings", 'String'>
    readonly notificationInterval: FieldRef<"UserSettings", 'String'>
    readonly createdAt: FieldRef<"UserSettings", 'DateTime'>
    readonly updatedAt: FieldRef<"UserSettings", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserSettings findUnique
   */
  export type UserSettingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * Filter, which UserSettings to fetch.
     */
    where: UserSettingsWhereUniqueInput
  }

  /**
   * UserSettings findUniqueOrThrow
   */
  export type UserSettingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * Filter, which UserSettings to fetch.
     */
    where: UserSettingsWhereUniqueInput
  }

  /**
   * UserSettings findFirst
   */
  export type UserSettingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * Filter, which UserSettings to fetch.
     */
    where?: UserSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSettings to fetch.
     */
    orderBy?: UserSettingsOrderByWithRelationInput | UserSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSettings.
     */
    cursor?: UserSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSettings.
     */
    distinct?: UserSettingsScalarFieldEnum | UserSettingsScalarFieldEnum[]
  }

  /**
   * UserSettings findFirstOrThrow
   */
  export type UserSettingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * Filter, which UserSettings to fetch.
     */
    where?: UserSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSettings to fetch.
     */
    orderBy?: UserSettingsOrderByWithRelationInput | UserSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSettings.
     */
    cursor?: UserSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSettings.
     */
    distinct?: UserSettingsScalarFieldEnum | UserSettingsScalarFieldEnum[]
  }

  /**
   * UserSettings findMany
   */
  export type UserSettingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * Filter, which UserSettings to fetch.
     */
    where?: UserSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSettings to fetch.
     */
    orderBy?: UserSettingsOrderByWithRelationInput | UserSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserSettings.
     */
    cursor?: UserSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSettings.
     */
    skip?: number
    distinct?: UserSettingsScalarFieldEnum | UserSettingsScalarFieldEnum[]
  }

  /**
   * UserSettings create
   */
  export type UserSettingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * The data needed to create a UserSettings.
     */
    data: XOR<UserSettingsCreateInput, UserSettingsUncheckedCreateInput>
  }

  /**
   * UserSettings createMany
   */
  export type UserSettingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserSettings.
     */
    data: UserSettingsCreateManyInput | UserSettingsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserSettings createManyAndReturn
   */
  export type UserSettingsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * The data used to create many UserSettings.
     */
    data: UserSettingsCreateManyInput | UserSettingsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserSettings update
   */
  export type UserSettingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * The data needed to update a UserSettings.
     */
    data: XOR<UserSettingsUpdateInput, UserSettingsUncheckedUpdateInput>
    /**
     * Choose, which UserSettings to update.
     */
    where: UserSettingsWhereUniqueInput
  }

  /**
   * UserSettings updateMany
   */
  export type UserSettingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserSettings.
     */
    data: XOR<UserSettingsUpdateManyMutationInput, UserSettingsUncheckedUpdateManyInput>
    /**
     * Filter which UserSettings to update
     */
    where?: UserSettingsWhereInput
    /**
     * Limit how many UserSettings to update.
     */
    limit?: number
  }

  /**
   * UserSettings updateManyAndReturn
   */
  export type UserSettingsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * The data used to update UserSettings.
     */
    data: XOR<UserSettingsUpdateManyMutationInput, UserSettingsUncheckedUpdateManyInput>
    /**
     * Filter which UserSettings to update
     */
    where?: UserSettingsWhereInput
    /**
     * Limit how many UserSettings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserSettings upsert
   */
  export type UserSettingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * The filter to search for the UserSettings to update in case it exists.
     */
    where: UserSettingsWhereUniqueInput
    /**
     * In case the UserSettings found by the `where` argument doesn't exist, create a new UserSettings with this data.
     */
    create: XOR<UserSettingsCreateInput, UserSettingsUncheckedCreateInput>
    /**
     * In case the UserSettings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserSettingsUpdateInput, UserSettingsUncheckedUpdateInput>
  }

  /**
   * UserSettings delete
   */
  export type UserSettingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
    /**
     * Filter which UserSettings to delete.
     */
    where: UserSettingsWhereUniqueInput
  }

  /**
   * UserSettings deleteMany
   */
  export type UserSettingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSettings to delete
     */
    where?: UserSettingsWhereInput
    /**
     * Limit how many UserSettings to delete.
     */
    limit?: number
  }

  /**
   * UserSettings without action
   */
  export type UserSettingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSettings
     */
    select?: UserSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSettings
     */
    omit?: UserSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingsInclude<ExtArgs> | null
  }


  /**
   * Model UserActivity
   */

  export type AggregateUserActivity = {
    _count: UserActivityCountAggregateOutputType | null
    _avg: UserActivityAvgAggregateOutputType | null
    _sum: UserActivitySumAggregateOutputType | null
    _min: UserActivityMinAggregateOutputType | null
    _max: UserActivityMaxAggregateOutputType | null
  }

  export type UserActivityAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserActivitySumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserActivityMinAggregateOutputType = {
    id: number | null
    userId: number | null
    timestamp: Date | null
    activity: string | null
    details: string | null
    ipAddress: string | null
  }

  export type UserActivityMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    timestamp: Date | null
    activity: string | null
    details: string | null
    ipAddress: string | null
  }

  export type UserActivityCountAggregateOutputType = {
    id: number
    userId: number
    timestamp: number
    activity: number
    details: number
    ipAddress: number
    _all: number
  }


  export type UserActivityAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserActivitySumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserActivityMinAggregateInputType = {
    id?: true
    userId?: true
    timestamp?: true
    activity?: true
    details?: true
    ipAddress?: true
  }

  export type UserActivityMaxAggregateInputType = {
    id?: true
    userId?: true
    timestamp?: true
    activity?: true
    details?: true
    ipAddress?: true
  }

  export type UserActivityCountAggregateInputType = {
    id?: true
    userId?: true
    timestamp?: true
    activity?: true
    details?: true
    ipAddress?: true
    _all?: true
  }

  export type UserActivityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserActivity to aggregate.
     */
    where?: UserActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserActivities to fetch.
     */
    orderBy?: UserActivityOrderByWithRelationInput | UserActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserActivities
    **/
    _count?: true | UserActivityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserActivityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserActivitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserActivityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserActivityMaxAggregateInputType
  }

  export type GetUserActivityAggregateType<T extends UserActivityAggregateArgs> = {
        [P in keyof T & keyof AggregateUserActivity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserActivity[P]>
      : GetScalarType<T[P], AggregateUserActivity[P]>
  }




  export type UserActivityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserActivityWhereInput
    orderBy?: UserActivityOrderByWithAggregationInput | UserActivityOrderByWithAggregationInput[]
    by: UserActivityScalarFieldEnum[] | UserActivityScalarFieldEnum
    having?: UserActivityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserActivityCountAggregateInputType | true
    _avg?: UserActivityAvgAggregateInputType
    _sum?: UserActivitySumAggregateInputType
    _min?: UserActivityMinAggregateInputType
    _max?: UserActivityMaxAggregateInputType
  }

  export type UserActivityGroupByOutputType = {
    id: number
    userId: number
    timestamp: Date | null
    activity: string
    details: string | null
    ipAddress: string | null
    _count: UserActivityCountAggregateOutputType | null
    _avg: UserActivityAvgAggregateOutputType | null
    _sum: UserActivitySumAggregateOutputType | null
    _min: UserActivityMinAggregateOutputType | null
    _max: UserActivityMaxAggregateOutputType | null
  }

  type GetUserActivityGroupByPayload<T extends UserActivityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserActivityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserActivityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserActivityGroupByOutputType[P]>
            : GetScalarType<T[P], UserActivityGroupByOutputType[P]>
        }
      >
    >


  export type UserActivitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    timestamp?: boolean
    activity?: boolean
    details?: boolean
    ipAddress?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userActivity"]>

  export type UserActivitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    timestamp?: boolean
    activity?: boolean
    details?: boolean
    ipAddress?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userActivity"]>

  export type UserActivitySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    timestamp?: boolean
    activity?: boolean
    details?: boolean
    ipAddress?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userActivity"]>

  export type UserActivitySelectScalar = {
    id?: boolean
    userId?: boolean
    timestamp?: boolean
    activity?: boolean
    details?: boolean
    ipAddress?: boolean
  }

  export type UserActivityOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "timestamp" | "activity" | "details" | "ipAddress", ExtArgs["result"]["userActivity"]>
  export type UserActivityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserActivityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserActivityIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserActivityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserActivity"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      timestamp: Date | null
      activity: string
      details: string | null
      ipAddress: string | null
    }, ExtArgs["result"]["userActivity"]>
    composites: {}
  }

  type UserActivityGetPayload<S extends boolean | null | undefined | UserActivityDefaultArgs> = $Result.GetResult<Prisma.$UserActivityPayload, S>

  type UserActivityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserActivityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserActivityCountAggregateInputType | true
    }

  export interface UserActivityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserActivity'], meta: { name: 'UserActivity' } }
    /**
     * Find zero or one UserActivity that matches the filter.
     * @param {UserActivityFindUniqueArgs} args - Arguments to find a UserActivity
     * @example
     * // Get one UserActivity
     * const userActivity = await prisma.userActivity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserActivityFindUniqueArgs>(args: SelectSubset<T, UserActivityFindUniqueArgs<ExtArgs>>): Prisma__UserActivityClient<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserActivity that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserActivityFindUniqueOrThrowArgs} args - Arguments to find a UserActivity
     * @example
     * // Get one UserActivity
     * const userActivity = await prisma.userActivity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserActivityFindUniqueOrThrowArgs>(args: SelectSubset<T, UserActivityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserActivityClient<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserActivity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActivityFindFirstArgs} args - Arguments to find a UserActivity
     * @example
     * // Get one UserActivity
     * const userActivity = await prisma.userActivity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserActivityFindFirstArgs>(args?: SelectSubset<T, UserActivityFindFirstArgs<ExtArgs>>): Prisma__UserActivityClient<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserActivity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActivityFindFirstOrThrowArgs} args - Arguments to find a UserActivity
     * @example
     * // Get one UserActivity
     * const userActivity = await prisma.userActivity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserActivityFindFirstOrThrowArgs>(args?: SelectSubset<T, UserActivityFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserActivityClient<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserActivities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActivityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserActivities
     * const userActivities = await prisma.userActivity.findMany()
     * 
     * // Get first 10 UserActivities
     * const userActivities = await prisma.userActivity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userActivityWithIdOnly = await prisma.userActivity.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserActivityFindManyArgs>(args?: SelectSubset<T, UserActivityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserActivity.
     * @param {UserActivityCreateArgs} args - Arguments to create a UserActivity.
     * @example
     * // Create one UserActivity
     * const UserActivity = await prisma.userActivity.create({
     *   data: {
     *     // ... data to create a UserActivity
     *   }
     * })
     * 
     */
    create<T extends UserActivityCreateArgs>(args: SelectSubset<T, UserActivityCreateArgs<ExtArgs>>): Prisma__UserActivityClient<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserActivities.
     * @param {UserActivityCreateManyArgs} args - Arguments to create many UserActivities.
     * @example
     * // Create many UserActivities
     * const userActivity = await prisma.userActivity.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserActivityCreateManyArgs>(args?: SelectSubset<T, UserActivityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserActivities and returns the data saved in the database.
     * @param {UserActivityCreateManyAndReturnArgs} args - Arguments to create many UserActivities.
     * @example
     * // Create many UserActivities
     * const userActivity = await prisma.userActivity.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserActivities and only return the `id`
     * const userActivityWithIdOnly = await prisma.userActivity.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserActivityCreateManyAndReturnArgs>(args?: SelectSubset<T, UserActivityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserActivity.
     * @param {UserActivityDeleteArgs} args - Arguments to delete one UserActivity.
     * @example
     * // Delete one UserActivity
     * const UserActivity = await prisma.userActivity.delete({
     *   where: {
     *     // ... filter to delete one UserActivity
     *   }
     * })
     * 
     */
    delete<T extends UserActivityDeleteArgs>(args: SelectSubset<T, UserActivityDeleteArgs<ExtArgs>>): Prisma__UserActivityClient<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserActivity.
     * @param {UserActivityUpdateArgs} args - Arguments to update one UserActivity.
     * @example
     * // Update one UserActivity
     * const userActivity = await prisma.userActivity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserActivityUpdateArgs>(args: SelectSubset<T, UserActivityUpdateArgs<ExtArgs>>): Prisma__UserActivityClient<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserActivities.
     * @param {UserActivityDeleteManyArgs} args - Arguments to filter UserActivities to delete.
     * @example
     * // Delete a few UserActivities
     * const { count } = await prisma.userActivity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserActivityDeleteManyArgs>(args?: SelectSubset<T, UserActivityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserActivities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActivityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserActivities
     * const userActivity = await prisma.userActivity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserActivityUpdateManyArgs>(args: SelectSubset<T, UserActivityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserActivities and returns the data updated in the database.
     * @param {UserActivityUpdateManyAndReturnArgs} args - Arguments to update many UserActivities.
     * @example
     * // Update many UserActivities
     * const userActivity = await prisma.userActivity.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserActivities and only return the `id`
     * const userActivityWithIdOnly = await prisma.userActivity.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserActivityUpdateManyAndReturnArgs>(args: SelectSubset<T, UserActivityUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserActivity.
     * @param {UserActivityUpsertArgs} args - Arguments to update or create a UserActivity.
     * @example
     * // Update or create a UserActivity
     * const userActivity = await prisma.userActivity.upsert({
     *   create: {
     *     // ... data to create a UserActivity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserActivity we want to update
     *   }
     * })
     */
    upsert<T extends UserActivityUpsertArgs>(args: SelectSubset<T, UserActivityUpsertArgs<ExtArgs>>): Prisma__UserActivityClient<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserActivities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActivityCountArgs} args - Arguments to filter UserActivities to count.
     * @example
     * // Count the number of UserActivities
     * const count = await prisma.userActivity.count({
     *   where: {
     *     // ... the filter for the UserActivities we want to count
     *   }
     * })
    **/
    count<T extends UserActivityCountArgs>(
      args?: Subset<T, UserActivityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserActivityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserActivity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActivityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserActivityAggregateArgs>(args: Subset<T, UserActivityAggregateArgs>): Prisma.PrismaPromise<GetUserActivityAggregateType<T>>

    /**
     * Group by UserActivity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActivityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserActivityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserActivityGroupByArgs['orderBy'] }
        : { orderBy?: UserActivityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserActivityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserActivityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserActivity model
   */
  readonly fields: UserActivityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserActivity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserActivityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserActivity model
   */
  interface UserActivityFieldRefs {
    readonly id: FieldRef<"UserActivity", 'Int'>
    readonly userId: FieldRef<"UserActivity", 'Int'>
    readonly timestamp: FieldRef<"UserActivity", 'DateTime'>
    readonly activity: FieldRef<"UserActivity", 'String'>
    readonly details: FieldRef<"UserActivity", 'String'>
    readonly ipAddress: FieldRef<"UserActivity", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserActivity findUnique
   */
  export type UserActivityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserActivity
     */
    omit?: UserActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * Filter, which UserActivity to fetch.
     */
    where: UserActivityWhereUniqueInput
  }

  /**
   * UserActivity findUniqueOrThrow
   */
  export type UserActivityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserActivity
     */
    omit?: UserActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * Filter, which UserActivity to fetch.
     */
    where: UserActivityWhereUniqueInput
  }

  /**
   * UserActivity findFirst
   */
  export type UserActivityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserActivity
     */
    omit?: UserActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * Filter, which UserActivity to fetch.
     */
    where?: UserActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserActivities to fetch.
     */
    orderBy?: UserActivityOrderByWithRelationInput | UserActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserActivities.
     */
    cursor?: UserActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserActivities.
     */
    distinct?: UserActivityScalarFieldEnum | UserActivityScalarFieldEnum[]
  }

  /**
   * UserActivity findFirstOrThrow
   */
  export type UserActivityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserActivity
     */
    omit?: UserActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * Filter, which UserActivity to fetch.
     */
    where?: UserActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserActivities to fetch.
     */
    orderBy?: UserActivityOrderByWithRelationInput | UserActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserActivities.
     */
    cursor?: UserActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserActivities.
     */
    distinct?: UserActivityScalarFieldEnum | UserActivityScalarFieldEnum[]
  }

  /**
   * UserActivity findMany
   */
  export type UserActivityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserActivity
     */
    omit?: UserActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * Filter, which UserActivities to fetch.
     */
    where?: UserActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserActivities to fetch.
     */
    orderBy?: UserActivityOrderByWithRelationInput | UserActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserActivities.
     */
    cursor?: UserActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserActivities.
     */
    skip?: number
    distinct?: UserActivityScalarFieldEnum | UserActivityScalarFieldEnum[]
  }

  /**
   * UserActivity create
   */
  export type UserActivityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserActivity
     */
    omit?: UserActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * The data needed to create a UserActivity.
     */
    data: XOR<UserActivityCreateInput, UserActivityUncheckedCreateInput>
  }

  /**
   * UserActivity createMany
   */
  export type UserActivityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserActivities.
     */
    data: UserActivityCreateManyInput | UserActivityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserActivity createManyAndReturn
   */
  export type UserActivityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserActivity
     */
    omit?: UserActivityOmit<ExtArgs> | null
    /**
     * The data used to create many UserActivities.
     */
    data: UserActivityCreateManyInput | UserActivityCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserActivity update
   */
  export type UserActivityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserActivity
     */
    omit?: UserActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * The data needed to update a UserActivity.
     */
    data: XOR<UserActivityUpdateInput, UserActivityUncheckedUpdateInput>
    /**
     * Choose, which UserActivity to update.
     */
    where: UserActivityWhereUniqueInput
  }

  /**
   * UserActivity updateMany
   */
  export type UserActivityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserActivities.
     */
    data: XOR<UserActivityUpdateManyMutationInput, UserActivityUncheckedUpdateManyInput>
    /**
     * Filter which UserActivities to update
     */
    where?: UserActivityWhereInput
    /**
     * Limit how many UserActivities to update.
     */
    limit?: number
  }

  /**
   * UserActivity updateManyAndReturn
   */
  export type UserActivityUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserActivity
     */
    omit?: UserActivityOmit<ExtArgs> | null
    /**
     * The data used to update UserActivities.
     */
    data: XOR<UserActivityUpdateManyMutationInput, UserActivityUncheckedUpdateManyInput>
    /**
     * Filter which UserActivities to update
     */
    where?: UserActivityWhereInput
    /**
     * Limit how many UserActivities to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserActivity upsert
   */
  export type UserActivityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserActivity
     */
    omit?: UserActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * The filter to search for the UserActivity to update in case it exists.
     */
    where: UserActivityWhereUniqueInput
    /**
     * In case the UserActivity found by the `where` argument doesn't exist, create a new UserActivity with this data.
     */
    create: XOR<UserActivityCreateInput, UserActivityUncheckedCreateInput>
    /**
     * In case the UserActivity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserActivityUpdateInput, UserActivityUncheckedUpdateInput>
  }

  /**
   * UserActivity delete
   */
  export type UserActivityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserActivity
     */
    omit?: UserActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * Filter which UserActivity to delete.
     */
    where: UserActivityWhereUniqueInput
  }

  /**
   * UserActivity deleteMany
   */
  export type UserActivityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserActivities to delete
     */
    where?: UserActivityWhereInput
    /**
     * Limit how many UserActivities to delete.
     */
    limit?: number
  }

  /**
   * UserActivity without action
   */
  export type UserActivityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserActivity
     */
    omit?: UserActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
  }


  /**
   * Model UserSession
   */

  export type AggregateUserSession = {
    _count: UserSessionCountAggregateOutputType | null
    _min: UserSessionMinAggregateOutputType | null
    _max: UserSessionMaxAggregateOutputType | null
  }

  export type UserSessionMinAggregateOutputType = {
    sid: string | null
    expire: Date | null
  }

  export type UserSessionMaxAggregateOutputType = {
    sid: string | null
    expire: Date | null
  }

  export type UserSessionCountAggregateOutputType = {
    sid: number
    sess: number
    expire: number
    _all: number
  }


  export type UserSessionMinAggregateInputType = {
    sid?: true
    expire?: true
  }

  export type UserSessionMaxAggregateInputType = {
    sid?: true
    expire?: true
  }

  export type UserSessionCountAggregateInputType = {
    sid?: true
    sess?: true
    expire?: true
    _all?: true
  }

  export type UserSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSession to aggregate.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserSessions
    **/
    _count?: true | UserSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserSessionMaxAggregateInputType
  }

  export type GetUserSessionAggregateType<T extends UserSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateUserSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserSession[P]>
      : GetScalarType<T[P], AggregateUserSession[P]>
  }




  export type UserSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSessionWhereInput
    orderBy?: UserSessionOrderByWithAggregationInput | UserSessionOrderByWithAggregationInput[]
    by: UserSessionScalarFieldEnum[] | UserSessionScalarFieldEnum
    having?: UserSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserSessionCountAggregateInputType | true
    _min?: UserSessionMinAggregateInputType
    _max?: UserSessionMaxAggregateInputType
  }

  export type UserSessionGroupByOutputType = {
    sid: string
    sess: JsonValue
    expire: Date
    _count: UserSessionCountAggregateOutputType | null
    _min: UserSessionMinAggregateOutputType | null
    _max: UserSessionMaxAggregateOutputType | null
  }

  type GetUserSessionGroupByPayload<T extends UserSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserSessionGroupByOutputType[P]>
            : GetScalarType<T[P], UserSessionGroupByOutputType[P]>
        }
      >
    >


  export type UserSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sid?: boolean
    sess?: boolean
    expire?: boolean
  }, ExtArgs["result"]["userSession"]>

  export type UserSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sid?: boolean
    sess?: boolean
    expire?: boolean
  }, ExtArgs["result"]["userSession"]>

  export type UserSessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sid?: boolean
    sess?: boolean
    expire?: boolean
  }, ExtArgs["result"]["userSession"]>

  export type UserSessionSelectScalar = {
    sid?: boolean
    sess?: boolean
    expire?: boolean
  }

  export type UserSessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"sid" | "sess" | "expire", ExtArgs["result"]["userSession"]>

  export type $UserSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserSession"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      sid: string
      sess: Prisma.JsonValue
      expire: Date
    }, ExtArgs["result"]["userSession"]>
    composites: {}
  }

  type UserSessionGetPayload<S extends boolean | null | undefined | UserSessionDefaultArgs> = $Result.GetResult<Prisma.$UserSessionPayload, S>

  type UserSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserSessionCountAggregateInputType | true
    }

  export interface UserSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserSession'], meta: { name: 'UserSession' } }
    /**
     * Find zero or one UserSession that matches the filter.
     * @param {UserSessionFindUniqueArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserSessionFindUniqueArgs>(args: SelectSubset<T, UserSessionFindUniqueArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserSession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserSessionFindUniqueOrThrowArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, UserSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionFindFirstArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserSessionFindFirstArgs>(args?: SelectSubset<T, UserSessionFindFirstArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionFindFirstOrThrowArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, UserSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserSessions
     * const userSessions = await prisma.userSession.findMany()
     * 
     * // Get first 10 UserSessions
     * const userSessions = await prisma.userSession.findMany({ take: 10 })
     * 
     * // Only select the `sid`
     * const userSessionWithSidOnly = await prisma.userSession.findMany({ select: { sid: true } })
     * 
     */
    findMany<T extends UserSessionFindManyArgs>(args?: SelectSubset<T, UserSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserSession.
     * @param {UserSessionCreateArgs} args - Arguments to create a UserSession.
     * @example
     * // Create one UserSession
     * const UserSession = await prisma.userSession.create({
     *   data: {
     *     // ... data to create a UserSession
     *   }
     * })
     * 
     */
    create<T extends UserSessionCreateArgs>(args: SelectSubset<T, UserSessionCreateArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserSessions.
     * @param {UserSessionCreateManyArgs} args - Arguments to create many UserSessions.
     * @example
     * // Create many UserSessions
     * const userSession = await prisma.userSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserSessionCreateManyArgs>(args?: SelectSubset<T, UserSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserSessions and returns the data saved in the database.
     * @param {UserSessionCreateManyAndReturnArgs} args - Arguments to create many UserSessions.
     * @example
     * // Create many UserSessions
     * const userSession = await prisma.userSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserSessions and only return the `sid`
     * const userSessionWithSidOnly = await prisma.userSession.createManyAndReturn({
     *   select: { sid: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, UserSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserSession.
     * @param {UserSessionDeleteArgs} args - Arguments to delete one UserSession.
     * @example
     * // Delete one UserSession
     * const UserSession = await prisma.userSession.delete({
     *   where: {
     *     // ... filter to delete one UserSession
     *   }
     * })
     * 
     */
    delete<T extends UserSessionDeleteArgs>(args: SelectSubset<T, UserSessionDeleteArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserSession.
     * @param {UserSessionUpdateArgs} args - Arguments to update one UserSession.
     * @example
     * // Update one UserSession
     * const userSession = await prisma.userSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserSessionUpdateArgs>(args: SelectSubset<T, UserSessionUpdateArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserSessions.
     * @param {UserSessionDeleteManyArgs} args - Arguments to filter UserSessions to delete.
     * @example
     * // Delete a few UserSessions
     * const { count } = await prisma.userSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserSessionDeleteManyArgs>(args?: SelectSubset<T, UserSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserSessions
     * const userSession = await prisma.userSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserSessionUpdateManyArgs>(args: SelectSubset<T, UserSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSessions and returns the data updated in the database.
     * @param {UserSessionUpdateManyAndReturnArgs} args - Arguments to update many UserSessions.
     * @example
     * // Update many UserSessions
     * const userSession = await prisma.userSession.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserSessions and only return the `sid`
     * const userSessionWithSidOnly = await prisma.userSession.updateManyAndReturn({
     *   select: { sid: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserSessionUpdateManyAndReturnArgs>(args: SelectSubset<T, UserSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserSession.
     * @param {UserSessionUpsertArgs} args - Arguments to update or create a UserSession.
     * @example
     * // Update or create a UserSession
     * const userSession = await prisma.userSession.upsert({
     *   create: {
     *     // ... data to create a UserSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserSession we want to update
     *   }
     * })
     */
    upsert<T extends UserSessionUpsertArgs>(args: SelectSubset<T, UserSessionUpsertArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionCountArgs} args - Arguments to filter UserSessions to count.
     * @example
     * // Count the number of UserSessions
     * const count = await prisma.userSession.count({
     *   where: {
     *     // ... the filter for the UserSessions we want to count
     *   }
     * })
    **/
    count<T extends UserSessionCountArgs>(
      args?: Subset<T, UserSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserSessionAggregateArgs>(args: Subset<T, UserSessionAggregateArgs>): Prisma.PrismaPromise<GetUserSessionAggregateType<T>>

    /**
     * Group by UserSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserSessionGroupByArgs['orderBy'] }
        : { orderBy?: UserSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserSession model
   */
  readonly fields: UserSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserSession model
   */
  interface UserSessionFieldRefs {
    readonly sid: FieldRef<"UserSession", 'String'>
    readonly sess: FieldRef<"UserSession", 'Json'>
    readonly expire: FieldRef<"UserSession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserSession findUnique
   */
  export type UserSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession findUniqueOrThrow
   */
  export type UserSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession findFirst
   */
  export type UserSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSessions.
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSessions.
     */
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * UserSession findFirstOrThrow
   */
  export type UserSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSessions.
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSessions.
     */
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * UserSession findMany
   */
  export type UserSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Filter, which UserSessions to fetch.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserSessions.
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * UserSession create
   */
  export type UserSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * The data needed to create a UserSession.
     */
    data: XOR<UserSessionCreateInput, UserSessionUncheckedCreateInput>
  }

  /**
   * UserSession createMany
   */
  export type UserSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserSessions.
     */
    data: UserSessionCreateManyInput | UserSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserSession createManyAndReturn
   */
  export type UserSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * The data used to create many UserSessions.
     */
    data: UserSessionCreateManyInput | UserSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserSession update
   */
  export type UserSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * The data needed to update a UserSession.
     */
    data: XOR<UserSessionUpdateInput, UserSessionUncheckedUpdateInput>
    /**
     * Choose, which UserSession to update.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession updateMany
   */
  export type UserSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserSessions.
     */
    data: XOR<UserSessionUpdateManyMutationInput, UserSessionUncheckedUpdateManyInput>
    /**
     * Filter which UserSessions to update
     */
    where?: UserSessionWhereInput
    /**
     * Limit how many UserSessions to update.
     */
    limit?: number
  }

  /**
   * UserSession updateManyAndReturn
   */
  export type UserSessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * The data used to update UserSessions.
     */
    data: XOR<UserSessionUpdateManyMutationInput, UserSessionUncheckedUpdateManyInput>
    /**
     * Filter which UserSessions to update
     */
    where?: UserSessionWhereInput
    /**
     * Limit how many UserSessions to update.
     */
    limit?: number
  }

  /**
   * UserSession upsert
   */
  export type UserSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * The filter to search for the UserSession to update in case it exists.
     */
    where: UserSessionWhereUniqueInput
    /**
     * In case the UserSession found by the `where` argument doesn't exist, create a new UserSession with this data.
     */
    create: XOR<UserSessionCreateInput, UserSessionUncheckedCreateInput>
    /**
     * In case the UserSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserSessionUpdateInput, UserSessionUncheckedUpdateInput>
  }

  /**
   * UserSession delete
   */
  export type UserSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Filter which UserSession to delete.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession deleteMany
   */
  export type UserSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSessions to delete
     */
    where?: UserSessionWhereInput
    /**
     * Limit how many UserSessions to delete.
     */
    limit?: number
  }

  /**
   * UserSession without action
   */
  export type UserSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
  }


  /**
   * Model Permission
   */

  export type AggregatePermission = {
    _count: PermissionCountAggregateOutputType | null
    _avg: PermissionAvgAggregateOutputType | null
    _sum: PermissionSumAggregateOutputType | null
    _min: PermissionMinAggregateOutputType | null
    _max: PermissionMaxAggregateOutputType | null
  }

  export type PermissionAvgAggregateOutputType = {
    id: number | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type PermissionSumAggregateOutputType = {
    id: number | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type PermissionMinAggregateOutputType = {
    id: number | null
    code: string | null
    name: string | null
    description: string | null
    category: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type PermissionMaxAggregateOutputType = {
    id: number | null
    code: string | null
    name: string | null
    description: string | null
    category: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type PermissionCountAggregateOutputType = {
    id: number
    code: number
    name: number
    description: number
    category: number
    createdAt: number
    updatedAt: number
    createdBy: number
    updatedBy: number
    _all: number
  }


  export type PermissionAvgAggregateInputType = {
    id?: true
    createdBy?: true
    updatedBy?: true
  }

  export type PermissionSumAggregateInputType = {
    id?: true
    createdBy?: true
    updatedBy?: true
  }

  export type PermissionMinAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    category?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    updatedBy?: true
  }

  export type PermissionMaxAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    category?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    updatedBy?: true
  }

  export type PermissionCountAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    category?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    updatedBy?: true
    _all?: true
  }

  export type PermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Permission to aggregate.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Permissions
    **/
    _count?: true | PermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PermissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PermissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PermissionMaxAggregateInputType
  }

  export type GetPermissionAggregateType<T extends PermissionAggregateArgs> = {
        [P in keyof T & keyof AggregatePermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePermission[P]>
      : GetScalarType<T[P], AggregatePermission[P]>
  }




  export type PermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PermissionWhereInput
    orderBy?: PermissionOrderByWithAggregationInput | PermissionOrderByWithAggregationInput[]
    by: PermissionScalarFieldEnum[] | PermissionScalarFieldEnum
    having?: PermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PermissionCountAggregateInputType | true
    _avg?: PermissionAvgAggregateInputType
    _sum?: PermissionSumAggregateInputType
    _min?: PermissionMinAggregateInputType
    _max?: PermissionMaxAggregateInputType
  }

  export type PermissionGroupByOutputType = {
    id: number
    code: string
    name: string
    description: string
    category: string
    createdAt: Date
    updatedAt: Date
    createdBy: number | null
    updatedBy: number | null
    _count: PermissionCountAggregateOutputType | null
    _avg: PermissionAvgAggregateOutputType | null
    _sum: PermissionSumAggregateOutputType | null
    _min: PermissionMinAggregateOutputType | null
    _max: PermissionMaxAggregateOutputType | null
  }

  type GetPermissionGroupByPayload<T extends PermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PermissionGroupByOutputType[P]>
            : GetScalarType<T[P], PermissionGroupByOutputType[P]>
        }
      >
    >


  export type PermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    updatedBy?: boolean
    users?: boolean | Permission$usersArgs<ExtArgs>
    _count?: boolean | PermissionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["permission"]>

  export type PermissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    updatedBy?: boolean
  }, ExtArgs["result"]["permission"]>

  export type PermissionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    updatedBy?: boolean
  }, ExtArgs["result"]["permission"]>

  export type PermissionSelectScalar = {
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    updatedBy?: boolean
  }

  export type PermissionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "code" | "name" | "description" | "category" | "createdAt" | "updatedAt" | "createdBy" | "updatedBy", ExtArgs["result"]["permission"]>
  export type PermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Permission$usersArgs<ExtArgs>
    _count?: boolean | PermissionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PermissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PermissionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Permission"
    objects: {
      users: Prisma.$UserPermissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      code: string
      name: string
      description: string
      category: string
      createdAt: Date
      updatedAt: Date
      createdBy: number | null
      updatedBy: number | null
    }, ExtArgs["result"]["permission"]>
    composites: {}
  }

  type PermissionGetPayload<S extends boolean | null | undefined | PermissionDefaultArgs> = $Result.GetResult<Prisma.$PermissionPayload, S>

  type PermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PermissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PermissionCountAggregateInputType | true
    }

  export interface PermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Permission'], meta: { name: 'Permission' } }
    /**
     * Find zero or one Permission that matches the filter.
     * @param {PermissionFindUniqueArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PermissionFindUniqueArgs>(args: SelectSubset<T, PermissionFindUniqueArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Permission that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PermissionFindUniqueOrThrowArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PermissionFindUniqueOrThrowArgs>(args: SelectSubset<T, PermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Permission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindFirstArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PermissionFindFirstArgs>(args?: SelectSubset<T, PermissionFindFirstArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Permission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindFirstOrThrowArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PermissionFindFirstOrThrowArgs>(args?: SelectSubset<T, PermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Permissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Permissions
     * const permissions = await prisma.permission.findMany()
     * 
     * // Get first 10 Permissions
     * const permissions = await prisma.permission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const permissionWithIdOnly = await prisma.permission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PermissionFindManyArgs>(args?: SelectSubset<T, PermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Permission.
     * @param {PermissionCreateArgs} args - Arguments to create a Permission.
     * @example
     * // Create one Permission
     * const Permission = await prisma.permission.create({
     *   data: {
     *     // ... data to create a Permission
     *   }
     * })
     * 
     */
    create<T extends PermissionCreateArgs>(args: SelectSubset<T, PermissionCreateArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Permissions.
     * @param {PermissionCreateManyArgs} args - Arguments to create many Permissions.
     * @example
     * // Create many Permissions
     * const permission = await prisma.permission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PermissionCreateManyArgs>(args?: SelectSubset<T, PermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Permissions and returns the data saved in the database.
     * @param {PermissionCreateManyAndReturnArgs} args - Arguments to create many Permissions.
     * @example
     * // Create many Permissions
     * const permission = await prisma.permission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Permissions and only return the `id`
     * const permissionWithIdOnly = await prisma.permission.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PermissionCreateManyAndReturnArgs>(args?: SelectSubset<T, PermissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Permission.
     * @param {PermissionDeleteArgs} args - Arguments to delete one Permission.
     * @example
     * // Delete one Permission
     * const Permission = await prisma.permission.delete({
     *   where: {
     *     // ... filter to delete one Permission
     *   }
     * })
     * 
     */
    delete<T extends PermissionDeleteArgs>(args: SelectSubset<T, PermissionDeleteArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Permission.
     * @param {PermissionUpdateArgs} args - Arguments to update one Permission.
     * @example
     * // Update one Permission
     * const permission = await prisma.permission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PermissionUpdateArgs>(args: SelectSubset<T, PermissionUpdateArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Permissions.
     * @param {PermissionDeleteManyArgs} args - Arguments to filter Permissions to delete.
     * @example
     * // Delete a few Permissions
     * const { count } = await prisma.permission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PermissionDeleteManyArgs>(args?: SelectSubset<T, PermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Permissions
     * const permission = await prisma.permission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PermissionUpdateManyArgs>(args: SelectSubset<T, PermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Permissions and returns the data updated in the database.
     * @param {PermissionUpdateManyAndReturnArgs} args - Arguments to update many Permissions.
     * @example
     * // Update many Permissions
     * const permission = await prisma.permission.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Permissions and only return the `id`
     * const permissionWithIdOnly = await prisma.permission.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PermissionUpdateManyAndReturnArgs>(args: SelectSubset<T, PermissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Permission.
     * @param {PermissionUpsertArgs} args - Arguments to update or create a Permission.
     * @example
     * // Update or create a Permission
     * const permission = await prisma.permission.upsert({
     *   create: {
     *     // ... data to create a Permission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Permission we want to update
     *   }
     * })
     */
    upsert<T extends PermissionUpsertArgs>(args: SelectSubset<T, PermissionUpsertArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionCountArgs} args - Arguments to filter Permissions to count.
     * @example
     * // Count the number of Permissions
     * const count = await prisma.permission.count({
     *   where: {
     *     // ... the filter for the Permissions we want to count
     *   }
     * })
    **/
    count<T extends PermissionCountArgs>(
      args?: Subset<T, PermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Permission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PermissionAggregateArgs>(args: Subset<T, PermissionAggregateArgs>): Prisma.PrismaPromise<GetPermissionAggregateType<T>>

    /**
     * Group by Permission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PermissionGroupByArgs['orderBy'] }
        : { orderBy?: PermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Permission model
   */
  readonly fields: PermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Permission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Permission$usersArgs<ExtArgs> = {}>(args?: Subset<T, Permission$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Permission model
   */
  interface PermissionFieldRefs {
    readonly id: FieldRef<"Permission", 'Int'>
    readonly code: FieldRef<"Permission", 'String'>
    readonly name: FieldRef<"Permission", 'String'>
    readonly description: FieldRef<"Permission", 'String'>
    readonly category: FieldRef<"Permission", 'String'>
    readonly createdAt: FieldRef<"Permission", 'DateTime'>
    readonly updatedAt: FieldRef<"Permission", 'DateTime'>
    readonly createdBy: FieldRef<"Permission", 'Int'>
    readonly updatedBy: FieldRef<"Permission", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Permission findUnique
   */
  export type PermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission findUniqueOrThrow
   */
  export type PermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission findFirst
   */
  export type PermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Permissions.
     */
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission findFirstOrThrow
   */
  export type PermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Permissions.
     */
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission findMany
   */
  export type PermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permissions to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission create
   */
  export type PermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a Permission.
     */
    data: XOR<PermissionCreateInput, PermissionUncheckedCreateInput>
  }

  /**
   * Permission createMany
   */
  export type PermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Permissions.
     */
    data: PermissionCreateManyInput | PermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Permission createManyAndReturn
   */
  export type PermissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * The data used to create many Permissions.
     */
    data: PermissionCreateManyInput | PermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Permission update
   */
  export type PermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a Permission.
     */
    data: XOR<PermissionUpdateInput, PermissionUncheckedUpdateInput>
    /**
     * Choose, which Permission to update.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission updateMany
   */
  export type PermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Permissions.
     */
    data: XOR<PermissionUpdateManyMutationInput, PermissionUncheckedUpdateManyInput>
    /**
     * Filter which Permissions to update
     */
    where?: PermissionWhereInput
    /**
     * Limit how many Permissions to update.
     */
    limit?: number
  }

  /**
   * Permission updateManyAndReturn
   */
  export type PermissionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * The data used to update Permissions.
     */
    data: XOR<PermissionUpdateManyMutationInput, PermissionUncheckedUpdateManyInput>
    /**
     * Filter which Permissions to update
     */
    where?: PermissionWhereInput
    /**
     * Limit how many Permissions to update.
     */
    limit?: number
  }

  /**
   * Permission upsert
   */
  export type PermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the Permission to update in case it exists.
     */
    where: PermissionWhereUniqueInput
    /**
     * In case the Permission found by the `where` argument doesn't exist, create a new Permission with this data.
     */
    create: XOR<PermissionCreateInput, PermissionUncheckedCreateInput>
    /**
     * In case the Permission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PermissionUpdateInput, PermissionUncheckedUpdateInput>
  }

  /**
   * Permission delete
   */
  export type PermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter which Permission to delete.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission deleteMany
   */
  export type PermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Permissions to delete
     */
    where?: PermissionWhereInput
    /**
     * Limit how many Permissions to delete.
     */
    limit?: number
  }

  /**
   * Permission.users
   */
  export type Permission$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    where?: UserPermissionWhereInput
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    cursor?: UserPermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }

  /**
   * Permission without action
   */
  export type PermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
  }


  /**
   * Model UserPermission
   */

  export type AggregateUserPermission = {
    _count: UserPermissionCountAggregateOutputType | null
    _avg: UserPermissionAvgAggregateOutputType | null
    _sum: UserPermissionSumAggregateOutputType | null
    _min: UserPermissionMinAggregateOutputType | null
    _max: UserPermissionMaxAggregateOutputType | null
  }

  export type UserPermissionAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    permissionId: number | null
    grantedBy: number | null
  }

  export type UserPermissionSumAggregateOutputType = {
    id: number | null
    userId: number | null
    permissionId: number | null
    grantedBy: number | null
  }

  export type UserPermissionMinAggregateOutputType = {
    id: number | null
    userId: number | null
    permissionId: number | null
    grantedAt: Date | null
    grantedBy: number | null
  }

  export type UserPermissionMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    permissionId: number | null
    grantedAt: Date | null
    grantedBy: number | null
  }

  export type UserPermissionCountAggregateOutputType = {
    id: number
    userId: number
    permissionId: number
    grantedAt: number
    grantedBy: number
    _all: number
  }


  export type UserPermissionAvgAggregateInputType = {
    id?: true
    userId?: true
    permissionId?: true
    grantedBy?: true
  }

  export type UserPermissionSumAggregateInputType = {
    id?: true
    userId?: true
    permissionId?: true
    grantedBy?: true
  }

  export type UserPermissionMinAggregateInputType = {
    id?: true
    userId?: true
    permissionId?: true
    grantedAt?: true
    grantedBy?: true
  }

  export type UserPermissionMaxAggregateInputType = {
    id?: true
    userId?: true
    permissionId?: true
    grantedAt?: true
    grantedBy?: true
  }

  export type UserPermissionCountAggregateInputType = {
    id?: true
    userId?: true
    permissionId?: true
    grantedAt?: true
    grantedBy?: true
    _all?: true
  }

  export type UserPermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPermission to aggregate.
     */
    where?: UserPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPermissions to fetch.
     */
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserPermissions
    **/
    _count?: true | UserPermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserPermissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserPermissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserPermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserPermissionMaxAggregateInputType
  }

  export type GetUserPermissionAggregateType<T extends UserPermissionAggregateArgs> = {
        [P in keyof T & keyof AggregateUserPermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserPermission[P]>
      : GetScalarType<T[P], AggregateUserPermission[P]>
  }




  export type UserPermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPermissionWhereInput
    orderBy?: UserPermissionOrderByWithAggregationInput | UserPermissionOrderByWithAggregationInput[]
    by: UserPermissionScalarFieldEnum[] | UserPermissionScalarFieldEnum
    having?: UserPermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserPermissionCountAggregateInputType | true
    _avg?: UserPermissionAvgAggregateInputType
    _sum?: UserPermissionSumAggregateInputType
    _min?: UserPermissionMinAggregateInputType
    _max?: UserPermissionMaxAggregateInputType
  }

  export type UserPermissionGroupByOutputType = {
    id: number
    userId: number
    permissionId: number
    grantedAt: Date
    grantedBy: number | null
    _count: UserPermissionCountAggregateOutputType | null
    _avg: UserPermissionAvgAggregateOutputType | null
    _sum: UserPermissionSumAggregateOutputType | null
    _min: UserPermissionMinAggregateOutputType | null
    _max: UserPermissionMaxAggregateOutputType | null
  }

  type GetUserPermissionGroupByPayload<T extends UserPermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserPermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserPermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserPermissionGroupByOutputType[P]>
            : GetScalarType<T[P], UserPermissionGroupByOutputType[P]>
        }
      >
    >


  export type UserPermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    permissionId?: boolean
    grantedAt?: boolean
    grantedBy?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPermission"]>

  export type UserPermissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    permissionId?: boolean
    grantedAt?: boolean
    grantedBy?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPermission"]>

  export type UserPermissionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    permissionId?: boolean
    grantedAt?: boolean
    grantedBy?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPermission"]>

  export type UserPermissionSelectScalar = {
    id?: boolean
    userId?: boolean
    permissionId?: boolean
    grantedAt?: boolean
    grantedBy?: boolean
  }

  export type UserPermissionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "permissionId" | "grantedAt" | "grantedBy", ExtArgs["result"]["userPermission"]>
  export type UserPermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }
  export type UserPermissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }
  export type UserPermissionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }

  export type $UserPermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserPermission"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      permission: Prisma.$PermissionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      permissionId: number
      grantedAt: Date
      grantedBy: number | null
    }, ExtArgs["result"]["userPermission"]>
    composites: {}
  }

  type UserPermissionGetPayload<S extends boolean | null | undefined | UserPermissionDefaultArgs> = $Result.GetResult<Prisma.$UserPermissionPayload, S>

  type UserPermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserPermissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserPermissionCountAggregateInputType | true
    }

  export interface UserPermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserPermission'], meta: { name: 'UserPermission' } }
    /**
     * Find zero or one UserPermission that matches the filter.
     * @param {UserPermissionFindUniqueArgs} args - Arguments to find a UserPermission
     * @example
     * // Get one UserPermission
     * const userPermission = await prisma.userPermission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserPermissionFindUniqueArgs>(args: SelectSubset<T, UserPermissionFindUniqueArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserPermission that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserPermissionFindUniqueOrThrowArgs} args - Arguments to find a UserPermission
     * @example
     * // Get one UserPermission
     * const userPermission = await prisma.userPermission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserPermissionFindUniqueOrThrowArgs>(args: SelectSubset<T, UserPermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserPermission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionFindFirstArgs} args - Arguments to find a UserPermission
     * @example
     * // Get one UserPermission
     * const userPermission = await prisma.userPermission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserPermissionFindFirstArgs>(args?: SelectSubset<T, UserPermissionFindFirstArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserPermission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionFindFirstOrThrowArgs} args - Arguments to find a UserPermission
     * @example
     * // Get one UserPermission
     * const userPermission = await prisma.userPermission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserPermissionFindFirstOrThrowArgs>(args?: SelectSubset<T, UserPermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserPermissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserPermissions
     * const userPermissions = await prisma.userPermission.findMany()
     * 
     * // Get first 10 UserPermissions
     * const userPermissions = await prisma.userPermission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userPermissionWithIdOnly = await prisma.userPermission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserPermissionFindManyArgs>(args?: SelectSubset<T, UserPermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserPermission.
     * @param {UserPermissionCreateArgs} args - Arguments to create a UserPermission.
     * @example
     * // Create one UserPermission
     * const UserPermission = await prisma.userPermission.create({
     *   data: {
     *     // ... data to create a UserPermission
     *   }
     * })
     * 
     */
    create<T extends UserPermissionCreateArgs>(args: SelectSubset<T, UserPermissionCreateArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserPermissions.
     * @param {UserPermissionCreateManyArgs} args - Arguments to create many UserPermissions.
     * @example
     * // Create many UserPermissions
     * const userPermission = await prisma.userPermission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserPermissionCreateManyArgs>(args?: SelectSubset<T, UserPermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserPermissions and returns the data saved in the database.
     * @param {UserPermissionCreateManyAndReturnArgs} args - Arguments to create many UserPermissions.
     * @example
     * // Create many UserPermissions
     * const userPermission = await prisma.userPermission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserPermissions and only return the `id`
     * const userPermissionWithIdOnly = await prisma.userPermission.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserPermissionCreateManyAndReturnArgs>(args?: SelectSubset<T, UserPermissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserPermission.
     * @param {UserPermissionDeleteArgs} args - Arguments to delete one UserPermission.
     * @example
     * // Delete one UserPermission
     * const UserPermission = await prisma.userPermission.delete({
     *   where: {
     *     // ... filter to delete one UserPermission
     *   }
     * })
     * 
     */
    delete<T extends UserPermissionDeleteArgs>(args: SelectSubset<T, UserPermissionDeleteArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserPermission.
     * @param {UserPermissionUpdateArgs} args - Arguments to update one UserPermission.
     * @example
     * // Update one UserPermission
     * const userPermission = await prisma.userPermission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserPermissionUpdateArgs>(args: SelectSubset<T, UserPermissionUpdateArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserPermissions.
     * @param {UserPermissionDeleteManyArgs} args - Arguments to filter UserPermissions to delete.
     * @example
     * // Delete a few UserPermissions
     * const { count } = await prisma.userPermission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserPermissionDeleteManyArgs>(args?: SelectSubset<T, UserPermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserPermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserPermissions
     * const userPermission = await prisma.userPermission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserPermissionUpdateManyArgs>(args: SelectSubset<T, UserPermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserPermissions and returns the data updated in the database.
     * @param {UserPermissionUpdateManyAndReturnArgs} args - Arguments to update many UserPermissions.
     * @example
     * // Update many UserPermissions
     * const userPermission = await prisma.userPermission.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserPermissions and only return the `id`
     * const userPermissionWithIdOnly = await prisma.userPermission.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserPermissionUpdateManyAndReturnArgs>(args: SelectSubset<T, UserPermissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserPermission.
     * @param {UserPermissionUpsertArgs} args - Arguments to update or create a UserPermission.
     * @example
     * // Update or create a UserPermission
     * const userPermission = await prisma.userPermission.upsert({
     *   create: {
     *     // ... data to create a UserPermission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserPermission we want to update
     *   }
     * })
     */
    upsert<T extends UserPermissionUpsertArgs>(args: SelectSubset<T, UserPermissionUpsertArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserPermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionCountArgs} args - Arguments to filter UserPermissions to count.
     * @example
     * // Count the number of UserPermissions
     * const count = await prisma.userPermission.count({
     *   where: {
     *     // ... the filter for the UserPermissions we want to count
     *   }
     * })
    **/
    count<T extends UserPermissionCountArgs>(
      args?: Subset<T, UserPermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserPermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserPermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserPermissionAggregateArgs>(args: Subset<T, UserPermissionAggregateArgs>): Prisma.PrismaPromise<GetUserPermissionAggregateType<T>>

    /**
     * Group by UserPermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserPermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserPermissionGroupByArgs['orderBy'] }
        : { orderBy?: UserPermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserPermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserPermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserPermission model
   */
  readonly fields: UserPermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserPermission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserPermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    permission<T extends PermissionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PermissionDefaultArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserPermission model
   */
  interface UserPermissionFieldRefs {
    readonly id: FieldRef<"UserPermission", 'Int'>
    readonly userId: FieldRef<"UserPermission", 'Int'>
    readonly permissionId: FieldRef<"UserPermission", 'Int'>
    readonly grantedAt: FieldRef<"UserPermission", 'DateTime'>
    readonly grantedBy: FieldRef<"UserPermission", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * UserPermission findUnique
   */
  export type UserPermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermission to fetch.
     */
    where: UserPermissionWhereUniqueInput
  }

  /**
   * UserPermission findUniqueOrThrow
   */
  export type UserPermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermission to fetch.
     */
    where: UserPermissionWhereUniqueInput
  }

  /**
   * UserPermission findFirst
   */
  export type UserPermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermission to fetch.
     */
    where?: UserPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPermissions to fetch.
     */
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPermissions.
     */
    cursor?: UserPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPermissions.
     */
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }

  /**
   * UserPermission findFirstOrThrow
   */
  export type UserPermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermission to fetch.
     */
    where?: UserPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPermissions to fetch.
     */
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPermissions.
     */
    cursor?: UserPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPermissions.
     */
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }

  /**
   * UserPermission findMany
   */
  export type UserPermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermissions to fetch.
     */
    where?: UserPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPermissions to fetch.
     */
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserPermissions.
     */
    cursor?: UserPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPermissions.
     */
    skip?: number
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }

  /**
   * UserPermission create
   */
  export type UserPermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a UserPermission.
     */
    data: XOR<UserPermissionCreateInput, UserPermissionUncheckedCreateInput>
  }

  /**
   * UserPermission createMany
   */
  export type UserPermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserPermissions.
     */
    data: UserPermissionCreateManyInput | UserPermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserPermission createManyAndReturn
   */
  export type UserPermissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * The data used to create many UserPermissions.
     */
    data: UserPermissionCreateManyInput | UserPermissionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserPermission update
   */
  export type UserPermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a UserPermission.
     */
    data: XOR<UserPermissionUpdateInput, UserPermissionUncheckedUpdateInput>
    /**
     * Choose, which UserPermission to update.
     */
    where: UserPermissionWhereUniqueInput
  }

  /**
   * UserPermission updateMany
   */
  export type UserPermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserPermissions.
     */
    data: XOR<UserPermissionUpdateManyMutationInput, UserPermissionUncheckedUpdateManyInput>
    /**
     * Filter which UserPermissions to update
     */
    where?: UserPermissionWhereInput
    /**
     * Limit how many UserPermissions to update.
     */
    limit?: number
  }

  /**
   * UserPermission updateManyAndReturn
   */
  export type UserPermissionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * The data used to update UserPermissions.
     */
    data: XOR<UserPermissionUpdateManyMutationInput, UserPermissionUncheckedUpdateManyInput>
    /**
     * Filter which UserPermissions to update
     */
    where?: UserPermissionWhereInput
    /**
     * Limit how many UserPermissions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserPermission upsert
   */
  export type UserPermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the UserPermission to update in case it exists.
     */
    where: UserPermissionWhereUniqueInput
    /**
     * In case the UserPermission found by the `where` argument doesn't exist, create a new UserPermission with this data.
     */
    create: XOR<UserPermissionCreateInput, UserPermissionUncheckedCreateInput>
    /**
     * In case the UserPermission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserPermissionUpdateInput, UserPermissionUncheckedUpdateInput>
  }

  /**
   * UserPermission delete
   */
  export type UserPermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter which UserPermission to delete.
     */
    where: UserPermissionWhereUniqueInput
  }

  /**
   * UserPermission deleteMany
   */
  export type UserPermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPermissions to delete
     */
    where?: UserPermissionWhereInput
    /**
     * Limit how many UserPermissions to delete.
     */
    limit?: number
  }

  /**
   * UserPermission without action
   */
  export type UserPermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
  }


  /**
   * Model RefreshToken
   */

  export type AggregateRefreshToken = {
    _count: RefreshTokenCountAggregateOutputType | null
    _avg: RefreshTokenAvgAggregateOutputType | null
    _sum: RefreshTokenSumAggregateOutputType | null
    _min: RefreshTokenMinAggregateOutputType | null
    _max: RefreshTokenMaxAggregateOutputType | null
  }

  export type RefreshTokenAvgAggregateOutputType = {
    userId: number | null
  }

  export type RefreshTokenSumAggregateOutputType = {
    userId: number | null
  }

  export type RefreshTokenMinAggregateOutputType = {
    token: string | null
    userId: number | null
    expiresAt: Date | null
    createdAt: Date | null
    createdByIp: string | null
    isRevoked: boolean | null
    revokedAt: Date | null
    revokedByIp: string | null
    replacedByToken: string | null
  }

  export type RefreshTokenMaxAggregateOutputType = {
    token: string | null
    userId: number | null
    expiresAt: Date | null
    createdAt: Date | null
    createdByIp: string | null
    isRevoked: boolean | null
    revokedAt: Date | null
    revokedByIp: string | null
    replacedByToken: string | null
  }

  export type RefreshTokenCountAggregateOutputType = {
    token: number
    userId: number
    expiresAt: number
    createdAt: number
    createdByIp: number
    isRevoked: number
    revokedAt: number
    revokedByIp: number
    replacedByToken: number
    _all: number
  }


  export type RefreshTokenAvgAggregateInputType = {
    userId?: true
  }

  export type RefreshTokenSumAggregateInputType = {
    userId?: true
  }

  export type RefreshTokenMinAggregateInputType = {
    token?: true
    userId?: true
    expiresAt?: true
    createdAt?: true
    createdByIp?: true
    isRevoked?: true
    revokedAt?: true
    revokedByIp?: true
    replacedByToken?: true
  }

  export type RefreshTokenMaxAggregateInputType = {
    token?: true
    userId?: true
    expiresAt?: true
    createdAt?: true
    createdByIp?: true
    isRevoked?: true
    revokedAt?: true
    revokedByIp?: true
    replacedByToken?: true
  }

  export type RefreshTokenCountAggregateInputType = {
    token?: true
    userId?: true
    expiresAt?: true
    createdAt?: true
    createdByIp?: true
    isRevoked?: true
    revokedAt?: true
    revokedByIp?: true
    replacedByToken?: true
    _all?: true
  }

  export type RefreshTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RefreshToken to aggregate.
     */
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     */
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RefreshTokens
    **/
    _count?: true | RefreshTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RefreshTokenAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RefreshTokenSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RefreshTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RefreshTokenMaxAggregateInputType
  }

  export type GetRefreshTokenAggregateType<T extends RefreshTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateRefreshToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRefreshToken[P]>
      : GetScalarType<T[P], AggregateRefreshToken[P]>
  }




  export type RefreshTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RefreshTokenWhereInput
    orderBy?: RefreshTokenOrderByWithAggregationInput | RefreshTokenOrderByWithAggregationInput[]
    by: RefreshTokenScalarFieldEnum[] | RefreshTokenScalarFieldEnum
    having?: RefreshTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RefreshTokenCountAggregateInputType | true
    _avg?: RefreshTokenAvgAggregateInputType
    _sum?: RefreshTokenSumAggregateInputType
    _min?: RefreshTokenMinAggregateInputType
    _max?: RefreshTokenMaxAggregateInputType
  }

  export type RefreshTokenGroupByOutputType = {
    token: string
    userId: number
    expiresAt: Date
    createdAt: Date
    createdByIp: string | null
    isRevoked: boolean
    revokedAt: Date | null
    revokedByIp: string | null
    replacedByToken: string | null
    _count: RefreshTokenCountAggregateOutputType | null
    _avg: RefreshTokenAvgAggregateOutputType | null
    _sum: RefreshTokenSumAggregateOutputType | null
    _min: RefreshTokenMinAggregateOutputType | null
    _max: RefreshTokenMaxAggregateOutputType | null
  }

  type GetRefreshTokenGroupByPayload<T extends RefreshTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RefreshTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RefreshTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RefreshTokenGroupByOutputType[P]>
            : GetScalarType<T[P], RefreshTokenGroupByOutputType[P]>
        }
      >
    >


  export type RefreshTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    token?: boolean
    userId?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    createdByIp?: boolean
    isRevoked?: boolean
    revokedAt?: boolean
    revokedByIp?: boolean
    replacedByToken?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["refreshToken"]>

  export type RefreshTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    token?: boolean
    userId?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    createdByIp?: boolean
    isRevoked?: boolean
    revokedAt?: boolean
    revokedByIp?: boolean
    replacedByToken?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["refreshToken"]>

  export type RefreshTokenSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    token?: boolean
    userId?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    createdByIp?: boolean
    isRevoked?: boolean
    revokedAt?: boolean
    revokedByIp?: boolean
    replacedByToken?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["refreshToken"]>

  export type RefreshTokenSelectScalar = {
    token?: boolean
    userId?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    createdByIp?: boolean
    isRevoked?: boolean
    revokedAt?: boolean
    revokedByIp?: boolean
    replacedByToken?: boolean
  }

  export type RefreshTokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"token" | "userId" | "expiresAt" | "createdAt" | "createdByIp" | "isRevoked" | "revokedAt" | "revokedByIp" | "replacedByToken", ExtArgs["result"]["refreshToken"]>
  export type RefreshTokenInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RefreshTokenIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RefreshTokenIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $RefreshTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RefreshToken"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      token: string
      userId: number
      expiresAt: Date
      createdAt: Date
      createdByIp: string | null
      isRevoked: boolean
      revokedAt: Date | null
      revokedByIp: string | null
      replacedByToken: string | null
    }, ExtArgs["result"]["refreshToken"]>
    composites: {}
  }

  type RefreshTokenGetPayload<S extends boolean | null | undefined | RefreshTokenDefaultArgs> = $Result.GetResult<Prisma.$RefreshTokenPayload, S>

  type RefreshTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RefreshTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RefreshTokenCountAggregateInputType | true
    }

  export interface RefreshTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RefreshToken'], meta: { name: 'RefreshToken' } }
    /**
     * Find zero or one RefreshToken that matches the filter.
     * @param {RefreshTokenFindUniqueArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RefreshTokenFindUniqueArgs>(args: SelectSubset<T, RefreshTokenFindUniqueArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RefreshToken that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RefreshTokenFindUniqueOrThrowArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RefreshTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, RefreshTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RefreshToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenFindFirstArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RefreshTokenFindFirstArgs>(args?: SelectSubset<T, RefreshTokenFindFirstArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RefreshToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenFindFirstOrThrowArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RefreshTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, RefreshTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RefreshTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RefreshTokens
     * const refreshTokens = await prisma.refreshToken.findMany()
     * 
     * // Get first 10 RefreshTokens
     * const refreshTokens = await prisma.refreshToken.findMany({ take: 10 })
     * 
     * // Only select the `token`
     * const refreshTokenWithTokenOnly = await prisma.refreshToken.findMany({ select: { token: true } })
     * 
     */
    findMany<T extends RefreshTokenFindManyArgs>(args?: SelectSubset<T, RefreshTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RefreshToken.
     * @param {RefreshTokenCreateArgs} args - Arguments to create a RefreshToken.
     * @example
     * // Create one RefreshToken
     * const RefreshToken = await prisma.refreshToken.create({
     *   data: {
     *     // ... data to create a RefreshToken
     *   }
     * })
     * 
     */
    create<T extends RefreshTokenCreateArgs>(args: SelectSubset<T, RefreshTokenCreateArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RefreshTokens.
     * @param {RefreshTokenCreateManyArgs} args - Arguments to create many RefreshTokens.
     * @example
     * // Create many RefreshTokens
     * const refreshToken = await prisma.refreshToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RefreshTokenCreateManyArgs>(args?: SelectSubset<T, RefreshTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RefreshTokens and returns the data saved in the database.
     * @param {RefreshTokenCreateManyAndReturnArgs} args - Arguments to create many RefreshTokens.
     * @example
     * // Create many RefreshTokens
     * const refreshToken = await prisma.refreshToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RefreshTokens and only return the `token`
     * const refreshTokenWithTokenOnly = await prisma.refreshToken.createManyAndReturn({
     *   select: { token: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RefreshTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, RefreshTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RefreshToken.
     * @param {RefreshTokenDeleteArgs} args - Arguments to delete one RefreshToken.
     * @example
     * // Delete one RefreshToken
     * const RefreshToken = await prisma.refreshToken.delete({
     *   where: {
     *     // ... filter to delete one RefreshToken
     *   }
     * })
     * 
     */
    delete<T extends RefreshTokenDeleteArgs>(args: SelectSubset<T, RefreshTokenDeleteArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RefreshToken.
     * @param {RefreshTokenUpdateArgs} args - Arguments to update one RefreshToken.
     * @example
     * // Update one RefreshToken
     * const refreshToken = await prisma.refreshToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RefreshTokenUpdateArgs>(args: SelectSubset<T, RefreshTokenUpdateArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RefreshTokens.
     * @param {RefreshTokenDeleteManyArgs} args - Arguments to filter RefreshTokens to delete.
     * @example
     * // Delete a few RefreshTokens
     * const { count } = await prisma.refreshToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RefreshTokenDeleteManyArgs>(args?: SelectSubset<T, RefreshTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RefreshTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RefreshTokens
     * const refreshToken = await prisma.refreshToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RefreshTokenUpdateManyArgs>(args: SelectSubset<T, RefreshTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RefreshTokens and returns the data updated in the database.
     * @param {RefreshTokenUpdateManyAndReturnArgs} args - Arguments to update many RefreshTokens.
     * @example
     * // Update many RefreshTokens
     * const refreshToken = await prisma.refreshToken.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RefreshTokens and only return the `token`
     * const refreshTokenWithTokenOnly = await prisma.refreshToken.updateManyAndReturn({
     *   select: { token: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RefreshTokenUpdateManyAndReturnArgs>(args: SelectSubset<T, RefreshTokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RefreshToken.
     * @param {RefreshTokenUpsertArgs} args - Arguments to update or create a RefreshToken.
     * @example
     * // Update or create a RefreshToken
     * const refreshToken = await prisma.refreshToken.upsert({
     *   create: {
     *     // ... data to create a RefreshToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RefreshToken we want to update
     *   }
     * })
     */
    upsert<T extends RefreshTokenUpsertArgs>(args: SelectSubset<T, RefreshTokenUpsertArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RefreshTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenCountArgs} args - Arguments to filter RefreshTokens to count.
     * @example
     * // Count the number of RefreshTokens
     * const count = await prisma.refreshToken.count({
     *   where: {
     *     // ... the filter for the RefreshTokens we want to count
     *   }
     * })
    **/
    count<T extends RefreshTokenCountArgs>(
      args?: Subset<T, RefreshTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RefreshTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RefreshToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RefreshTokenAggregateArgs>(args: Subset<T, RefreshTokenAggregateArgs>): Prisma.PrismaPromise<GetRefreshTokenAggregateType<T>>

    /**
     * Group by RefreshToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RefreshTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RefreshTokenGroupByArgs['orderBy'] }
        : { orderBy?: RefreshTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RefreshTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRefreshTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RefreshToken model
   */
  readonly fields: RefreshTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RefreshToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RefreshTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RefreshToken model
   */
  interface RefreshTokenFieldRefs {
    readonly token: FieldRef<"RefreshToken", 'String'>
    readonly userId: FieldRef<"RefreshToken", 'Int'>
    readonly expiresAt: FieldRef<"RefreshToken", 'DateTime'>
    readonly createdAt: FieldRef<"RefreshToken", 'DateTime'>
    readonly createdByIp: FieldRef<"RefreshToken", 'String'>
    readonly isRevoked: FieldRef<"RefreshToken", 'Boolean'>
    readonly revokedAt: FieldRef<"RefreshToken", 'DateTime'>
    readonly revokedByIp: FieldRef<"RefreshToken", 'String'>
    readonly replacedByToken: FieldRef<"RefreshToken", 'String'>
  }
    

  // Custom InputTypes
  /**
   * RefreshToken findUnique
   */
  export type RefreshTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshToken to fetch.
     */
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken findUniqueOrThrow
   */
  export type RefreshTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshToken to fetch.
     */
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken findFirst
   */
  export type RefreshTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshToken to fetch.
     */
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     */
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RefreshTokens.
     */
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RefreshTokens.
     */
    distinct?: RefreshTokenScalarFieldEnum | RefreshTokenScalarFieldEnum[]
  }

  /**
   * RefreshToken findFirstOrThrow
   */
  export type RefreshTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshToken to fetch.
     */
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     */
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RefreshTokens.
     */
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RefreshTokens.
     */
    distinct?: RefreshTokenScalarFieldEnum | RefreshTokenScalarFieldEnum[]
  }

  /**
   * RefreshToken findMany
   */
  export type RefreshTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshTokens to fetch.
     */
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     */
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RefreshTokens.
     */
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     */
    skip?: number
    distinct?: RefreshTokenScalarFieldEnum | RefreshTokenScalarFieldEnum[]
  }

  /**
   * RefreshToken create
   */
  export type RefreshTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * The data needed to create a RefreshToken.
     */
    data: XOR<RefreshTokenCreateInput, RefreshTokenUncheckedCreateInput>
  }

  /**
   * RefreshToken createMany
   */
  export type RefreshTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RefreshTokens.
     */
    data: RefreshTokenCreateManyInput | RefreshTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RefreshToken createManyAndReturn
   */
  export type RefreshTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * The data used to create many RefreshTokens.
     */
    data: RefreshTokenCreateManyInput | RefreshTokenCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RefreshToken update
   */
  export type RefreshTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * The data needed to update a RefreshToken.
     */
    data: XOR<RefreshTokenUpdateInput, RefreshTokenUncheckedUpdateInput>
    /**
     * Choose, which RefreshToken to update.
     */
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken updateMany
   */
  export type RefreshTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RefreshTokens.
     */
    data: XOR<RefreshTokenUpdateManyMutationInput, RefreshTokenUncheckedUpdateManyInput>
    /**
     * Filter which RefreshTokens to update
     */
    where?: RefreshTokenWhereInput
    /**
     * Limit how many RefreshTokens to update.
     */
    limit?: number
  }

  /**
   * RefreshToken updateManyAndReturn
   */
  export type RefreshTokenUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * The data used to update RefreshTokens.
     */
    data: XOR<RefreshTokenUpdateManyMutationInput, RefreshTokenUncheckedUpdateManyInput>
    /**
     * Filter which RefreshTokens to update
     */
    where?: RefreshTokenWhereInput
    /**
     * Limit how many RefreshTokens to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RefreshToken upsert
   */
  export type RefreshTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * The filter to search for the RefreshToken to update in case it exists.
     */
    where: RefreshTokenWhereUniqueInput
    /**
     * In case the RefreshToken found by the `where` argument doesn't exist, create a new RefreshToken with this data.
     */
    create: XOR<RefreshTokenCreateInput, RefreshTokenUncheckedCreateInput>
    /**
     * In case the RefreshToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RefreshTokenUpdateInput, RefreshTokenUncheckedUpdateInput>
  }

  /**
   * RefreshToken delete
   */
  export type RefreshTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter which RefreshToken to delete.
     */
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken deleteMany
   */
  export type RefreshTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RefreshTokens to delete
     */
    where?: RefreshTokenWhereInput
    /**
     * Limit how many RefreshTokens to delete.
     */
    limit?: number
  }

  /**
   * RefreshToken without action
   */
  export type RefreshTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
  }


  /**
   * Model SystemSettings
   */

  export type AggregateSystemSettings = {
    _count: SystemSettingsCountAggregateOutputType | null
    _avg: SystemSettingsAvgAggregateOutputType | null
    _sum: SystemSettingsSumAggregateOutputType | null
    _min: SystemSettingsMinAggregateOutputType | null
    _max: SystemSettingsMaxAggregateOutputType | null
  }

  export type SystemSettingsAvgAggregateOutputType = {
    id: number | null
  }

  export type SystemSettingsSumAggregateOutputType = {
    id: number | null
  }

  export type SystemSettingsMinAggregateOutputType = {
    id: number | null
    key: string | null
    value: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SystemSettingsMaxAggregateOutputType = {
    id: number | null
    key: string | null
    value: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SystemSettingsCountAggregateOutputType = {
    id: number
    key: number
    value: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SystemSettingsAvgAggregateInputType = {
    id?: true
  }

  export type SystemSettingsSumAggregateInputType = {
    id?: true
  }

  export type SystemSettingsMinAggregateInputType = {
    id?: true
    key?: true
    value?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SystemSettingsMaxAggregateInputType = {
    id?: true
    key?: true
    value?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SystemSettingsCountAggregateInputType = {
    id?: true
    key?: true
    value?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SystemSettingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemSettings to aggregate.
     */
    where?: SystemSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemSettings to fetch.
     */
    orderBy?: SystemSettingsOrderByWithRelationInput | SystemSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SystemSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SystemSettings
    **/
    _count?: true | SystemSettingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SystemSettingsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SystemSettingsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SystemSettingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SystemSettingsMaxAggregateInputType
  }

  export type GetSystemSettingsAggregateType<T extends SystemSettingsAggregateArgs> = {
        [P in keyof T & keyof AggregateSystemSettings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSystemSettings[P]>
      : GetScalarType<T[P], AggregateSystemSettings[P]>
  }




  export type SystemSettingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SystemSettingsWhereInput
    orderBy?: SystemSettingsOrderByWithAggregationInput | SystemSettingsOrderByWithAggregationInput[]
    by: SystemSettingsScalarFieldEnum[] | SystemSettingsScalarFieldEnum
    having?: SystemSettingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SystemSettingsCountAggregateInputType | true
    _avg?: SystemSettingsAvgAggregateInputType
    _sum?: SystemSettingsSumAggregateInputType
    _min?: SystemSettingsMinAggregateInputType
    _max?: SystemSettingsMaxAggregateInputType
  }

  export type SystemSettingsGroupByOutputType = {
    id: number
    key: string
    value: string
    description: string | null
    createdAt: Date
    updatedAt: Date
    _count: SystemSettingsCountAggregateOutputType | null
    _avg: SystemSettingsAvgAggregateOutputType | null
    _sum: SystemSettingsSumAggregateOutputType | null
    _min: SystemSettingsMinAggregateOutputType | null
    _max: SystemSettingsMaxAggregateOutputType | null
  }

  type GetSystemSettingsGroupByPayload<T extends SystemSettingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SystemSettingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SystemSettingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SystemSettingsGroupByOutputType[P]>
            : GetScalarType<T[P], SystemSettingsGroupByOutputType[P]>
        }
      >
    >


  export type SystemSettingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["systemSettings"]>

  export type SystemSettingsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["systemSettings"]>

  export type SystemSettingsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["systemSettings"]>

  export type SystemSettingsSelectScalar = {
    id?: boolean
    key?: boolean
    value?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SystemSettingsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "key" | "value" | "description" | "createdAt" | "updatedAt", ExtArgs["result"]["systemSettings"]>

  export type $SystemSettingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SystemSettings"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      key: string
      value: string
      description: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["systemSettings"]>
    composites: {}
  }

  type SystemSettingsGetPayload<S extends boolean | null | undefined | SystemSettingsDefaultArgs> = $Result.GetResult<Prisma.$SystemSettingsPayload, S>

  type SystemSettingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SystemSettingsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SystemSettingsCountAggregateInputType | true
    }

  export interface SystemSettingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SystemSettings'], meta: { name: 'SystemSettings' } }
    /**
     * Find zero or one SystemSettings that matches the filter.
     * @param {SystemSettingsFindUniqueArgs} args - Arguments to find a SystemSettings
     * @example
     * // Get one SystemSettings
     * const systemSettings = await prisma.systemSettings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SystemSettingsFindUniqueArgs>(args: SelectSubset<T, SystemSettingsFindUniqueArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SystemSettings that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SystemSettingsFindUniqueOrThrowArgs} args - Arguments to find a SystemSettings
     * @example
     * // Get one SystemSettings
     * const systemSettings = await prisma.systemSettings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SystemSettingsFindUniqueOrThrowArgs>(args: SelectSubset<T, SystemSettingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SystemSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingsFindFirstArgs} args - Arguments to find a SystemSettings
     * @example
     * // Get one SystemSettings
     * const systemSettings = await prisma.systemSettings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SystemSettingsFindFirstArgs>(args?: SelectSubset<T, SystemSettingsFindFirstArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SystemSettings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingsFindFirstOrThrowArgs} args - Arguments to find a SystemSettings
     * @example
     * // Get one SystemSettings
     * const systemSettings = await prisma.systemSettings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SystemSettingsFindFirstOrThrowArgs>(args?: SelectSubset<T, SystemSettingsFindFirstOrThrowArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SystemSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SystemSettings
     * const systemSettings = await prisma.systemSettings.findMany()
     * 
     * // Get first 10 SystemSettings
     * const systemSettings = await prisma.systemSettings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const systemSettingsWithIdOnly = await prisma.systemSettings.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SystemSettingsFindManyArgs>(args?: SelectSubset<T, SystemSettingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SystemSettings.
     * @param {SystemSettingsCreateArgs} args - Arguments to create a SystemSettings.
     * @example
     * // Create one SystemSettings
     * const SystemSettings = await prisma.systemSettings.create({
     *   data: {
     *     // ... data to create a SystemSettings
     *   }
     * })
     * 
     */
    create<T extends SystemSettingsCreateArgs>(args: SelectSubset<T, SystemSettingsCreateArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SystemSettings.
     * @param {SystemSettingsCreateManyArgs} args - Arguments to create many SystemSettings.
     * @example
     * // Create many SystemSettings
     * const systemSettings = await prisma.systemSettings.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SystemSettingsCreateManyArgs>(args?: SelectSubset<T, SystemSettingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SystemSettings and returns the data saved in the database.
     * @param {SystemSettingsCreateManyAndReturnArgs} args - Arguments to create many SystemSettings.
     * @example
     * // Create many SystemSettings
     * const systemSettings = await prisma.systemSettings.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SystemSettings and only return the `id`
     * const systemSettingsWithIdOnly = await prisma.systemSettings.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SystemSettingsCreateManyAndReturnArgs>(args?: SelectSubset<T, SystemSettingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SystemSettings.
     * @param {SystemSettingsDeleteArgs} args - Arguments to delete one SystemSettings.
     * @example
     * // Delete one SystemSettings
     * const SystemSettings = await prisma.systemSettings.delete({
     *   where: {
     *     // ... filter to delete one SystemSettings
     *   }
     * })
     * 
     */
    delete<T extends SystemSettingsDeleteArgs>(args: SelectSubset<T, SystemSettingsDeleteArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SystemSettings.
     * @param {SystemSettingsUpdateArgs} args - Arguments to update one SystemSettings.
     * @example
     * // Update one SystemSettings
     * const systemSettings = await prisma.systemSettings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SystemSettingsUpdateArgs>(args: SelectSubset<T, SystemSettingsUpdateArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SystemSettings.
     * @param {SystemSettingsDeleteManyArgs} args - Arguments to filter SystemSettings to delete.
     * @example
     * // Delete a few SystemSettings
     * const { count } = await prisma.systemSettings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SystemSettingsDeleteManyArgs>(args?: SelectSubset<T, SystemSettingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SystemSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SystemSettings
     * const systemSettings = await prisma.systemSettings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SystemSettingsUpdateManyArgs>(args: SelectSubset<T, SystemSettingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SystemSettings and returns the data updated in the database.
     * @param {SystemSettingsUpdateManyAndReturnArgs} args - Arguments to update many SystemSettings.
     * @example
     * // Update many SystemSettings
     * const systemSettings = await prisma.systemSettings.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SystemSettings and only return the `id`
     * const systemSettingsWithIdOnly = await prisma.systemSettings.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SystemSettingsUpdateManyAndReturnArgs>(args: SelectSubset<T, SystemSettingsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SystemSettings.
     * @param {SystemSettingsUpsertArgs} args - Arguments to update or create a SystemSettings.
     * @example
     * // Update or create a SystemSettings
     * const systemSettings = await prisma.systemSettings.upsert({
     *   create: {
     *     // ... data to create a SystemSettings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SystemSettings we want to update
     *   }
     * })
     */
    upsert<T extends SystemSettingsUpsertArgs>(args: SelectSubset<T, SystemSettingsUpsertArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SystemSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingsCountArgs} args - Arguments to filter SystemSettings to count.
     * @example
     * // Count the number of SystemSettings
     * const count = await prisma.systemSettings.count({
     *   where: {
     *     // ... the filter for the SystemSettings we want to count
     *   }
     * })
    **/
    count<T extends SystemSettingsCountArgs>(
      args?: Subset<T, SystemSettingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SystemSettingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SystemSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SystemSettingsAggregateArgs>(args: Subset<T, SystemSettingsAggregateArgs>): Prisma.PrismaPromise<GetSystemSettingsAggregateType<T>>

    /**
     * Group by SystemSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SystemSettingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SystemSettingsGroupByArgs['orderBy'] }
        : { orderBy?: SystemSettingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SystemSettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSystemSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SystemSettings model
   */
  readonly fields: SystemSettingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SystemSettings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SystemSettingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SystemSettings model
   */
  interface SystemSettingsFieldRefs {
    readonly id: FieldRef<"SystemSettings", 'Int'>
    readonly key: FieldRef<"SystemSettings", 'String'>
    readonly value: FieldRef<"SystemSettings", 'String'>
    readonly description: FieldRef<"SystemSettings", 'String'>
    readonly createdAt: FieldRef<"SystemSettings", 'DateTime'>
    readonly updatedAt: FieldRef<"SystemSettings", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SystemSettings findUnique
   */
  export type SystemSettingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * Filter, which SystemSettings to fetch.
     */
    where: SystemSettingsWhereUniqueInput
  }

  /**
   * SystemSettings findUniqueOrThrow
   */
  export type SystemSettingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * Filter, which SystemSettings to fetch.
     */
    where: SystemSettingsWhereUniqueInput
  }

  /**
   * SystemSettings findFirst
   */
  export type SystemSettingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * Filter, which SystemSettings to fetch.
     */
    where?: SystemSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemSettings to fetch.
     */
    orderBy?: SystemSettingsOrderByWithRelationInput | SystemSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemSettings.
     */
    cursor?: SystemSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemSettings.
     */
    distinct?: SystemSettingsScalarFieldEnum | SystemSettingsScalarFieldEnum[]
  }

  /**
   * SystemSettings findFirstOrThrow
   */
  export type SystemSettingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * Filter, which SystemSettings to fetch.
     */
    where?: SystemSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemSettings to fetch.
     */
    orderBy?: SystemSettingsOrderByWithRelationInput | SystemSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemSettings.
     */
    cursor?: SystemSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemSettings.
     */
    distinct?: SystemSettingsScalarFieldEnum | SystemSettingsScalarFieldEnum[]
  }

  /**
   * SystemSettings findMany
   */
  export type SystemSettingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * Filter, which SystemSettings to fetch.
     */
    where?: SystemSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemSettings to fetch.
     */
    orderBy?: SystemSettingsOrderByWithRelationInput | SystemSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SystemSettings.
     */
    cursor?: SystemSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemSettings.
     */
    skip?: number
    distinct?: SystemSettingsScalarFieldEnum | SystemSettingsScalarFieldEnum[]
  }

  /**
   * SystemSettings create
   */
  export type SystemSettingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * The data needed to create a SystemSettings.
     */
    data: XOR<SystemSettingsCreateInput, SystemSettingsUncheckedCreateInput>
  }

  /**
   * SystemSettings createMany
   */
  export type SystemSettingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SystemSettings.
     */
    data: SystemSettingsCreateManyInput | SystemSettingsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SystemSettings createManyAndReturn
   */
  export type SystemSettingsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * The data used to create many SystemSettings.
     */
    data: SystemSettingsCreateManyInput | SystemSettingsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SystemSettings update
   */
  export type SystemSettingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * The data needed to update a SystemSettings.
     */
    data: XOR<SystemSettingsUpdateInput, SystemSettingsUncheckedUpdateInput>
    /**
     * Choose, which SystemSettings to update.
     */
    where: SystemSettingsWhereUniqueInput
  }

  /**
   * SystemSettings updateMany
   */
  export type SystemSettingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SystemSettings.
     */
    data: XOR<SystemSettingsUpdateManyMutationInput, SystemSettingsUncheckedUpdateManyInput>
    /**
     * Filter which SystemSettings to update
     */
    where?: SystemSettingsWhereInput
    /**
     * Limit how many SystemSettings to update.
     */
    limit?: number
  }

  /**
   * SystemSettings updateManyAndReturn
   */
  export type SystemSettingsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * The data used to update SystemSettings.
     */
    data: XOR<SystemSettingsUpdateManyMutationInput, SystemSettingsUncheckedUpdateManyInput>
    /**
     * Filter which SystemSettings to update
     */
    where?: SystemSettingsWhereInput
    /**
     * Limit how many SystemSettings to update.
     */
    limit?: number
  }

  /**
   * SystemSettings upsert
   */
  export type SystemSettingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * The filter to search for the SystemSettings to update in case it exists.
     */
    where: SystemSettingsWhereUniqueInput
    /**
     * In case the SystemSettings found by the `where` argument doesn't exist, create a new SystemSettings with this data.
     */
    create: XOR<SystemSettingsCreateInput, SystemSettingsUncheckedCreateInput>
    /**
     * In case the SystemSettings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SystemSettingsUpdateInput, SystemSettingsUncheckedUpdateInput>
  }

  /**
   * SystemSettings delete
   */
  export type SystemSettingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * Filter which SystemSettings to delete.
     */
    where: SystemSettingsWhereUniqueInput
  }

  /**
   * SystemSettings deleteMany
   */
  export type SystemSettingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemSettings to delete
     */
    where?: SystemSettingsWhereInput
    /**
     * Limit how many SystemSettings to delete.
     */
    limit?: number
  }

  /**
   * SystemSettings without action
   */
  export type SystemSettingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
  }


  /**
   * Model Customer
   */

  export type AggregateCustomer = {
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  export type CustomerAvgAggregateOutputType = {
    id: number | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type CustomerSumAggregateOutputType = {
    id: number | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type CustomerMinAggregateOutputType = {
    id: number | null
    name: string | null
    company: string | null
    email: string | null
    phone: string | null
    address: string | null
    postalCode: string | null
    city: string | null
    country: string | null
    vatNumber: string | null
    notes: string | null
    newsletter: boolean | null
    status: string | null
    type: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type CustomerMaxAggregateOutputType = {
    id: number | null
    name: string | null
    company: string | null
    email: string | null
    phone: string | null
    address: string | null
    postalCode: string | null
    city: string | null
    country: string | null
    vatNumber: string | null
    notes: string | null
    newsletter: boolean | null
    status: string | null
    type: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type CustomerCountAggregateOutputType = {
    id: number
    name: number
    company: number
    email: number
    phone: number
    address: number
    postalCode: number
    city: number
    country: number
    vatNumber: number
    notes: number
    newsletter: number
    status: number
    type: number
    createdAt: number
    updatedAt: number
    createdBy: number
    updatedBy: number
    _all: number
  }


  export type CustomerAvgAggregateInputType = {
    id?: true
    createdBy?: true
    updatedBy?: true
  }

  export type CustomerSumAggregateInputType = {
    id?: true
    createdBy?: true
    updatedBy?: true
  }

  export type CustomerMinAggregateInputType = {
    id?: true
    name?: true
    company?: true
    email?: true
    phone?: true
    address?: true
    postalCode?: true
    city?: true
    country?: true
    vatNumber?: true
    notes?: true
    newsletter?: true
    status?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    updatedBy?: true
  }

  export type CustomerMaxAggregateInputType = {
    id?: true
    name?: true
    company?: true
    email?: true
    phone?: true
    address?: true
    postalCode?: true
    city?: true
    country?: true
    vatNumber?: true
    notes?: true
    newsletter?: true
    status?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    updatedBy?: true
  }

  export type CustomerCountAggregateInputType = {
    id?: true
    name?: true
    company?: true
    email?: true
    phone?: true
    address?: true
    postalCode?: true
    city?: true
    country?: true
    vatNumber?: true
    notes?: true
    newsletter?: true
    status?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    updatedBy?: true
    _all?: true
  }

  export type CustomerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customer to aggregate.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Customers
    **/
    _count?: true | CustomerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerMaxAggregateInputType
  }

  export type GetCustomerAggregateType<T extends CustomerAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomer[P]>
      : GetScalarType<T[P], AggregateCustomer[P]>
  }




  export type CustomerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerWhereInput
    orderBy?: CustomerOrderByWithAggregationInput | CustomerOrderByWithAggregationInput[]
    by: CustomerScalarFieldEnum[] | CustomerScalarFieldEnum
    having?: CustomerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerCountAggregateInputType | true
    _avg?: CustomerAvgAggregateInputType
    _sum?: CustomerSumAggregateInputType
    _min?: CustomerMinAggregateInputType
    _max?: CustomerMaxAggregateInputType
  }

  export type CustomerGroupByOutputType = {
    id: number
    name: string
    company: string | null
    email: string | null
    phone: string | null
    address: string | null
    postalCode: string | null
    city: string | null
    country: string
    vatNumber: string | null
    notes: string | null
    newsletter: boolean
    status: string
    type: string
    createdAt: Date
    updatedAt: Date
    createdBy: number | null
    updatedBy: number | null
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  type GetCustomerGroupByPayload<T extends CustomerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerGroupByOutputType[P]>
        }
      >
    >


  export type CustomerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    company?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    postalCode?: boolean
    city?: boolean
    country?: boolean
    vatNumber?: boolean
    notes?: boolean
    newsletter?: boolean
    status?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    updatedBy?: boolean
    appointments?: boolean | Customer$appointmentsArgs<ExtArgs>
    logs?: boolean | Customer$logsArgs<ExtArgs>
    contactRequests?: boolean | Customer$contactRequestsArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    company?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    postalCode?: boolean
    city?: boolean
    country?: boolean
    vatNumber?: boolean
    notes?: boolean
    newsletter?: boolean
    status?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    updatedBy?: boolean
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    company?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    postalCode?: boolean
    city?: boolean
    country?: boolean
    vatNumber?: boolean
    notes?: boolean
    newsletter?: boolean
    status?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    updatedBy?: boolean
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectScalar = {
    id?: boolean
    name?: boolean
    company?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    postalCode?: boolean
    city?: boolean
    country?: boolean
    vatNumber?: boolean
    notes?: boolean
    newsletter?: boolean
    status?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    updatedBy?: boolean
  }

  export type CustomerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "company" | "email" | "phone" | "address" | "postalCode" | "city" | "country" | "vatNumber" | "notes" | "newsletter" | "status" | "type" | "createdAt" | "updatedAt" | "createdBy" | "updatedBy", ExtArgs["result"]["customer"]>
  export type CustomerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    appointments?: boolean | Customer$appointmentsArgs<ExtArgs>
    logs?: boolean | Customer$logsArgs<ExtArgs>
    contactRequests?: boolean | Customer$contactRequestsArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CustomerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CustomerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CustomerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Customer"
    objects: {
      appointments: Prisma.$AppointmentPayload<ExtArgs>[]
      logs: Prisma.$CustomerLogPayload<ExtArgs>[]
      contactRequests: Prisma.$ContactRequestPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      company: string | null
      email: string | null
      phone: string | null
      address: string | null
      postalCode: string | null
      city: string | null
      country: string
      vatNumber: string | null
      notes: string | null
      newsletter: boolean
      status: string
      type: string
      createdAt: Date
      updatedAt: Date
      createdBy: number | null
      updatedBy: number | null
    }, ExtArgs["result"]["customer"]>
    composites: {}
  }

  type CustomerGetPayload<S extends boolean | null | undefined | CustomerDefaultArgs> = $Result.GetResult<Prisma.$CustomerPayload, S>

  type CustomerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CustomerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CustomerCountAggregateInputType | true
    }

  export interface CustomerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Customer'], meta: { name: 'Customer' } }
    /**
     * Find zero or one Customer that matches the filter.
     * @param {CustomerFindUniqueArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomerFindUniqueArgs>(args: SelectSubset<T, CustomerFindUniqueArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Customer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CustomerFindUniqueOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomerFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Customer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomerFindFirstArgs>(args?: SelectSubset<T, CustomerFindFirstArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Customer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomerFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomerFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Customers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customers
     * const customers = await prisma.customer.findMany()
     * 
     * // Get first 10 Customers
     * const customers = await prisma.customer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerWithIdOnly = await prisma.customer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CustomerFindManyArgs>(args?: SelectSubset<T, CustomerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Customer.
     * @param {CustomerCreateArgs} args - Arguments to create a Customer.
     * @example
     * // Create one Customer
     * const Customer = await prisma.customer.create({
     *   data: {
     *     // ... data to create a Customer
     *   }
     * })
     * 
     */
    create<T extends CustomerCreateArgs>(args: SelectSubset<T, CustomerCreateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Customers.
     * @param {CustomerCreateManyArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomerCreateManyArgs>(args?: SelectSubset<T, CustomerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Customers and returns the data saved in the database.
     * @param {CustomerCreateManyAndReturnArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Customers and only return the `id`
     * const customerWithIdOnly = await prisma.customer.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CustomerCreateManyAndReturnArgs>(args?: SelectSubset<T, CustomerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Customer.
     * @param {CustomerDeleteArgs} args - Arguments to delete one Customer.
     * @example
     * // Delete one Customer
     * const Customer = await prisma.customer.delete({
     *   where: {
     *     // ... filter to delete one Customer
     *   }
     * })
     * 
     */
    delete<T extends CustomerDeleteArgs>(args: SelectSubset<T, CustomerDeleteArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Customer.
     * @param {CustomerUpdateArgs} args - Arguments to update one Customer.
     * @example
     * // Update one Customer
     * const customer = await prisma.customer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomerUpdateArgs>(args: SelectSubset<T, CustomerUpdateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Customers.
     * @param {CustomerDeleteManyArgs} args - Arguments to filter Customers to delete.
     * @example
     * // Delete a few Customers
     * const { count } = await prisma.customer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomerDeleteManyArgs>(args?: SelectSubset<T, CustomerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomerUpdateManyArgs>(args: SelectSubset<T, CustomerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers and returns the data updated in the database.
     * @param {CustomerUpdateManyAndReturnArgs} args - Arguments to update many Customers.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Customers and only return the `id`
     * const customerWithIdOnly = await prisma.customer.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CustomerUpdateManyAndReturnArgs>(args: SelectSubset<T, CustomerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Customer.
     * @param {CustomerUpsertArgs} args - Arguments to update or create a Customer.
     * @example
     * // Update or create a Customer
     * const customer = await prisma.customer.upsert({
     *   create: {
     *     // ... data to create a Customer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customer we want to update
     *   }
     * })
     */
    upsert<T extends CustomerUpsertArgs>(args: SelectSubset<T, CustomerUpsertArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerCountArgs} args - Arguments to filter Customers to count.
     * @example
     * // Count the number of Customers
     * const count = await prisma.customer.count({
     *   where: {
     *     // ... the filter for the Customers we want to count
     *   }
     * })
    **/
    count<T extends CustomerCountArgs>(
      args?: Subset<T, CustomerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerAggregateArgs>(args: Subset<T, CustomerAggregateArgs>): Prisma.PrismaPromise<GetCustomerAggregateType<T>>

    /**
     * Group by Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerGroupByArgs['orderBy'] }
        : { orderBy?: CustomerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Customer model
   */
  readonly fields: CustomerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Customer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    appointments<T extends Customer$appointmentsArgs<ExtArgs> = {}>(args?: Subset<T, Customer$appointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    logs<T extends Customer$logsArgs<ExtArgs> = {}>(args?: Subset<T, Customer$logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    contactRequests<T extends Customer$contactRequestsArgs<ExtArgs> = {}>(args?: Subset<T, Customer$contactRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Customer model
   */
  interface CustomerFieldRefs {
    readonly id: FieldRef<"Customer", 'Int'>
    readonly name: FieldRef<"Customer", 'String'>
    readonly company: FieldRef<"Customer", 'String'>
    readonly email: FieldRef<"Customer", 'String'>
    readonly phone: FieldRef<"Customer", 'String'>
    readonly address: FieldRef<"Customer", 'String'>
    readonly postalCode: FieldRef<"Customer", 'String'>
    readonly city: FieldRef<"Customer", 'String'>
    readonly country: FieldRef<"Customer", 'String'>
    readonly vatNumber: FieldRef<"Customer", 'String'>
    readonly notes: FieldRef<"Customer", 'String'>
    readonly newsletter: FieldRef<"Customer", 'Boolean'>
    readonly status: FieldRef<"Customer", 'String'>
    readonly type: FieldRef<"Customer", 'String'>
    readonly createdAt: FieldRef<"Customer", 'DateTime'>
    readonly updatedAt: FieldRef<"Customer", 'DateTime'>
    readonly createdBy: FieldRef<"Customer", 'Int'>
    readonly updatedBy: FieldRef<"Customer", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Customer findUnique
   */
  export type CustomerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findUniqueOrThrow
   */
  export type CustomerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findFirst
   */
  export type CustomerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findFirstOrThrow
   */
  export type CustomerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findMany
   */
  export type CustomerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customers to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer create
   */
  export type CustomerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to create a Customer.
     */
    data: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
  }

  /**
   * Customer createMany
   */
  export type CustomerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Customer createManyAndReturn
   */
  export type CustomerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Customer update
   */
  export type CustomerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to update a Customer.
     */
    data: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
    /**
     * Choose, which Customer to update.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer updateMany
   */
  export type CustomerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to update.
     */
    limit?: number
  }

  /**
   * Customer updateManyAndReturn
   */
  export type CustomerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to update.
     */
    limit?: number
  }

  /**
   * Customer upsert
   */
  export type CustomerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The filter to search for the Customer to update in case it exists.
     */
    where: CustomerWhereUniqueInput
    /**
     * In case the Customer found by the `where` argument doesn't exist, create a new Customer with this data.
     */
    create: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
    /**
     * In case the Customer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
  }

  /**
   * Customer delete
   */
  export type CustomerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter which Customer to delete.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer deleteMany
   */
  export type CustomerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customers to delete
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to delete.
     */
    limit?: number
  }

  /**
   * Customer.appointments
   */
  export type Customer$appointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Customer.logs
   */
  export type Customer$logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerLog
     */
    select?: CustomerLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerLog
     */
    omit?: CustomerLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerLogInclude<ExtArgs> | null
    where?: CustomerLogWhereInput
    orderBy?: CustomerLogOrderByWithRelationInput | CustomerLogOrderByWithRelationInput[]
    cursor?: CustomerLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerLogScalarFieldEnum | CustomerLogScalarFieldEnum[]
  }

  /**
   * Customer.contactRequests
   */
  export type Customer$contactRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactRequest
     */
    select?: ContactRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactRequest
     */
    omit?: ContactRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactRequestInclude<ExtArgs> | null
    where?: ContactRequestWhereInput
    orderBy?: ContactRequestOrderByWithRelationInput | ContactRequestOrderByWithRelationInput[]
    cursor?: ContactRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContactRequestScalarFieldEnum | ContactRequestScalarFieldEnum[]
  }

  /**
   * Customer without action
   */
  export type CustomerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
  }


  /**
   * Model CustomerLog
   */

  export type AggregateCustomerLog = {
    _count: CustomerLogCountAggregateOutputType | null
    _avg: CustomerLogAvgAggregateOutputType | null
    _sum: CustomerLogSumAggregateOutputType | null
    _min: CustomerLogMinAggregateOutputType | null
    _max: CustomerLogMaxAggregateOutputType | null
  }

  export type CustomerLogAvgAggregateOutputType = {
    id: number | null
    customerId: number | null
    userId: number | null
  }

  export type CustomerLogSumAggregateOutputType = {
    id: number | null
    customerId: number | null
    userId: number | null
  }

  export type CustomerLogMinAggregateOutputType = {
    id: number | null
    customerId: number | null
    userId: number | null
    userName: string | null
    action: string | null
    details: string | null
    createdAt: Date | null
  }

  export type CustomerLogMaxAggregateOutputType = {
    id: number | null
    customerId: number | null
    userId: number | null
    userName: string | null
    action: string | null
    details: string | null
    createdAt: Date | null
  }

  export type CustomerLogCountAggregateOutputType = {
    id: number
    customerId: number
    userId: number
    userName: number
    action: number
    details: number
    createdAt: number
    _all: number
  }


  export type CustomerLogAvgAggregateInputType = {
    id?: true
    customerId?: true
    userId?: true
  }

  export type CustomerLogSumAggregateInputType = {
    id?: true
    customerId?: true
    userId?: true
  }

  export type CustomerLogMinAggregateInputType = {
    id?: true
    customerId?: true
    userId?: true
    userName?: true
    action?: true
    details?: true
    createdAt?: true
  }

  export type CustomerLogMaxAggregateInputType = {
    id?: true
    customerId?: true
    userId?: true
    userName?: true
    action?: true
    details?: true
    createdAt?: true
  }

  export type CustomerLogCountAggregateInputType = {
    id?: true
    customerId?: true
    userId?: true
    userName?: true
    action?: true
    details?: true
    createdAt?: true
    _all?: true
  }

  export type CustomerLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomerLog to aggregate.
     */
    where?: CustomerLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerLogs to fetch.
     */
    orderBy?: CustomerLogOrderByWithRelationInput | CustomerLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CustomerLogs
    **/
    _count?: true | CustomerLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomerLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomerLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerLogMaxAggregateInputType
  }

  export type GetCustomerLogAggregateType<T extends CustomerLogAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomerLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomerLog[P]>
      : GetScalarType<T[P], AggregateCustomerLog[P]>
  }




  export type CustomerLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerLogWhereInput
    orderBy?: CustomerLogOrderByWithAggregationInput | CustomerLogOrderByWithAggregationInput[]
    by: CustomerLogScalarFieldEnum[] | CustomerLogScalarFieldEnum
    having?: CustomerLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerLogCountAggregateInputType | true
    _avg?: CustomerLogAvgAggregateInputType
    _sum?: CustomerLogSumAggregateInputType
    _min?: CustomerLogMinAggregateInputType
    _max?: CustomerLogMaxAggregateInputType
  }

  export type CustomerLogGroupByOutputType = {
    id: number
    customerId: number
    userId: number | null
    userName: string
    action: string
    details: string | null
    createdAt: Date
    _count: CustomerLogCountAggregateOutputType | null
    _avg: CustomerLogAvgAggregateOutputType | null
    _sum: CustomerLogSumAggregateOutputType | null
    _min: CustomerLogMinAggregateOutputType | null
    _max: CustomerLogMaxAggregateOutputType | null
  }

  type GetCustomerLogGroupByPayload<T extends CustomerLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerLogGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerLogGroupByOutputType[P]>
        }
      >
    >


  export type CustomerLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    userId?: boolean
    userName?: boolean
    action?: boolean
    details?: boolean
    createdAt?: boolean
    user?: boolean | CustomerLog$userArgs<ExtArgs>
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customerLog"]>

  export type CustomerLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    userId?: boolean
    userName?: boolean
    action?: boolean
    details?: boolean
    createdAt?: boolean
    user?: boolean | CustomerLog$userArgs<ExtArgs>
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customerLog"]>

  export type CustomerLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    userId?: boolean
    userName?: boolean
    action?: boolean
    details?: boolean
    createdAt?: boolean
    user?: boolean | CustomerLog$userArgs<ExtArgs>
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customerLog"]>

  export type CustomerLogSelectScalar = {
    id?: boolean
    customerId?: boolean
    userId?: boolean
    userName?: boolean
    action?: boolean
    details?: boolean
    createdAt?: boolean
  }

  export type CustomerLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "customerId" | "userId" | "userName" | "action" | "details" | "createdAt", ExtArgs["result"]["customerLog"]>
  export type CustomerLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | CustomerLog$userArgs<ExtArgs>
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }
  export type CustomerLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | CustomerLog$userArgs<ExtArgs>
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }
  export type CustomerLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | CustomerLog$userArgs<ExtArgs>
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }

  export type $CustomerLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CustomerLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      customer: Prisma.$CustomerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      customerId: number
      userId: number | null
      userName: string
      action: string
      details: string | null
      createdAt: Date
    }, ExtArgs["result"]["customerLog"]>
    composites: {}
  }

  type CustomerLogGetPayload<S extends boolean | null | undefined | CustomerLogDefaultArgs> = $Result.GetResult<Prisma.$CustomerLogPayload, S>

  type CustomerLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CustomerLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CustomerLogCountAggregateInputType | true
    }

  export interface CustomerLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CustomerLog'], meta: { name: 'CustomerLog' } }
    /**
     * Find zero or one CustomerLog that matches the filter.
     * @param {CustomerLogFindUniqueArgs} args - Arguments to find a CustomerLog
     * @example
     * // Get one CustomerLog
     * const customerLog = await prisma.customerLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomerLogFindUniqueArgs>(args: SelectSubset<T, CustomerLogFindUniqueArgs<ExtArgs>>): Prisma__CustomerLogClient<$Result.GetResult<Prisma.$CustomerLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CustomerLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CustomerLogFindUniqueOrThrowArgs} args - Arguments to find a CustomerLog
     * @example
     * // Get one CustomerLog
     * const customerLog = await prisma.customerLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomerLogFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomerLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomerLogClient<$Result.GetResult<Prisma.$CustomerLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CustomerLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerLogFindFirstArgs} args - Arguments to find a CustomerLog
     * @example
     * // Get one CustomerLog
     * const customerLog = await prisma.customerLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomerLogFindFirstArgs>(args?: SelectSubset<T, CustomerLogFindFirstArgs<ExtArgs>>): Prisma__CustomerLogClient<$Result.GetResult<Prisma.$CustomerLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CustomerLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerLogFindFirstOrThrowArgs} args - Arguments to find a CustomerLog
     * @example
     * // Get one CustomerLog
     * const customerLog = await prisma.customerLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomerLogFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomerLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomerLogClient<$Result.GetResult<Prisma.$CustomerLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CustomerLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CustomerLogs
     * const customerLogs = await prisma.customerLog.findMany()
     * 
     * // Get first 10 CustomerLogs
     * const customerLogs = await prisma.customerLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerLogWithIdOnly = await prisma.customerLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CustomerLogFindManyArgs>(args?: SelectSubset<T, CustomerLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CustomerLog.
     * @param {CustomerLogCreateArgs} args - Arguments to create a CustomerLog.
     * @example
     * // Create one CustomerLog
     * const CustomerLog = await prisma.customerLog.create({
     *   data: {
     *     // ... data to create a CustomerLog
     *   }
     * })
     * 
     */
    create<T extends CustomerLogCreateArgs>(args: SelectSubset<T, CustomerLogCreateArgs<ExtArgs>>): Prisma__CustomerLogClient<$Result.GetResult<Prisma.$CustomerLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CustomerLogs.
     * @param {CustomerLogCreateManyArgs} args - Arguments to create many CustomerLogs.
     * @example
     * // Create many CustomerLogs
     * const customerLog = await prisma.customerLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomerLogCreateManyArgs>(args?: SelectSubset<T, CustomerLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CustomerLogs and returns the data saved in the database.
     * @param {CustomerLogCreateManyAndReturnArgs} args - Arguments to create many CustomerLogs.
     * @example
     * // Create many CustomerLogs
     * const customerLog = await prisma.customerLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CustomerLogs and only return the `id`
     * const customerLogWithIdOnly = await prisma.customerLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CustomerLogCreateManyAndReturnArgs>(args?: SelectSubset<T, CustomerLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CustomerLog.
     * @param {CustomerLogDeleteArgs} args - Arguments to delete one CustomerLog.
     * @example
     * // Delete one CustomerLog
     * const CustomerLog = await prisma.customerLog.delete({
     *   where: {
     *     // ... filter to delete one CustomerLog
     *   }
     * })
     * 
     */
    delete<T extends CustomerLogDeleteArgs>(args: SelectSubset<T, CustomerLogDeleteArgs<ExtArgs>>): Prisma__CustomerLogClient<$Result.GetResult<Prisma.$CustomerLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CustomerLog.
     * @param {CustomerLogUpdateArgs} args - Arguments to update one CustomerLog.
     * @example
     * // Update one CustomerLog
     * const customerLog = await prisma.customerLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomerLogUpdateArgs>(args: SelectSubset<T, CustomerLogUpdateArgs<ExtArgs>>): Prisma__CustomerLogClient<$Result.GetResult<Prisma.$CustomerLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CustomerLogs.
     * @param {CustomerLogDeleteManyArgs} args - Arguments to filter CustomerLogs to delete.
     * @example
     * // Delete a few CustomerLogs
     * const { count } = await prisma.customerLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomerLogDeleteManyArgs>(args?: SelectSubset<T, CustomerLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CustomerLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CustomerLogs
     * const customerLog = await prisma.customerLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomerLogUpdateManyArgs>(args: SelectSubset<T, CustomerLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CustomerLogs and returns the data updated in the database.
     * @param {CustomerLogUpdateManyAndReturnArgs} args - Arguments to update many CustomerLogs.
     * @example
     * // Update many CustomerLogs
     * const customerLog = await prisma.customerLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CustomerLogs and only return the `id`
     * const customerLogWithIdOnly = await prisma.customerLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CustomerLogUpdateManyAndReturnArgs>(args: SelectSubset<T, CustomerLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CustomerLog.
     * @param {CustomerLogUpsertArgs} args - Arguments to update or create a CustomerLog.
     * @example
     * // Update or create a CustomerLog
     * const customerLog = await prisma.customerLog.upsert({
     *   create: {
     *     // ... data to create a CustomerLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CustomerLog we want to update
     *   }
     * })
     */
    upsert<T extends CustomerLogUpsertArgs>(args: SelectSubset<T, CustomerLogUpsertArgs<ExtArgs>>): Prisma__CustomerLogClient<$Result.GetResult<Prisma.$CustomerLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CustomerLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerLogCountArgs} args - Arguments to filter CustomerLogs to count.
     * @example
     * // Count the number of CustomerLogs
     * const count = await prisma.customerLog.count({
     *   where: {
     *     // ... the filter for the CustomerLogs we want to count
     *   }
     * })
    **/
    count<T extends CustomerLogCountArgs>(
      args?: Subset<T, CustomerLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CustomerLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerLogAggregateArgs>(args: Subset<T, CustomerLogAggregateArgs>): Prisma.PrismaPromise<GetCustomerLogAggregateType<T>>

    /**
     * Group by CustomerLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerLogGroupByArgs['orderBy'] }
        : { orderBy?: CustomerLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CustomerLog model
   */
  readonly fields: CustomerLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CustomerLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends CustomerLog$userArgs<ExtArgs> = {}>(args?: Subset<T, CustomerLog$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CustomerLog model
   */
  interface CustomerLogFieldRefs {
    readonly id: FieldRef<"CustomerLog", 'Int'>
    readonly customerId: FieldRef<"CustomerLog", 'Int'>
    readonly userId: FieldRef<"CustomerLog", 'Int'>
    readonly userName: FieldRef<"CustomerLog", 'String'>
    readonly action: FieldRef<"CustomerLog", 'String'>
    readonly details: FieldRef<"CustomerLog", 'String'>
    readonly createdAt: FieldRef<"CustomerLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CustomerLog findUnique
   */
  export type CustomerLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerLog
     */
    select?: CustomerLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerLog
     */
    omit?: CustomerLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerLogInclude<ExtArgs> | null
    /**
     * Filter, which CustomerLog to fetch.
     */
    where: CustomerLogWhereUniqueInput
  }

  /**
   * CustomerLog findUniqueOrThrow
   */
  export type CustomerLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerLog
     */
    select?: CustomerLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerLog
     */
    omit?: CustomerLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerLogInclude<ExtArgs> | null
    /**
     * Filter, which CustomerLog to fetch.
     */
    where: CustomerLogWhereUniqueInput
  }

  /**
   * CustomerLog findFirst
   */
  export type CustomerLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerLog
     */
    select?: CustomerLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerLog
     */
    omit?: CustomerLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerLogInclude<ExtArgs> | null
    /**
     * Filter, which CustomerLog to fetch.
     */
    where?: CustomerLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerLogs to fetch.
     */
    orderBy?: CustomerLogOrderByWithRelationInput | CustomerLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomerLogs.
     */
    cursor?: CustomerLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomerLogs.
     */
    distinct?: CustomerLogScalarFieldEnum | CustomerLogScalarFieldEnum[]
  }

  /**
   * CustomerLog findFirstOrThrow
   */
  export type CustomerLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerLog
     */
    select?: CustomerLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerLog
     */
    omit?: CustomerLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerLogInclude<ExtArgs> | null
    /**
     * Filter, which CustomerLog to fetch.
     */
    where?: CustomerLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerLogs to fetch.
     */
    orderBy?: CustomerLogOrderByWithRelationInput | CustomerLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomerLogs.
     */
    cursor?: CustomerLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomerLogs.
     */
    distinct?: CustomerLogScalarFieldEnum | CustomerLogScalarFieldEnum[]
  }

  /**
   * CustomerLog findMany
   */
  export type CustomerLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerLog
     */
    select?: CustomerLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerLog
     */
    omit?: CustomerLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerLogInclude<ExtArgs> | null
    /**
     * Filter, which CustomerLogs to fetch.
     */
    where?: CustomerLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerLogs to fetch.
     */
    orderBy?: CustomerLogOrderByWithRelationInput | CustomerLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CustomerLogs.
     */
    cursor?: CustomerLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerLogs.
     */
    skip?: number
    distinct?: CustomerLogScalarFieldEnum | CustomerLogScalarFieldEnum[]
  }

  /**
   * CustomerLog create
   */
  export type CustomerLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerLog
     */
    select?: CustomerLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerLog
     */
    omit?: CustomerLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerLogInclude<ExtArgs> | null
    /**
     * The data needed to create a CustomerLog.
     */
    data: XOR<CustomerLogCreateInput, CustomerLogUncheckedCreateInput>
  }

  /**
   * CustomerLog createMany
   */
  export type CustomerLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CustomerLogs.
     */
    data: CustomerLogCreateManyInput | CustomerLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CustomerLog createManyAndReturn
   */
  export type CustomerLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerLog
     */
    select?: CustomerLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerLog
     */
    omit?: CustomerLogOmit<ExtArgs> | null
    /**
     * The data used to create many CustomerLogs.
     */
    data: CustomerLogCreateManyInput | CustomerLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CustomerLog update
   */
  export type CustomerLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerLog
     */
    select?: CustomerLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerLog
     */
    omit?: CustomerLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerLogInclude<ExtArgs> | null
    /**
     * The data needed to update a CustomerLog.
     */
    data: XOR<CustomerLogUpdateInput, CustomerLogUncheckedUpdateInput>
    /**
     * Choose, which CustomerLog to update.
     */
    where: CustomerLogWhereUniqueInput
  }

  /**
   * CustomerLog updateMany
   */
  export type CustomerLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CustomerLogs.
     */
    data: XOR<CustomerLogUpdateManyMutationInput, CustomerLogUncheckedUpdateManyInput>
    /**
     * Filter which CustomerLogs to update
     */
    where?: CustomerLogWhereInput
    /**
     * Limit how many CustomerLogs to update.
     */
    limit?: number
  }

  /**
   * CustomerLog updateManyAndReturn
   */
  export type CustomerLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerLog
     */
    select?: CustomerLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerLog
     */
    omit?: CustomerLogOmit<ExtArgs> | null
    /**
     * The data used to update CustomerLogs.
     */
    data: XOR<CustomerLogUpdateManyMutationInput, CustomerLogUncheckedUpdateManyInput>
    /**
     * Filter which CustomerLogs to update
     */
    where?: CustomerLogWhereInput
    /**
     * Limit how many CustomerLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CustomerLog upsert
   */
  export type CustomerLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerLog
     */
    select?: CustomerLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerLog
     */
    omit?: CustomerLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerLogInclude<ExtArgs> | null
    /**
     * The filter to search for the CustomerLog to update in case it exists.
     */
    where: CustomerLogWhereUniqueInput
    /**
     * In case the CustomerLog found by the `where` argument doesn't exist, create a new CustomerLog with this data.
     */
    create: XOR<CustomerLogCreateInput, CustomerLogUncheckedCreateInput>
    /**
     * In case the CustomerLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerLogUpdateInput, CustomerLogUncheckedUpdateInput>
  }

  /**
   * CustomerLog delete
   */
  export type CustomerLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerLog
     */
    select?: CustomerLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerLog
     */
    omit?: CustomerLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerLogInclude<ExtArgs> | null
    /**
     * Filter which CustomerLog to delete.
     */
    where: CustomerLogWhereUniqueInput
  }

  /**
   * CustomerLog deleteMany
   */
  export type CustomerLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomerLogs to delete
     */
    where?: CustomerLogWhereInput
    /**
     * Limit how many CustomerLogs to delete.
     */
    limit?: number
  }

  /**
   * CustomerLog.user
   */
  export type CustomerLog$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * CustomerLog without action
   */
  export type CustomerLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerLog
     */
    select?: CustomerLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerLog
     */
    omit?: CustomerLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerLogInclude<ExtArgs> | null
  }


  /**
   * Model Appointment
   */

  export type AggregateAppointment = {
    _count: AppointmentCountAggregateOutputType | null
    _avg: AppointmentAvgAggregateOutputType | null
    _sum: AppointmentSumAggregateOutputType | null
    _min: AppointmentMinAggregateOutputType | null
    _max: AppointmentMaxAggregateOutputType | null
  }

  export type AppointmentAvgAggregateOutputType = {
    id: number | null
    customerId: number | null
    duration: number | null
    createdBy: number | null
  }

  export type AppointmentSumAggregateOutputType = {
    id: number | null
    customerId: number | null
    duration: number | null
    createdBy: number | null
  }

  export type AppointmentMinAggregateOutputType = {
    id: number | null
    title: string | null
    customerId: number | null
    appointmentDate: Date | null
    duration: number | null
    location: string | null
    description: string | null
    status: string | null
    createdBy: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AppointmentMaxAggregateOutputType = {
    id: number | null
    title: string | null
    customerId: number | null
    appointmentDate: Date | null
    duration: number | null
    location: string | null
    description: string | null
    status: string | null
    createdBy: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AppointmentCountAggregateOutputType = {
    id: number
    title: number
    customerId: number
    appointmentDate: number
    duration: number
    location: number
    description: number
    status: number
    createdBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AppointmentAvgAggregateInputType = {
    id?: true
    customerId?: true
    duration?: true
    createdBy?: true
  }

  export type AppointmentSumAggregateInputType = {
    id?: true
    customerId?: true
    duration?: true
    createdBy?: true
  }

  export type AppointmentMinAggregateInputType = {
    id?: true
    title?: true
    customerId?: true
    appointmentDate?: true
    duration?: true
    location?: true
    description?: true
    status?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AppointmentMaxAggregateInputType = {
    id?: true
    title?: true
    customerId?: true
    appointmentDate?: true
    duration?: true
    location?: true
    description?: true
    status?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AppointmentCountAggregateInputType = {
    id?: true
    title?: true
    customerId?: true
    appointmentDate?: true
    duration?: true
    location?: true
    description?: true
    status?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AppointmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Appointment to aggregate.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Appointments
    **/
    _count?: true | AppointmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AppointmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AppointmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppointmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppointmentMaxAggregateInputType
  }

  export type GetAppointmentAggregateType<T extends AppointmentAggregateArgs> = {
        [P in keyof T & keyof AggregateAppointment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAppointment[P]>
      : GetScalarType<T[P], AggregateAppointment[P]>
  }




  export type AppointmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithAggregationInput | AppointmentOrderByWithAggregationInput[]
    by: AppointmentScalarFieldEnum[] | AppointmentScalarFieldEnum
    having?: AppointmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppointmentCountAggregateInputType | true
    _avg?: AppointmentAvgAggregateInputType
    _sum?: AppointmentSumAggregateInputType
    _min?: AppointmentMinAggregateInputType
    _max?: AppointmentMaxAggregateInputType
  }

  export type AppointmentGroupByOutputType = {
    id: number
    title: string
    customerId: number | null
    appointmentDate: Date
    duration: number | null
    location: string | null
    description: string | null
    status: string
    createdBy: number | null
    createdAt: Date
    updatedAt: Date
    _count: AppointmentCountAggregateOutputType | null
    _avg: AppointmentAvgAggregateOutputType | null
    _sum: AppointmentSumAggregateOutputType | null
    _min: AppointmentMinAggregateOutputType | null
    _max: AppointmentMaxAggregateOutputType | null
  }

  type GetAppointmentGroupByPayload<T extends AppointmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AppointmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppointmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppointmentGroupByOutputType[P]>
            : GetScalarType<T[P], AppointmentGroupByOutputType[P]>
        }
      >
    >


  export type AppointmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    customerId?: boolean
    appointmentDate?: boolean
    duration?: boolean
    location?: boolean
    description?: boolean
    status?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | Appointment$customerArgs<ExtArgs>
    creator?: boolean | Appointment$creatorArgs<ExtArgs>
    notes?: boolean | Appointment$notesArgs<ExtArgs>
    logs?: boolean | Appointment$logsArgs<ExtArgs>
    contactRequests?: boolean | Appointment$contactRequestsArgs<ExtArgs>
    _count?: boolean | AppointmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appointment"]>

  export type AppointmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    customerId?: boolean
    appointmentDate?: boolean
    duration?: boolean
    location?: boolean
    description?: boolean
    status?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | Appointment$customerArgs<ExtArgs>
    creator?: boolean | Appointment$creatorArgs<ExtArgs>
  }, ExtArgs["result"]["appointment"]>

  export type AppointmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    customerId?: boolean
    appointmentDate?: boolean
    duration?: boolean
    location?: boolean
    description?: boolean
    status?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | Appointment$customerArgs<ExtArgs>
    creator?: boolean | Appointment$creatorArgs<ExtArgs>
  }, ExtArgs["result"]["appointment"]>

  export type AppointmentSelectScalar = {
    id?: boolean
    title?: boolean
    customerId?: boolean
    appointmentDate?: boolean
    duration?: boolean
    location?: boolean
    description?: boolean
    status?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AppointmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "customerId" | "appointmentDate" | "duration" | "location" | "description" | "status" | "createdBy" | "createdAt" | "updatedAt", ExtArgs["result"]["appointment"]>
  export type AppointmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | Appointment$customerArgs<ExtArgs>
    creator?: boolean | Appointment$creatorArgs<ExtArgs>
    notes?: boolean | Appointment$notesArgs<ExtArgs>
    logs?: boolean | Appointment$logsArgs<ExtArgs>
    contactRequests?: boolean | Appointment$contactRequestsArgs<ExtArgs>
    _count?: boolean | AppointmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AppointmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | Appointment$customerArgs<ExtArgs>
    creator?: boolean | Appointment$creatorArgs<ExtArgs>
  }
  export type AppointmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | Appointment$customerArgs<ExtArgs>
    creator?: boolean | Appointment$creatorArgs<ExtArgs>
  }

  export type $AppointmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Appointment"
    objects: {
      customer: Prisma.$CustomerPayload<ExtArgs> | null
      creator: Prisma.$UserPayload<ExtArgs> | null
      notes: Prisma.$AppointmentNotePayload<ExtArgs>[]
      logs: Prisma.$AppointmentLogPayload<ExtArgs>[]
      contactRequests: Prisma.$ContactRequestPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      customerId: number | null
      appointmentDate: Date
      duration: number | null
      location: string | null
      description: string | null
      status: string
      createdBy: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["appointment"]>
    composites: {}
  }

  type AppointmentGetPayload<S extends boolean | null | undefined | AppointmentDefaultArgs> = $Result.GetResult<Prisma.$AppointmentPayload, S>

  type AppointmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AppointmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AppointmentCountAggregateInputType | true
    }

  export interface AppointmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Appointment'], meta: { name: 'Appointment' } }
    /**
     * Find zero or one Appointment that matches the filter.
     * @param {AppointmentFindUniqueArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AppointmentFindUniqueArgs>(args: SelectSubset<T, AppointmentFindUniqueArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Appointment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AppointmentFindUniqueOrThrowArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AppointmentFindUniqueOrThrowArgs>(args: SelectSubset<T, AppointmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Appointment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindFirstArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AppointmentFindFirstArgs>(args?: SelectSubset<T, AppointmentFindFirstArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Appointment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindFirstOrThrowArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AppointmentFindFirstOrThrowArgs>(args?: SelectSubset<T, AppointmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Appointments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Appointments
     * const appointments = await prisma.appointment.findMany()
     * 
     * // Get first 10 Appointments
     * const appointments = await prisma.appointment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const appointmentWithIdOnly = await prisma.appointment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AppointmentFindManyArgs>(args?: SelectSubset<T, AppointmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Appointment.
     * @param {AppointmentCreateArgs} args - Arguments to create a Appointment.
     * @example
     * // Create one Appointment
     * const Appointment = await prisma.appointment.create({
     *   data: {
     *     // ... data to create a Appointment
     *   }
     * })
     * 
     */
    create<T extends AppointmentCreateArgs>(args: SelectSubset<T, AppointmentCreateArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Appointments.
     * @param {AppointmentCreateManyArgs} args - Arguments to create many Appointments.
     * @example
     * // Create many Appointments
     * const appointment = await prisma.appointment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AppointmentCreateManyArgs>(args?: SelectSubset<T, AppointmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Appointments and returns the data saved in the database.
     * @param {AppointmentCreateManyAndReturnArgs} args - Arguments to create many Appointments.
     * @example
     * // Create many Appointments
     * const appointment = await prisma.appointment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Appointments and only return the `id`
     * const appointmentWithIdOnly = await prisma.appointment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AppointmentCreateManyAndReturnArgs>(args?: SelectSubset<T, AppointmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Appointment.
     * @param {AppointmentDeleteArgs} args - Arguments to delete one Appointment.
     * @example
     * // Delete one Appointment
     * const Appointment = await prisma.appointment.delete({
     *   where: {
     *     // ... filter to delete one Appointment
     *   }
     * })
     * 
     */
    delete<T extends AppointmentDeleteArgs>(args: SelectSubset<T, AppointmentDeleteArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Appointment.
     * @param {AppointmentUpdateArgs} args - Arguments to update one Appointment.
     * @example
     * // Update one Appointment
     * const appointment = await prisma.appointment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AppointmentUpdateArgs>(args: SelectSubset<T, AppointmentUpdateArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Appointments.
     * @param {AppointmentDeleteManyArgs} args - Arguments to filter Appointments to delete.
     * @example
     * // Delete a few Appointments
     * const { count } = await prisma.appointment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AppointmentDeleteManyArgs>(args?: SelectSubset<T, AppointmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Appointments
     * const appointment = await prisma.appointment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AppointmentUpdateManyArgs>(args: SelectSubset<T, AppointmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Appointments and returns the data updated in the database.
     * @param {AppointmentUpdateManyAndReturnArgs} args - Arguments to update many Appointments.
     * @example
     * // Update many Appointments
     * const appointment = await prisma.appointment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Appointments and only return the `id`
     * const appointmentWithIdOnly = await prisma.appointment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AppointmentUpdateManyAndReturnArgs>(args: SelectSubset<T, AppointmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Appointment.
     * @param {AppointmentUpsertArgs} args - Arguments to update or create a Appointment.
     * @example
     * // Update or create a Appointment
     * const appointment = await prisma.appointment.upsert({
     *   create: {
     *     // ... data to create a Appointment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Appointment we want to update
     *   }
     * })
     */
    upsert<T extends AppointmentUpsertArgs>(args: SelectSubset<T, AppointmentUpsertArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentCountArgs} args - Arguments to filter Appointments to count.
     * @example
     * // Count the number of Appointments
     * const count = await prisma.appointment.count({
     *   where: {
     *     // ... the filter for the Appointments we want to count
     *   }
     * })
    **/
    count<T extends AppointmentCountArgs>(
      args?: Subset<T, AppointmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppointmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Appointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppointmentAggregateArgs>(args: Subset<T, AppointmentAggregateArgs>): Prisma.PrismaPromise<GetAppointmentAggregateType<T>>

    /**
     * Group by Appointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppointmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppointmentGroupByArgs['orderBy'] }
        : { orderBy?: AppointmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppointmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppointmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Appointment model
   */
  readonly fields: AppointmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Appointment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AppointmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends Appointment$customerArgs<ExtArgs> = {}>(args?: Subset<T, Appointment$customerArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    creator<T extends Appointment$creatorArgs<ExtArgs> = {}>(args?: Subset<T, Appointment$creatorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    notes<T extends Appointment$notesArgs<ExtArgs> = {}>(args?: Subset<T, Appointment$notesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentNotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    logs<T extends Appointment$logsArgs<ExtArgs> = {}>(args?: Subset<T, Appointment$logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    contactRequests<T extends Appointment$contactRequestsArgs<ExtArgs> = {}>(args?: Subset<T, Appointment$contactRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Appointment model
   */
  interface AppointmentFieldRefs {
    readonly id: FieldRef<"Appointment", 'Int'>
    readonly title: FieldRef<"Appointment", 'String'>
    readonly customerId: FieldRef<"Appointment", 'Int'>
    readonly appointmentDate: FieldRef<"Appointment", 'DateTime'>
    readonly duration: FieldRef<"Appointment", 'Int'>
    readonly location: FieldRef<"Appointment", 'String'>
    readonly description: FieldRef<"Appointment", 'String'>
    readonly status: FieldRef<"Appointment", 'String'>
    readonly createdBy: FieldRef<"Appointment", 'Int'>
    readonly createdAt: FieldRef<"Appointment", 'DateTime'>
    readonly updatedAt: FieldRef<"Appointment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Appointment findUnique
   */
  export type AppointmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment findUniqueOrThrow
   */
  export type AppointmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment findFirst
   */
  export type AppointmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Appointments.
     */
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Appointment findFirstOrThrow
   */
  export type AppointmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Appointments.
     */
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Appointment findMany
   */
  export type AppointmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointments to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Appointment create
   */
  export type AppointmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Appointment.
     */
    data: XOR<AppointmentCreateInput, AppointmentUncheckedCreateInput>
  }

  /**
   * Appointment createMany
   */
  export type AppointmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Appointments.
     */
    data: AppointmentCreateManyInput | AppointmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Appointment createManyAndReturn
   */
  export type AppointmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * The data used to create many Appointments.
     */
    data: AppointmentCreateManyInput | AppointmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Appointment update
   */
  export type AppointmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Appointment.
     */
    data: XOR<AppointmentUpdateInput, AppointmentUncheckedUpdateInput>
    /**
     * Choose, which Appointment to update.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment updateMany
   */
  export type AppointmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Appointments.
     */
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyInput>
    /**
     * Filter which Appointments to update
     */
    where?: AppointmentWhereInput
    /**
     * Limit how many Appointments to update.
     */
    limit?: number
  }

  /**
   * Appointment updateManyAndReturn
   */
  export type AppointmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * The data used to update Appointments.
     */
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyInput>
    /**
     * Filter which Appointments to update
     */
    where?: AppointmentWhereInput
    /**
     * Limit how many Appointments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Appointment upsert
   */
  export type AppointmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Appointment to update in case it exists.
     */
    where: AppointmentWhereUniqueInput
    /**
     * In case the Appointment found by the `where` argument doesn't exist, create a new Appointment with this data.
     */
    create: XOR<AppointmentCreateInput, AppointmentUncheckedCreateInput>
    /**
     * In case the Appointment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AppointmentUpdateInput, AppointmentUncheckedUpdateInput>
  }

  /**
   * Appointment delete
   */
  export type AppointmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter which Appointment to delete.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment deleteMany
   */
  export type AppointmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Appointments to delete
     */
    where?: AppointmentWhereInput
    /**
     * Limit how many Appointments to delete.
     */
    limit?: number
  }

  /**
   * Appointment.customer
   */
  export type Appointment$customerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    where?: CustomerWhereInput
  }

  /**
   * Appointment.creator
   */
  export type Appointment$creatorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Appointment.notes
   */
  export type Appointment$notesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentNote
     */
    select?: AppointmentNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppointmentNote
     */
    omit?: AppointmentNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentNoteInclude<ExtArgs> | null
    where?: AppointmentNoteWhereInput
    orderBy?: AppointmentNoteOrderByWithRelationInput | AppointmentNoteOrderByWithRelationInput[]
    cursor?: AppointmentNoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentNoteScalarFieldEnum | AppointmentNoteScalarFieldEnum[]
  }

  /**
   * Appointment.logs
   */
  export type Appointment$logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentLog
     */
    select?: AppointmentLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppointmentLog
     */
    omit?: AppointmentLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentLogInclude<ExtArgs> | null
    where?: AppointmentLogWhereInput
    orderBy?: AppointmentLogOrderByWithRelationInput | AppointmentLogOrderByWithRelationInput[]
    cursor?: AppointmentLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentLogScalarFieldEnum | AppointmentLogScalarFieldEnum[]
  }

  /**
   * Appointment.contactRequests
   */
  export type Appointment$contactRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactRequest
     */
    select?: ContactRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactRequest
     */
    omit?: ContactRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactRequestInclude<ExtArgs> | null
    where?: ContactRequestWhereInput
    orderBy?: ContactRequestOrderByWithRelationInput | ContactRequestOrderByWithRelationInput[]
    cursor?: ContactRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContactRequestScalarFieldEnum | ContactRequestScalarFieldEnum[]
  }

  /**
   * Appointment without action
   */
  export type AppointmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
  }


  /**
   * Model AppointmentNote
   */

  export type AggregateAppointmentNote = {
    _count: AppointmentNoteCountAggregateOutputType | null
    _avg: AppointmentNoteAvgAggregateOutputType | null
    _sum: AppointmentNoteSumAggregateOutputType | null
    _min: AppointmentNoteMinAggregateOutputType | null
    _max: AppointmentNoteMaxAggregateOutputType | null
  }

  export type AppointmentNoteAvgAggregateOutputType = {
    id: number | null
    appointmentId: number | null
    userId: number | null
  }

  export type AppointmentNoteSumAggregateOutputType = {
    id: number | null
    appointmentId: number | null
    userId: number | null
  }

  export type AppointmentNoteMinAggregateOutputType = {
    id: number | null
    appointmentId: number | null
    userId: number | null
    userName: string | null
    text: string | null
    createdAt: Date | null
  }

  export type AppointmentNoteMaxAggregateOutputType = {
    id: number | null
    appointmentId: number | null
    userId: number | null
    userName: string | null
    text: string | null
    createdAt: Date | null
  }

  export type AppointmentNoteCountAggregateOutputType = {
    id: number
    appointmentId: number
    userId: number
    userName: number
    text: number
    createdAt: number
    _all: number
  }


  export type AppointmentNoteAvgAggregateInputType = {
    id?: true
    appointmentId?: true
    userId?: true
  }

  export type AppointmentNoteSumAggregateInputType = {
    id?: true
    appointmentId?: true
    userId?: true
  }

  export type AppointmentNoteMinAggregateInputType = {
    id?: true
    appointmentId?: true
    userId?: true
    userName?: true
    text?: true
    createdAt?: true
  }

  export type AppointmentNoteMaxAggregateInputType = {
    id?: true
    appointmentId?: true
    userId?: true
    userName?: true
    text?: true
    createdAt?: true
  }

  export type AppointmentNoteCountAggregateInputType = {
    id?: true
    appointmentId?: true
    userId?: true
    userName?: true
    text?: true
    createdAt?: true
    _all?: true
  }

  export type AppointmentNoteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AppointmentNote to aggregate.
     */
    where?: AppointmentNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppointmentNotes to fetch.
     */
    orderBy?: AppointmentNoteOrderByWithRelationInput | AppointmentNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AppointmentNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppointmentNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppointmentNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AppointmentNotes
    **/
    _count?: true | AppointmentNoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AppointmentNoteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AppointmentNoteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppointmentNoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppointmentNoteMaxAggregateInputType
  }

  export type GetAppointmentNoteAggregateType<T extends AppointmentNoteAggregateArgs> = {
        [P in keyof T & keyof AggregateAppointmentNote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAppointmentNote[P]>
      : GetScalarType<T[P], AggregateAppointmentNote[P]>
  }




  export type AppointmentNoteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentNoteWhereInput
    orderBy?: AppointmentNoteOrderByWithAggregationInput | AppointmentNoteOrderByWithAggregationInput[]
    by: AppointmentNoteScalarFieldEnum[] | AppointmentNoteScalarFieldEnum
    having?: AppointmentNoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppointmentNoteCountAggregateInputType | true
    _avg?: AppointmentNoteAvgAggregateInputType
    _sum?: AppointmentNoteSumAggregateInputType
    _min?: AppointmentNoteMinAggregateInputType
    _max?: AppointmentNoteMaxAggregateInputType
  }

  export type AppointmentNoteGroupByOutputType = {
    id: number
    appointmentId: number
    userId: number
    userName: string
    text: string
    createdAt: Date
    _count: AppointmentNoteCountAggregateOutputType | null
    _avg: AppointmentNoteAvgAggregateOutputType | null
    _sum: AppointmentNoteSumAggregateOutputType | null
    _min: AppointmentNoteMinAggregateOutputType | null
    _max: AppointmentNoteMaxAggregateOutputType | null
  }

  type GetAppointmentNoteGroupByPayload<T extends AppointmentNoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AppointmentNoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppointmentNoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppointmentNoteGroupByOutputType[P]>
            : GetScalarType<T[P], AppointmentNoteGroupByOutputType[P]>
        }
      >
    >


  export type AppointmentNoteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    appointmentId?: boolean
    userId?: boolean
    userName?: boolean
    text?: boolean
    createdAt?: boolean
    appointment?: boolean | AppointmentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appointmentNote"]>

  export type AppointmentNoteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    appointmentId?: boolean
    userId?: boolean
    userName?: boolean
    text?: boolean
    createdAt?: boolean
    appointment?: boolean | AppointmentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appointmentNote"]>

  export type AppointmentNoteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    appointmentId?: boolean
    userId?: boolean
    userName?: boolean
    text?: boolean
    createdAt?: boolean
    appointment?: boolean | AppointmentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appointmentNote"]>

  export type AppointmentNoteSelectScalar = {
    id?: boolean
    appointmentId?: boolean
    userId?: boolean
    userName?: boolean
    text?: boolean
    createdAt?: boolean
  }

  export type AppointmentNoteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "appointmentId" | "userId" | "userName" | "text" | "createdAt", ExtArgs["result"]["appointmentNote"]>
  export type AppointmentNoteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    appointment?: boolean | AppointmentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AppointmentNoteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    appointment?: boolean | AppointmentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AppointmentNoteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    appointment?: boolean | AppointmentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AppointmentNotePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AppointmentNote"
    objects: {
      appointment: Prisma.$AppointmentPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      appointmentId: number
      userId: number
      userName: string
      text: string
      createdAt: Date
    }, ExtArgs["result"]["appointmentNote"]>
    composites: {}
  }

  type AppointmentNoteGetPayload<S extends boolean | null | undefined | AppointmentNoteDefaultArgs> = $Result.GetResult<Prisma.$AppointmentNotePayload, S>

  type AppointmentNoteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AppointmentNoteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AppointmentNoteCountAggregateInputType | true
    }

  export interface AppointmentNoteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AppointmentNote'], meta: { name: 'AppointmentNote' } }
    /**
     * Find zero or one AppointmentNote that matches the filter.
     * @param {AppointmentNoteFindUniqueArgs} args - Arguments to find a AppointmentNote
     * @example
     * // Get one AppointmentNote
     * const appointmentNote = await prisma.appointmentNote.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AppointmentNoteFindUniqueArgs>(args: SelectSubset<T, AppointmentNoteFindUniqueArgs<ExtArgs>>): Prisma__AppointmentNoteClient<$Result.GetResult<Prisma.$AppointmentNotePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AppointmentNote that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AppointmentNoteFindUniqueOrThrowArgs} args - Arguments to find a AppointmentNote
     * @example
     * // Get one AppointmentNote
     * const appointmentNote = await prisma.appointmentNote.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AppointmentNoteFindUniqueOrThrowArgs>(args: SelectSubset<T, AppointmentNoteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AppointmentNoteClient<$Result.GetResult<Prisma.$AppointmentNotePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AppointmentNote that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentNoteFindFirstArgs} args - Arguments to find a AppointmentNote
     * @example
     * // Get one AppointmentNote
     * const appointmentNote = await prisma.appointmentNote.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AppointmentNoteFindFirstArgs>(args?: SelectSubset<T, AppointmentNoteFindFirstArgs<ExtArgs>>): Prisma__AppointmentNoteClient<$Result.GetResult<Prisma.$AppointmentNotePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AppointmentNote that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentNoteFindFirstOrThrowArgs} args - Arguments to find a AppointmentNote
     * @example
     * // Get one AppointmentNote
     * const appointmentNote = await prisma.appointmentNote.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AppointmentNoteFindFirstOrThrowArgs>(args?: SelectSubset<T, AppointmentNoteFindFirstOrThrowArgs<ExtArgs>>): Prisma__AppointmentNoteClient<$Result.GetResult<Prisma.$AppointmentNotePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AppointmentNotes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentNoteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AppointmentNotes
     * const appointmentNotes = await prisma.appointmentNote.findMany()
     * 
     * // Get first 10 AppointmentNotes
     * const appointmentNotes = await prisma.appointmentNote.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const appointmentNoteWithIdOnly = await prisma.appointmentNote.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AppointmentNoteFindManyArgs>(args?: SelectSubset<T, AppointmentNoteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentNotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AppointmentNote.
     * @param {AppointmentNoteCreateArgs} args - Arguments to create a AppointmentNote.
     * @example
     * // Create one AppointmentNote
     * const AppointmentNote = await prisma.appointmentNote.create({
     *   data: {
     *     // ... data to create a AppointmentNote
     *   }
     * })
     * 
     */
    create<T extends AppointmentNoteCreateArgs>(args: SelectSubset<T, AppointmentNoteCreateArgs<ExtArgs>>): Prisma__AppointmentNoteClient<$Result.GetResult<Prisma.$AppointmentNotePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AppointmentNotes.
     * @param {AppointmentNoteCreateManyArgs} args - Arguments to create many AppointmentNotes.
     * @example
     * // Create many AppointmentNotes
     * const appointmentNote = await prisma.appointmentNote.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AppointmentNoteCreateManyArgs>(args?: SelectSubset<T, AppointmentNoteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AppointmentNotes and returns the data saved in the database.
     * @param {AppointmentNoteCreateManyAndReturnArgs} args - Arguments to create many AppointmentNotes.
     * @example
     * // Create many AppointmentNotes
     * const appointmentNote = await prisma.appointmentNote.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AppointmentNotes and only return the `id`
     * const appointmentNoteWithIdOnly = await prisma.appointmentNote.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AppointmentNoteCreateManyAndReturnArgs>(args?: SelectSubset<T, AppointmentNoteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentNotePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AppointmentNote.
     * @param {AppointmentNoteDeleteArgs} args - Arguments to delete one AppointmentNote.
     * @example
     * // Delete one AppointmentNote
     * const AppointmentNote = await prisma.appointmentNote.delete({
     *   where: {
     *     // ... filter to delete one AppointmentNote
     *   }
     * })
     * 
     */
    delete<T extends AppointmentNoteDeleteArgs>(args: SelectSubset<T, AppointmentNoteDeleteArgs<ExtArgs>>): Prisma__AppointmentNoteClient<$Result.GetResult<Prisma.$AppointmentNotePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AppointmentNote.
     * @param {AppointmentNoteUpdateArgs} args - Arguments to update one AppointmentNote.
     * @example
     * // Update one AppointmentNote
     * const appointmentNote = await prisma.appointmentNote.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AppointmentNoteUpdateArgs>(args: SelectSubset<T, AppointmentNoteUpdateArgs<ExtArgs>>): Prisma__AppointmentNoteClient<$Result.GetResult<Prisma.$AppointmentNotePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AppointmentNotes.
     * @param {AppointmentNoteDeleteManyArgs} args - Arguments to filter AppointmentNotes to delete.
     * @example
     * // Delete a few AppointmentNotes
     * const { count } = await prisma.appointmentNote.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AppointmentNoteDeleteManyArgs>(args?: SelectSubset<T, AppointmentNoteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AppointmentNotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentNoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AppointmentNotes
     * const appointmentNote = await prisma.appointmentNote.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AppointmentNoteUpdateManyArgs>(args: SelectSubset<T, AppointmentNoteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AppointmentNotes and returns the data updated in the database.
     * @param {AppointmentNoteUpdateManyAndReturnArgs} args - Arguments to update many AppointmentNotes.
     * @example
     * // Update many AppointmentNotes
     * const appointmentNote = await prisma.appointmentNote.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AppointmentNotes and only return the `id`
     * const appointmentNoteWithIdOnly = await prisma.appointmentNote.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AppointmentNoteUpdateManyAndReturnArgs>(args: SelectSubset<T, AppointmentNoteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentNotePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AppointmentNote.
     * @param {AppointmentNoteUpsertArgs} args - Arguments to update or create a AppointmentNote.
     * @example
     * // Update or create a AppointmentNote
     * const appointmentNote = await prisma.appointmentNote.upsert({
     *   create: {
     *     // ... data to create a AppointmentNote
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AppointmentNote we want to update
     *   }
     * })
     */
    upsert<T extends AppointmentNoteUpsertArgs>(args: SelectSubset<T, AppointmentNoteUpsertArgs<ExtArgs>>): Prisma__AppointmentNoteClient<$Result.GetResult<Prisma.$AppointmentNotePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AppointmentNotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentNoteCountArgs} args - Arguments to filter AppointmentNotes to count.
     * @example
     * // Count the number of AppointmentNotes
     * const count = await prisma.appointmentNote.count({
     *   where: {
     *     // ... the filter for the AppointmentNotes we want to count
     *   }
     * })
    **/
    count<T extends AppointmentNoteCountArgs>(
      args?: Subset<T, AppointmentNoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppointmentNoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AppointmentNote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentNoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppointmentNoteAggregateArgs>(args: Subset<T, AppointmentNoteAggregateArgs>): Prisma.PrismaPromise<GetAppointmentNoteAggregateType<T>>

    /**
     * Group by AppointmentNote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentNoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppointmentNoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppointmentNoteGroupByArgs['orderBy'] }
        : { orderBy?: AppointmentNoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppointmentNoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppointmentNoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AppointmentNote model
   */
  readonly fields: AppointmentNoteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AppointmentNote.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AppointmentNoteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    appointment<T extends AppointmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AppointmentDefaultArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AppointmentNote model
   */
  interface AppointmentNoteFieldRefs {
    readonly id: FieldRef<"AppointmentNote", 'Int'>
    readonly appointmentId: FieldRef<"AppointmentNote", 'Int'>
    readonly userId: FieldRef<"AppointmentNote", 'Int'>
    readonly userName: FieldRef<"AppointmentNote", 'String'>
    readonly text: FieldRef<"AppointmentNote", 'String'>
    readonly createdAt: FieldRef<"AppointmentNote", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AppointmentNote findUnique
   */
  export type AppointmentNoteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentNote
     */
    select?: AppointmentNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppointmentNote
     */
    omit?: AppointmentNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentNoteInclude<ExtArgs> | null
    /**
     * Filter, which AppointmentNote to fetch.
     */
    where: AppointmentNoteWhereUniqueInput
  }

  /**
   * AppointmentNote findUniqueOrThrow
   */
  export type AppointmentNoteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentNote
     */
    select?: AppointmentNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppointmentNote
     */
    omit?: AppointmentNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentNoteInclude<ExtArgs> | null
    /**
     * Filter, which AppointmentNote to fetch.
     */
    where: AppointmentNoteWhereUniqueInput
  }

  /**
   * AppointmentNote findFirst
   */
  export type AppointmentNoteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentNote
     */
    select?: AppointmentNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppointmentNote
     */
    omit?: AppointmentNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentNoteInclude<ExtArgs> | null
    /**
     * Filter, which AppointmentNote to fetch.
     */
    where?: AppointmentNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppointmentNotes to fetch.
     */
    orderBy?: AppointmentNoteOrderByWithRelationInput | AppointmentNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AppointmentNotes.
     */
    cursor?: AppointmentNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppointmentNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppointmentNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AppointmentNotes.
     */
    distinct?: AppointmentNoteScalarFieldEnum | AppointmentNoteScalarFieldEnum[]
  }

  /**
   * AppointmentNote findFirstOrThrow
   */
  export type AppointmentNoteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentNote
     */
    select?: AppointmentNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppointmentNote
     */
    omit?: AppointmentNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentNoteInclude<ExtArgs> | null
    /**
     * Filter, which AppointmentNote to fetch.
     */
    where?: AppointmentNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppointmentNotes to fetch.
     */
    orderBy?: AppointmentNoteOrderByWithRelationInput | AppointmentNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AppointmentNotes.
     */
    cursor?: AppointmentNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppointmentNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppointmentNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AppointmentNotes.
     */
    distinct?: AppointmentNoteScalarFieldEnum | AppointmentNoteScalarFieldEnum[]
  }

  /**
   * AppointmentNote findMany
   */
  export type AppointmentNoteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentNote
     */
    select?: AppointmentNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppointmentNote
     */
    omit?: AppointmentNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentNoteInclude<ExtArgs> | null
    /**
     * Filter, which AppointmentNotes to fetch.
     */
    where?: AppointmentNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppointmentNotes to fetch.
     */
    orderBy?: AppointmentNoteOrderByWithRelationInput | AppointmentNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AppointmentNotes.
     */
    cursor?: AppointmentNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppointmentNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppointmentNotes.
     */
    skip?: number
    distinct?: AppointmentNoteScalarFieldEnum | AppointmentNoteScalarFieldEnum[]
  }

  /**
   * AppointmentNote create
   */
  export type AppointmentNoteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentNote
     */
    select?: AppointmentNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppointmentNote
     */
    omit?: AppointmentNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentNoteInclude<ExtArgs> | null
    /**
     * The data needed to create a AppointmentNote.
     */
    data: XOR<AppointmentNoteCreateInput, AppointmentNoteUncheckedCreateInput>
  }

  /**
   * AppointmentNote createMany
   */
  export type AppointmentNoteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AppointmentNotes.
     */
    data: AppointmentNoteCreateManyInput | AppointmentNoteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AppointmentNote createManyAndReturn
   */
  export type AppointmentNoteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentNote
     */
    select?: AppointmentNoteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AppointmentNote
     */
    omit?: AppointmentNoteOmit<ExtArgs> | null
    /**
     * The data used to create many AppointmentNotes.
     */
    data: AppointmentNoteCreateManyInput | AppointmentNoteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentNoteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AppointmentNote update
   */
  export type AppointmentNoteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentNote
     */
    select?: AppointmentNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppointmentNote
     */
    omit?: AppointmentNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentNoteInclude<ExtArgs> | null
    /**
     * The data needed to update a AppointmentNote.
     */
    data: XOR<AppointmentNoteUpdateInput, AppointmentNoteUncheckedUpdateInput>
    /**
     * Choose, which AppointmentNote to update.
     */
    where: AppointmentNoteWhereUniqueInput
  }

  /**
   * AppointmentNote updateMany
   */
  export type AppointmentNoteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AppointmentNotes.
     */
    data: XOR<AppointmentNoteUpdateManyMutationInput, AppointmentNoteUncheckedUpdateManyInput>
    /**
     * Filter which AppointmentNotes to update
     */
    where?: AppointmentNoteWhereInput
    /**
     * Limit how many AppointmentNotes to update.
     */
    limit?: number
  }

  /**
   * AppointmentNote updateManyAndReturn
   */
  export type AppointmentNoteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentNote
     */
    select?: AppointmentNoteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AppointmentNote
     */
    omit?: AppointmentNoteOmit<ExtArgs> | null
    /**
     * The data used to update AppointmentNotes.
     */
    data: XOR<AppointmentNoteUpdateManyMutationInput, AppointmentNoteUncheckedUpdateManyInput>
    /**
     * Filter which AppointmentNotes to update
     */
    where?: AppointmentNoteWhereInput
    /**
     * Limit how many AppointmentNotes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentNoteIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AppointmentNote upsert
   */
  export type AppointmentNoteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentNote
     */
    select?: AppointmentNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppointmentNote
     */
    omit?: AppointmentNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentNoteInclude<ExtArgs> | null
    /**
     * The filter to search for the AppointmentNote to update in case it exists.
     */
    where: AppointmentNoteWhereUniqueInput
    /**
     * In case the AppointmentNote found by the `where` argument doesn't exist, create a new AppointmentNote with this data.
     */
    create: XOR<AppointmentNoteCreateInput, AppointmentNoteUncheckedCreateInput>
    /**
     * In case the AppointmentNote was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AppointmentNoteUpdateInput, AppointmentNoteUncheckedUpdateInput>
  }

  /**
   * AppointmentNote delete
   */
  export type AppointmentNoteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentNote
     */
    select?: AppointmentNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppointmentNote
     */
    omit?: AppointmentNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentNoteInclude<ExtArgs> | null
    /**
     * Filter which AppointmentNote to delete.
     */
    where: AppointmentNoteWhereUniqueInput
  }

  /**
   * AppointmentNote deleteMany
   */
  export type AppointmentNoteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AppointmentNotes to delete
     */
    where?: AppointmentNoteWhereInput
    /**
     * Limit how many AppointmentNotes to delete.
     */
    limit?: number
  }

  /**
   * AppointmentNote without action
   */
  export type AppointmentNoteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentNote
     */
    select?: AppointmentNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppointmentNote
     */
    omit?: AppointmentNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentNoteInclude<ExtArgs> | null
  }


  /**
   * Model AppointmentLog
   */

  export type AggregateAppointmentLog = {
    _count: AppointmentLogCountAggregateOutputType | null
    _avg: AppointmentLogAvgAggregateOutputType | null
    _sum: AppointmentLogSumAggregateOutputType | null
    _min: AppointmentLogMinAggregateOutputType | null
    _max: AppointmentLogMaxAggregateOutputType | null
  }

  export type AppointmentLogAvgAggregateOutputType = {
    id: number | null
    appointmentId: number | null
    userId: number | null
  }

  export type AppointmentLogSumAggregateOutputType = {
    id: number | null
    appointmentId: number | null
    userId: number | null
  }

  export type AppointmentLogMinAggregateOutputType = {
    id: number | null
    appointmentId: number | null
    userId: number | null
    userName: string | null
    action: string | null
    details: string | null
    createdAt: Date | null
  }

  export type AppointmentLogMaxAggregateOutputType = {
    id: number | null
    appointmentId: number | null
    userId: number | null
    userName: string | null
    action: string | null
    details: string | null
    createdAt: Date | null
  }

  export type AppointmentLogCountAggregateOutputType = {
    id: number
    appointmentId: number
    userId: number
    userName: number
    action: number
    details: number
    createdAt: number
    _all: number
  }


  export type AppointmentLogAvgAggregateInputType = {
    id?: true
    appointmentId?: true
    userId?: true
  }

  export type AppointmentLogSumAggregateInputType = {
    id?: true
    appointmentId?: true
    userId?: true
  }

  export type AppointmentLogMinAggregateInputType = {
    id?: true
    appointmentId?: true
    userId?: true
    userName?: true
    action?: true
    details?: true
    createdAt?: true
  }

  export type AppointmentLogMaxAggregateInputType = {
    id?: true
    appointmentId?: true
    userId?: true
    userName?: true
    action?: true
    details?: true
    createdAt?: true
  }

  export type AppointmentLogCountAggregateInputType = {
    id?: true
    appointmentId?: true
    userId?: true
    userName?: true
    action?: true
    details?: true
    createdAt?: true
    _all?: true
  }

  export type AppointmentLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AppointmentLog to aggregate.
     */
    where?: AppointmentLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppointmentLogs to fetch.
     */
    orderBy?: AppointmentLogOrderByWithRelationInput | AppointmentLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AppointmentLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppointmentLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppointmentLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AppointmentLogs
    **/
    _count?: true | AppointmentLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AppointmentLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AppointmentLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppointmentLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppointmentLogMaxAggregateInputType
  }

  export type GetAppointmentLogAggregateType<T extends AppointmentLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAppointmentLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAppointmentLog[P]>
      : GetScalarType<T[P], AggregateAppointmentLog[P]>
  }




  export type AppointmentLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentLogWhereInput
    orderBy?: AppointmentLogOrderByWithAggregationInput | AppointmentLogOrderByWithAggregationInput[]
    by: AppointmentLogScalarFieldEnum[] | AppointmentLogScalarFieldEnum
    having?: AppointmentLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppointmentLogCountAggregateInputType | true
    _avg?: AppointmentLogAvgAggregateInputType
    _sum?: AppointmentLogSumAggregateInputType
    _min?: AppointmentLogMinAggregateInputType
    _max?: AppointmentLogMaxAggregateInputType
  }

  export type AppointmentLogGroupByOutputType = {
    id: number
    appointmentId: number
    userId: number
    userName: string
    action: string
    details: string | null
    createdAt: Date
    _count: AppointmentLogCountAggregateOutputType | null
    _avg: AppointmentLogAvgAggregateOutputType | null
    _sum: AppointmentLogSumAggregateOutputType | null
    _min: AppointmentLogMinAggregateOutputType | null
    _max: AppointmentLogMaxAggregateOutputType | null
  }

  type GetAppointmentLogGroupByPayload<T extends AppointmentLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AppointmentLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppointmentLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppointmentLogGroupByOutputType[P]>
            : GetScalarType<T[P], AppointmentLogGroupByOutputType[P]>
        }
      >
    >


  export type AppointmentLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    appointmentId?: boolean
    userId?: boolean
    userName?: boolean
    action?: boolean
    details?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    appointment?: boolean | AppointmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appointmentLog"]>

  export type AppointmentLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    appointmentId?: boolean
    userId?: boolean
    userName?: boolean
    action?: boolean
    details?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    appointment?: boolean | AppointmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appointmentLog"]>

  export type AppointmentLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    appointmentId?: boolean
    userId?: boolean
    userName?: boolean
    action?: boolean
    details?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    appointment?: boolean | AppointmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appointmentLog"]>

  export type AppointmentLogSelectScalar = {
    id?: boolean
    appointmentId?: boolean
    userId?: boolean
    userName?: boolean
    action?: boolean
    details?: boolean
    createdAt?: boolean
  }

  export type AppointmentLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "appointmentId" | "userId" | "userName" | "action" | "details" | "createdAt", ExtArgs["result"]["appointmentLog"]>
  export type AppointmentLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    appointment?: boolean | AppointmentDefaultArgs<ExtArgs>
  }
  export type AppointmentLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    appointment?: boolean | AppointmentDefaultArgs<ExtArgs>
  }
  export type AppointmentLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    appointment?: boolean | AppointmentDefaultArgs<ExtArgs>
  }

  export type $AppointmentLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AppointmentLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      appointment: Prisma.$AppointmentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      appointmentId: number
      userId: number
      userName: string
      action: string
      details: string | null
      createdAt: Date
    }, ExtArgs["result"]["appointmentLog"]>
    composites: {}
  }

  type AppointmentLogGetPayload<S extends boolean | null | undefined | AppointmentLogDefaultArgs> = $Result.GetResult<Prisma.$AppointmentLogPayload, S>

  type AppointmentLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AppointmentLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AppointmentLogCountAggregateInputType | true
    }

  export interface AppointmentLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AppointmentLog'], meta: { name: 'AppointmentLog' } }
    /**
     * Find zero or one AppointmentLog that matches the filter.
     * @param {AppointmentLogFindUniqueArgs} args - Arguments to find a AppointmentLog
     * @example
     * // Get one AppointmentLog
     * const appointmentLog = await prisma.appointmentLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AppointmentLogFindUniqueArgs>(args: SelectSubset<T, AppointmentLogFindUniqueArgs<ExtArgs>>): Prisma__AppointmentLogClient<$Result.GetResult<Prisma.$AppointmentLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AppointmentLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AppointmentLogFindUniqueOrThrowArgs} args - Arguments to find a AppointmentLog
     * @example
     * // Get one AppointmentLog
     * const appointmentLog = await prisma.appointmentLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AppointmentLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AppointmentLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AppointmentLogClient<$Result.GetResult<Prisma.$AppointmentLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AppointmentLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentLogFindFirstArgs} args - Arguments to find a AppointmentLog
     * @example
     * // Get one AppointmentLog
     * const appointmentLog = await prisma.appointmentLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AppointmentLogFindFirstArgs>(args?: SelectSubset<T, AppointmentLogFindFirstArgs<ExtArgs>>): Prisma__AppointmentLogClient<$Result.GetResult<Prisma.$AppointmentLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AppointmentLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentLogFindFirstOrThrowArgs} args - Arguments to find a AppointmentLog
     * @example
     * // Get one AppointmentLog
     * const appointmentLog = await prisma.appointmentLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AppointmentLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AppointmentLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AppointmentLogClient<$Result.GetResult<Prisma.$AppointmentLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AppointmentLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AppointmentLogs
     * const appointmentLogs = await prisma.appointmentLog.findMany()
     * 
     * // Get first 10 AppointmentLogs
     * const appointmentLogs = await prisma.appointmentLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const appointmentLogWithIdOnly = await prisma.appointmentLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AppointmentLogFindManyArgs>(args?: SelectSubset<T, AppointmentLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AppointmentLog.
     * @param {AppointmentLogCreateArgs} args - Arguments to create a AppointmentLog.
     * @example
     * // Create one AppointmentLog
     * const AppointmentLog = await prisma.appointmentLog.create({
     *   data: {
     *     // ... data to create a AppointmentLog
     *   }
     * })
     * 
     */
    create<T extends AppointmentLogCreateArgs>(args: SelectSubset<T, AppointmentLogCreateArgs<ExtArgs>>): Prisma__AppointmentLogClient<$Result.GetResult<Prisma.$AppointmentLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AppointmentLogs.
     * @param {AppointmentLogCreateManyArgs} args - Arguments to create many AppointmentLogs.
     * @example
     * // Create many AppointmentLogs
     * const appointmentLog = await prisma.appointmentLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AppointmentLogCreateManyArgs>(args?: SelectSubset<T, AppointmentLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AppointmentLogs and returns the data saved in the database.
     * @param {AppointmentLogCreateManyAndReturnArgs} args - Arguments to create many AppointmentLogs.
     * @example
     * // Create many AppointmentLogs
     * const appointmentLog = await prisma.appointmentLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AppointmentLogs and only return the `id`
     * const appointmentLogWithIdOnly = await prisma.appointmentLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AppointmentLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AppointmentLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AppointmentLog.
     * @param {AppointmentLogDeleteArgs} args - Arguments to delete one AppointmentLog.
     * @example
     * // Delete one AppointmentLog
     * const AppointmentLog = await prisma.appointmentLog.delete({
     *   where: {
     *     // ... filter to delete one AppointmentLog
     *   }
     * })
     * 
     */
    delete<T extends AppointmentLogDeleteArgs>(args: SelectSubset<T, AppointmentLogDeleteArgs<ExtArgs>>): Prisma__AppointmentLogClient<$Result.GetResult<Prisma.$AppointmentLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AppointmentLog.
     * @param {AppointmentLogUpdateArgs} args - Arguments to update one AppointmentLog.
     * @example
     * // Update one AppointmentLog
     * const appointmentLog = await prisma.appointmentLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AppointmentLogUpdateArgs>(args: SelectSubset<T, AppointmentLogUpdateArgs<ExtArgs>>): Prisma__AppointmentLogClient<$Result.GetResult<Prisma.$AppointmentLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AppointmentLogs.
     * @param {AppointmentLogDeleteManyArgs} args - Arguments to filter AppointmentLogs to delete.
     * @example
     * // Delete a few AppointmentLogs
     * const { count } = await prisma.appointmentLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AppointmentLogDeleteManyArgs>(args?: SelectSubset<T, AppointmentLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AppointmentLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AppointmentLogs
     * const appointmentLog = await prisma.appointmentLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AppointmentLogUpdateManyArgs>(args: SelectSubset<T, AppointmentLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AppointmentLogs and returns the data updated in the database.
     * @param {AppointmentLogUpdateManyAndReturnArgs} args - Arguments to update many AppointmentLogs.
     * @example
     * // Update many AppointmentLogs
     * const appointmentLog = await prisma.appointmentLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AppointmentLogs and only return the `id`
     * const appointmentLogWithIdOnly = await prisma.appointmentLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AppointmentLogUpdateManyAndReturnArgs>(args: SelectSubset<T, AppointmentLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AppointmentLog.
     * @param {AppointmentLogUpsertArgs} args - Arguments to update or create a AppointmentLog.
     * @example
     * // Update or create a AppointmentLog
     * const appointmentLog = await prisma.appointmentLog.upsert({
     *   create: {
     *     // ... data to create a AppointmentLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AppointmentLog we want to update
     *   }
     * })
     */
    upsert<T extends AppointmentLogUpsertArgs>(args: SelectSubset<T, AppointmentLogUpsertArgs<ExtArgs>>): Prisma__AppointmentLogClient<$Result.GetResult<Prisma.$AppointmentLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AppointmentLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentLogCountArgs} args - Arguments to filter AppointmentLogs to count.
     * @example
     * // Count the number of AppointmentLogs
     * const count = await prisma.appointmentLog.count({
     *   where: {
     *     // ... the filter for the AppointmentLogs we want to count
     *   }
     * })
    **/
    count<T extends AppointmentLogCountArgs>(
      args?: Subset<T, AppointmentLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppointmentLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AppointmentLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppointmentLogAggregateArgs>(args: Subset<T, AppointmentLogAggregateArgs>): Prisma.PrismaPromise<GetAppointmentLogAggregateType<T>>

    /**
     * Group by AppointmentLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppointmentLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppointmentLogGroupByArgs['orderBy'] }
        : { orderBy?: AppointmentLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppointmentLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppointmentLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AppointmentLog model
   */
  readonly fields: AppointmentLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AppointmentLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AppointmentLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    appointment<T extends AppointmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AppointmentDefaultArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AppointmentLog model
   */
  interface AppointmentLogFieldRefs {
    readonly id: FieldRef<"AppointmentLog", 'Int'>
    readonly appointmentId: FieldRef<"AppointmentLog", 'Int'>
    readonly userId: FieldRef<"AppointmentLog", 'Int'>
    readonly userName: FieldRef<"AppointmentLog", 'String'>
    readonly action: FieldRef<"AppointmentLog", 'String'>
    readonly details: FieldRef<"AppointmentLog", 'String'>
    readonly createdAt: FieldRef<"AppointmentLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AppointmentLog findUnique
   */
  export type AppointmentLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentLog
     */
    select?: AppointmentLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppointmentLog
     */
    omit?: AppointmentLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentLogInclude<ExtArgs> | null
    /**
     * Filter, which AppointmentLog to fetch.
     */
    where: AppointmentLogWhereUniqueInput
  }

  /**
   * AppointmentLog findUniqueOrThrow
   */
  export type AppointmentLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentLog
     */
    select?: AppointmentLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppointmentLog
     */
    omit?: AppointmentLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentLogInclude<ExtArgs> | null
    /**
     * Filter, which AppointmentLog to fetch.
     */
    where: AppointmentLogWhereUniqueInput
  }

  /**
   * AppointmentLog findFirst
   */
  export type AppointmentLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentLog
     */
    select?: AppointmentLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppointmentLog
     */
    omit?: AppointmentLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentLogInclude<ExtArgs> | null
    /**
     * Filter, which AppointmentLog to fetch.
     */
    where?: AppointmentLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppointmentLogs to fetch.
     */
    orderBy?: AppointmentLogOrderByWithRelationInput | AppointmentLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AppointmentLogs.
     */
    cursor?: AppointmentLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppointmentLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppointmentLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AppointmentLogs.
     */
    distinct?: AppointmentLogScalarFieldEnum | AppointmentLogScalarFieldEnum[]
  }

  /**
   * AppointmentLog findFirstOrThrow
   */
  export type AppointmentLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentLog
     */
    select?: AppointmentLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppointmentLog
     */
    omit?: AppointmentLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentLogInclude<ExtArgs> | null
    /**
     * Filter, which AppointmentLog to fetch.
     */
    where?: AppointmentLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppointmentLogs to fetch.
     */
    orderBy?: AppointmentLogOrderByWithRelationInput | AppointmentLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AppointmentLogs.
     */
    cursor?: AppointmentLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppointmentLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppointmentLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AppointmentLogs.
     */
    distinct?: AppointmentLogScalarFieldEnum | AppointmentLogScalarFieldEnum[]
  }

  /**
   * AppointmentLog findMany
   */
  export type AppointmentLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentLog
     */
    select?: AppointmentLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppointmentLog
     */
    omit?: AppointmentLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentLogInclude<ExtArgs> | null
    /**
     * Filter, which AppointmentLogs to fetch.
     */
    where?: AppointmentLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppointmentLogs to fetch.
     */
    orderBy?: AppointmentLogOrderByWithRelationInput | AppointmentLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AppointmentLogs.
     */
    cursor?: AppointmentLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppointmentLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppointmentLogs.
     */
    skip?: number
    distinct?: AppointmentLogScalarFieldEnum | AppointmentLogScalarFieldEnum[]
  }

  /**
   * AppointmentLog create
   */
  export type AppointmentLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentLog
     */
    select?: AppointmentLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppointmentLog
     */
    omit?: AppointmentLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AppointmentLog.
     */
    data: XOR<AppointmentLogCreateInput, AppointmentLogUncheckedCreateInput>
  }

  /**
   * AppointmentLog createMany
   */
  export type AppointmentLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AppointmentLogs.
     */
    data: AppointmentLogCreateManyInput | AppointmentLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AppointmentLog createManyAndReturn
   */
  export type AppointmentLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentLog
     */
    select?: AppointmentLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AppointmentLog
     */
    omit?: AppointmentLogOmit<ExtArgs> | null
    /**
     * The data used to create many AppointmentLogs.
     */
    data: AppointmentLogCreateManyInput | AppointmentLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AppointmentLog update
   */
  export type AppointmentLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentLog
     */
    select?: AppointmentLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppointmentLog
     */
    omit?: AppointmentLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AppointmentLog.
     */
    data: XOR<AppointmentLogUpdateInput, AppointmentLogUncheckedUpdateInput>
    /**
     * Choose, which AppointmentLog to update.
     */
    where: AppointmentLogWhereUniqueInput
  }

  /**
   * AppointmentLog updateMany
   */
  export type AppointmentLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AppointmentLogs.
     */
    data: XOR<AppointmentLogUpdateManyMutationInput, AppointmentLogUncheckedUpdateManyInput>
    /**
     * Filter which AppointmentLogs to update
     */
    where?: AppointmentLogWhereInput
    /**
     * Limit how many AppointmentLogs to update.
     */
    limit?: number
  }

  /**
   * AppointmentLog updateManyAndReturn
   */
  export type AppointmentLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentLog
     */
    select?: AppointmentLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AppointmentLog
     */
    omit?: AppointmentLogOmit<ExtArgs> | null
    /**
     * The data used to update AppointmentLogs.
     */
    data: XOR<AppointmentLogUpdateManyMutationInput, AppointmentLogUncheckedUpdateManyInput>
    /**
     * Filter which AppointmentLogs to update
     */
    where?: AppointmentLogWhereInput
    /**
     * Limit how many AppointmentLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AppointmentLog upsert
   */
  export type AppointmentLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentLog
     */
    select?: AppointmentLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppointmentLog
     */
    omit?: AppointmentLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AppointmentLog to update in case it exists.
     */
    where: AppointmentLogWhereUniqueInput
    /**
     * In case the AppointmentLog found by the `where` argument doesn't exist, create a new AppointmentLog with this data.
     */
    create: XOR<AppointmentLogCreateInput, AppointmentLogUncheckedCreateInput>
    /**
     * In case the AppointmentLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AppointmentLogUpdateInput, AppointmentLogUncheckedUpdateInput>
  }

  /**
   * AppointmentLog delete
   */
  export type AppointmentLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentLog
     */
    select?: AppointmentLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppointmentLog
     */
    omit?: AppointmentLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentLogInclude<ExtArgs> | null
    /**
     * Filter which AppointmentLog to delete.
     */
    where: AppointmentLogWhereUniqueInput
  }

  /**
   * AppointmentLog deleteMany
   */
  export type AppointmentLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AppointmentLogs to delete
     */
    where?: AppointmentLogWhereInput
    /**
     * Limit how many AppointmentLogs to delete.
     */
    limit?: number
  }

  /**
   * AppointmentLog without action
   */
  export type AppointmentLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentLog
     */
    select?: AppointmentLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppointmentLog
     */
    omit?: AppointmentLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentLogInclude<ExtArgs> | null
  }


  /**
   * Model ContactRequest
   */

  export type AggregateContactRequest = {
    _count: ContactRequestCountAggregateOutputType | null
    _avg: ContactRequestAvgAggregateOutputType | null
    _sum: ContactRequestSumAggregateOutputType | null
    _min: ContactRequestMinAggregateOutputType | null
    _max: ContactRequestMaxAggregateOutputType | null
  }

  export type ContactRequestAvgAggregateOutputType = {
    id: number | null
    processorId: number | null
    customerId: number | null
    appointmentId: number | null
  }

  export type ContactRequestSumAggregateOutputType = {
    id: number | null
    processorId: number | null
    customerId: number | null
    appointmentId: number | null
  }

  export type ContactRequestMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phone: string | null
    service: string | null
    message: string | null
    status: string | null
    processorId: number | null
    customerId: number | null
    appointmentId: number | null
    ipAddress: string | null
    source: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ContactRequestMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phone: string | null
    service: string | null
    message: string | null
    status: string | null
    processorId: number | null
    customerId: number | null
    appointmentId: number | null
    ipAddress: string | null
    source: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ContactRequestCountAggregateOutputType = {
    id: number
    name: number
    email: number
    phone: number
    service: number
    message: number
    status: number
    processorId: number
    customerId: number
    appointmentId: number
    ipAddress: number
    source: number
    metadata: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ContactRequestAvgAggregateInputType = {
    id?: true
    processorId?: true
    customerId?: true
    appointmentId?: true
  }

  export type ContactRequestSumAggregateInputType = {
    id?: true
    processorId?: true
    customerId?: true
    appointmentId?: true
  }

  export type ContactRequestMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    service?: true
    message?: true
    status?: true
    processorId?: true
    customerId?: true
    appointmentId?: true
    ipAddress?: true
    source?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ContactRequestMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    service?: true
    message?: true
    status?: true
    processorId?: true
    customerId?: true
    appointmentId?: true
    ipAddress?: true
    source?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ContactRequestCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    service?: true
    message?: true
    status?: true
    processorId?: true
    customerId?: true
    appointmentId?: true
    ipAddress?: true
    source?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ContactRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContactRequest to aggregate.
     */
    where?: ContactRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactRequests to fetch.
     */
    orderBy?: ContactRequestOrderByWithRelationInput | ContactRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContactRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ContactRequests
    **/
    _count?: true | ContactRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContactRequestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContactRequestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContactRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContactRequestMaxAggregateInputType
  }

  export type GetContactRequestAggregateType<T extends ContactRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateContactRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContactRequest[P]>
      : GetScalarType<T[P], AggregateContactRequest[P]>
  }




  export type ContactRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactRequestWhereInput
    orderBy?: ContactRequestOrderByWithAggregationInput | ContactRequestOrderByWithAggregationInput[]
    by: ContactRequestScalarFieldEnum[] | ContactRequestScalarFieldEnum
    having?: ContactRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContactRequestCountAggregateInputType | true
    _avg?: ContactRequestAvgAggregateInputType
    _sum?: ContactRequestSumAggregateInputType
    _min?: ContactRequestMinAggregateInputType
    _max?: ContactRequestMaxAggregateInputType
  }

  export type ContactRequestGroupByOutputType = {
    id: number
    name: string
    email: string
    phone: string | null
    service: string
    message: string
    status: string
    processorId: number | null
    customerId: number | null
    appointmentId: number | null
    ipAddress: string | null
    source: string | null
    metadata: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: ContactRequestCountAggregateOutputType | null
    _avg: ContactRequestAvgAggregateOutputType | null
    _sum: ContactRequestSumAggregateOutputType | null
    _min: ContactRequestMinAggregateOutputType | null
    _max: ContactRequestMaxAggregateOutputType | null
  }

  type GetContactRequestGroupByPayload<T extends ContactRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContactRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContactRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContactRequestGroupByOutputType[P]>
            : GetScalarType<T[P], ContactRequestGroupByOutputType[P]>
        }
      >
    >


  export type ContactRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    service?: boolean
    message?: boolean
    status?: boolean
    processorId?: boolean
    customerId?: boolean
    appointmentId?: boolean
    ipAddress?: boolean
    source?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    notes?: boolean | ContactRequest$notesArgs<ExtArgs>
    logs?: boolean | ContactRequest$logsArgs<ExtArgs>
    requestData?: boolean | ContactRequest$requestDataArgs<ExtArgs>
    customer?: boolean | ContactRequest$customerArgs<ExtArgs>
    appointment?: boolean | ContactRequest$appointmentArgs<ExtArgs>
    processor?: boolean | ContactRequest$processorArgs<ExtArgs>
    _count?: boolean | ContactRequestCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contactRequest"]>

  export type ContactRequestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    service?: boolean
    message?: boolean
    status?: boolean
    processorId?: boolean
    customerId?: boolean
    appointmentId?: boolean
    ipAddress?: boolean
    source?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | ContactRequest$customerArgs<ExtArgs>
    appointment?: boolean | ContactRequest$appointmentArgs<ExtArgs>
    processor?: boolean | ContactRequest$processorArgs<ExtArgs>
  }, ExtArgs["result"]["contactRequest"]>

  export type ContactRequestSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    service?: boolean
    message?: boolean
    status?: boolean
    processorId?: boolean
    customerId?: boolean
    appointmentId?: boolean
    ipAddress?: boolean
    source?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | ContactRequest$customerArgs<ExtArgs>
    appointment?: boolean | ContactRequest$appointmentArgs<ExtArgs>
    processor?: boolean | ContactRequest$processorArgs<ExtArgs>
  }, ExtArgs["result"]["contactRequest"]>

  export type ContactRequestSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    service?: boolean
    message?: boolean
    status?: boolean
    processorId?: boolean
    customerId?: boolean
    appointmentId?: boolean
    ipAddress?: boolean
    source?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ContactRequestOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "phone" | "service" | "message" | "status" | "processorId" | "customerId" | "appointmentId" | "ipAddress" | "source" | "metadata" | "createdAt" | "updatedAt", ExtArgs["result"]["contactRequest"]>
  export type ContactRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notes?: boolean | ContactRequest$notesArgs<ExtArgs>
    logs?: boolean | ContactRequest$logsArgs<ExtArgs>
    requestData?: boolean | ContactRequest$requestDataArgs<ExtArgs>
    customer?: boolean | ContactRequest$customerArgs<ExtArgs>
    appointment?: boolean | ContactRequest$appointmentArgs<ExtArgs>
    processor?: boolean | ContactRequest$processorArgs<ExtArgs>
    _count?: boolean | ContactRequestCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ContactRequestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | ContactRequest$customerArgs<ExtArgs>
    appointment?: boolean | ContactRequest$appointmentArgs<ExtArgs>
    processor?: boolean | ContactRequest$processorArgs<ExtArgs>
  }
  export type ContactRequestIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | ContactRequest$customerArgs<ExtArgs>
    appointment?: boolean | ContactRequest$appointmentArgs<ExtArgs>
    processor?: boolean | ContactRequest$processorArgs<ExtArgs>
  }

  export type $ContactRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ContactRequest"
    objects: {
      notes: Prisma.$RequestNotePayload<ExtArgs>[]
      logs: Prisma.$RequestLogPayload<ExtArgs>[]
      requestData: Prisma.$RequestDataPayload<ExtArgs>[]
      customer: Prisma.$CustomerPayload<ExtArgs> | null
      appointment: Prisma.$AppointmentPayload<ExtArgs> | null
      processor: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      phone: string | null
      service: string
      message: string
      status: string
      processorId: number | null
      customerId: number | null
      appointmentId: number | null
      ipAddress: string | null
      source: string | null
      metadata: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["contactRequest"]>
    composites: {}
  }

  type ContactRequestGetPayload<S extends boolean | null | undefined | ContactRequestDefaultArgs> = $Result.GetResult<Prisma.$ContactRequestPayload, S>

  type ContactRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContactRequestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContactRequestCountAggregateInputType | true
    }

  export interface ContactRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ContactRequest'], meta: { name: 'ContactRequest' } }
    /**
     * Find zero or one ContactRequest that matches the filter.
     * @param {ContactRequestFindUniqueArgs} args - Arguments to find a ContactRequest
     * @example
     * // Get one ContactRequest
     * const contactRequest = await prisma.contactRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContactRequestFindUniqueArgs>(args: SelectSubset<T, ContactRequestFindUniqueArgs<ExtArgs>>): Prisma__ContactRequestClient<$Result.GetResult<Prisma.$ContactRequestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ContactRequest that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContactRequestFindUniqueOrThrowArgs} args - Arguments to find a ContactRequest
     * @example
     * // Get one ContactRequest
     * const contactRequest = await prisma.contactRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContactRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, ContactRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContactRequestClient<$Result.GetResult<Prisma.$ContactRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContactRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactRequestFindFirstArgs} args - Arguments to find a ContactRequest
     * @example
     * // Get one ContactRequest
     * const contactRequest = await prisma.contactRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContactRequestFindFirstArgs>(args?: SelectSubset<T, ContactRequestFindFirstArgs<ExtArgs>>): Prisma__ContactRequestClient<$Result.GetResult<Prisma.$ContactRequestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContactRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactRequestFindFirstOrThrowArgs} args - Arguments to find a ContactRequest
     * @example
     * // Get one ContactRequest
     * const contactRequest = await prisma.contactRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContactRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, ContactRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContactRequestClient<$Result.GetResult<Prisma.$ContactRequestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ContactRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContactRequests
     * const contactRequests = await prisma.contactRequest.findMany()
     * 
     * // Get first 10 ContactRequests
     * const contactRequests = await prisma.contactRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contactRequestWithIdOnly = await prisma.contactRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContactRequestFindManyArgs>(args?: SelectSubset<T, ContactRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ContactRequest.
     * @param {ContactRequestCreateArgs} args - Arguments to create a ContactRequest.
     * @example
     * // Create one ContactRequest
     * const ContactRequest = await prisma.contactRequest.create({
     *   data: {
     *     // ... data to create a ContactRequest
     *   }
     * })
     * 
     */
    create<T extends ContactRequestCreateArgs>(args: SelectSubset<T, ContactRequestCreateArgs<ExtArgs>>): Prisma__ContactRequestClient<$Result.GetResult<Prisma.$ContactRequestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ContactRequests.
     * @param {ContactRequestCreateManyArgs} args - Arguments to create many ContactRequests.
     * @example
     * // Create many ContactRequests
     * const contactRequest = await prisma.contactRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContactRequestCreateManyArgs>(args?: SelectSubset<T, ContactRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ContactRequests and returns the data saved in the database.
     * @param {ContactRequestCreateManyAndReturnArgs} args - Arguments to create many ContactRequests.
     * @example
     * // Create many ContactRequests
     * const contactRequest = await prisma.contactRequest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ContactRequests and only return the `id`
     * const contactRequestWithIdOnly = await prisma.contactRequest.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContactRequestCreateManyAndReturnArgs>(args?: SelectSubset<T, ContactRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactRequestPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ContactRequest.
     * @param {ContactRequestDeleteArgs} args - Arguments to delete one ContactRequest.
     * @example
     * // Delete one ContactRequest
     * const ContactRequest = await prisma.contactRequest.delete({
     *   where: {
     *     // ... filter to delete one ContactRequest
     *   }
     * })
     * 
     */
    delete<T extends ContactRequestDeleteArgs>(args: SelectSubset<T, ContactRequestDeleteArgs<ExtArgs>>): Prisma__ContactRequestClient<$Result.GetResult<Prisma.$ContactRequestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ContactRequest.
     * @param {ContactRequestUpdateArgs} args - Arguments to update one ContactRequest.
     * @example
     * // Update one ContactRequest
     * const contactRequest = await prisma.contactRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContactRequestUpdateArgs>(args: SelectSubset<T, ContactRequestUpdateArgs<ExtArgs>>): Prisma__ContactRequestClient<$Result.GetResult<Prisma.$ContactRequestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ContactRequests.
     * @param {ContactRequestDeleteManyArgs} args - Arguments to filter ContactRequests to delete.
     * @example
     * // Delete a few ContactRequests
     * const { count } = await prisma.contactRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContactRequestDeleteManyArgs>(args?: SelectSubset<T, ContactRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContactRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContactRequests
     * const contactRequest = await prisma.contactRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContactRequestUpdateManyArgs>(args: SelectSubset<T, ContactRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContactRequests and returns the data updated in the database.
     * @param {ContactRequestUpdateManyAndReturnArgs} args - Arguments to update many ContactRequests.
     * @example
     * // Update many ContactRequests
     * const contactRequest = await prisma.contactRequest.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ContactRequests and only return the `id`
     * const contactRequestWithIdOnly = await prisma.contactRequest.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ContactRequestUpdateManyAndReturnArgs>(args: SelectSubset<T, ContactRequestUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactRequestPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ContactRequest.
     * @param {ContactRequestUpsertArgs} args - Arguments to update or create a ContactRequest.
     * @example
     * // Update or create a ContactRequest
     * const contactRequest = await prisma.contactRequest.upsert({
     *   create: {
     *     // ... data to create a ContactRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContactRequest we want to update
     *   }
     * })
     */
    upsert<T extends ContactRequestUpsertArgs>(args: SelectSubset<T, ContactRequestUpsertArgs<ExtArgs>>): Prisma__ContactRequestClient<$Result.GetResult<Prisma.$ContactRequestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ContactRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactRequestCountArgs} args - Arguments to filter ContactRequests to count.
     * @example
     * // Count the number of ContactRequests
     * const count = await prisma.contactRequest.count({
     *   where: {
     *     // ... the filter for the ContactRequests we want to count
     *   }
     * })
    **/
    count<T extends ContactRequestCountArgs>(
      args?: Subset<T, ContactRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContactRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContactRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContactRequestAggregateArgs>(args: Subset<T, ContactRequestAggregateArgs>): Prisma.PrismaPromise<GetContactRequestAggregateType<T>>

    /**
     * Group by ContactRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContactRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContactRequestGroupByArgs['orderBy'] }
        : { orderBy?: ContactRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContactRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContactRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ContactRequest model
   */
  readonly fields: ContactRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ContactRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContactRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    notes<T extends ContactRequest$notesArgs<ExtArgs> = {}>(args?: Subset<T, ContactRequest$notesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestNotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    logs<T extends ContactRequest$logsArgs<ExtArgs> = {}>(args?: Subset<T, ContactRequest$logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    requestData<T extends ContactRequest$requestDataArgs<ExtArgs> = {}>(args?: Subset<T, ContactRequest$requestDataArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestDataPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    customer<T extends ContactRequest$customerArgs<ExtArgs> = {}>(args?: Subset<T, ContactRequest$customerArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    appointment<T extends ContactRequest$appointmentArgs<ExtArgs> = {}>(args?: Subset<T, ContactRequest$appointmentArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    processor<T extends ContactRequest$processorArgs<ExtArgs> = {}>(args?: Subset<T, ContactRequest$processorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ContactRequest model
   */
  interface ContactRequestFieldRefs {
    readonly id: FieldRef<"ContactRequest", 'Int'>
    readonly name: FieldRef<"ContactRequest", 'String'>
    readonly email: FieldRef<"ContactRequest", 'String'>
    readonly phone: FieldRef<"ContactRequest", 'String'>
    readonly service: FieldRef<"ContactRequest", 'String'>
    readonly message: FieldRef<"ContactRequest", 'String'>
    readonly status: FieldRef<"ContactRequest", 'String'>
    readonly processorId: FieldRef<"ContactRequest", 'Int'>
    readonly customerId: FieldRef<"ContactRequest", 'Int'>
    readonly appointmentId: FieldRef<"ContactRequest", 'Int'>
    readonly ipAddress: FieldRef<"ContactRequest", 'String'>
    readonly source: FieldRef<"ContactRequest", 'String'>
    readonly metadata: FieldRef<"ContactRequest", 'Json'>
    readonly createdAt: FieldRef<"ContactRequest", 'DateTime'>
    readonly updatedAt: FieldRef<"ContactRequest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ContactRequest findUnique
   */
  export type ContactRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactRequest
     */
    select?: ContactRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactRequest
     */
    omit?: ContactRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactRequestInclude<ExtArgs> | null
    /**
     * Filter, which ContactRequest to fetch.
     */
    where: ContactRequestWhereUniqueInput
  }

  /**
   * ContactRequest findUniqueOrThrow
   */
  export type ContactRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactRequest
     */
    select?: ContactRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactRequest
     */
    omit?: ContactRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactRequestInclude<ExtArgs> | null
    /**
     * Filter, which ContactRequest to fetch.
     */
    where: ContactRequestWhereUniqueInput
  }

  /**
   * ContactRequest findFirst
   */
  export type ContactRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactRequest
     */
    select?: ContactRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactRequest
     */
    omit?: ContactRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactRequestInclude<ExtArgs> | null
    /**
     * Filter, which ContactRequest to fetch.
     */
    where?: ContactRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactRequests to fetch.
     */
    orderBy?: ContactRequestOrderByWithRelationInput | ContactRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContactRequests.
     */
    cursor?: ContactRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContactRequests.
     */
    distinct?: ContactRequestScalarFieldEnum | ContactRequestScalarFieldEnum[]
  }

  /**
   * ContactRequest findFirstOrThrow
   */
  export type ContactRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactRequest
     */
    select?: ContactRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactRequest
     */
    omit?: ContactRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactRequestInclude<ExtArgs> | null
    /**
     * Filter, which ContactRequest to fetch.
     */
    where?: ContactRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactRequests to fetch.
     */
    orderBy?: ContactRequestOrderByWithRelationInput | ContactRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContactRequests.
     */
    cursor?: ContactRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContactRequests.
     */
    distinct?: ContactRequestScalarFieldEnum | ContactRequestScalarFieldEnum[]
  }

  /**
   * ContactRequest findMany
   */
  export type ContactRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactRequest
     */
    select?: ContactRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactRequest
     */
    omit?: ContactRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactRequestInclude<ExtArgs> | null
    /**
     * Filter, which ContactRequests to fetch.
     */
    where?: ContactRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactRequests to fetch.
     */
    orderBy?: ContactRequestOrderByWithRelationInput | ContactRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ContactRequests.
     */
    cursor?: ContactRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactRequests.
     */
    skip?: number
    distinct?: ContactRequestScalarFieldEnum | ContactRequestScalarFieldEnum[]
  }

  /**
   * ContactRequest create
   */
  export type ContactRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactRequest
     */
    select?: ContactRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactRequest
     */
    omit?: ContactRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a ContactRequest.
     */
    data: XOR<ContactRequestCreateInput, ContactRequestUncheckedCreateInput>
  }

  /**
   * ContactRequest createMany
   */
  export type ContactRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ContactRequests.
     */
    data: ContactRequestCreateManyInput | ContactRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ContactRequest createManyAndReturn
   */
  export type ContactRequestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactRequest
     */
    select?: ContactRequestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ContactRequest
     */
    omit?: ContactRequestOmit<ExtArgs> | null
    /**
     * The data used to create many ContactRequests.
     */
    data: ContactRequestCreateManyInput | ContactRequestCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactRequestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ContactRequest update
   */
  export type ContactRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactRequest
     */
    select?: ContactRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactRequest
     */
    omit?: ContactRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a ContactRequest.
     */
    data: XOR<ContactRequestUpdateInput, ContactRequestUncheckedUpdateInput>
    /**
     * Choose, which ContactRequest to update.
     */
    where: ContactRequestWhereUniqueInput
  }

  /**
   * ContactRequest updateMany
   */
  export type ContactRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ContactRequests.
     */
    data: XOR<ContactRequestUpdateManyMutationInput, ContactRequestUncheckedUpdateManyInput>
    /**
     * Filter which ContactRequests to update
     */
    where?: ContactRequestWhereInput
    /**
     * Limit how many ContactRequests to update.
     */
    limit?: number
  }

  /**
   * ContactRequest updateManyAndReturn
   */
  export type ContactRequestUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactRequest
     */
    select?: ContactRequestSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ContactRequest
     */
    omit?: ContactRequestOmit<ExtArgs> | null
    /**
     * The data used to update ContactRequests.
     */
    data: XOR<ContactRequestUpdateManyMutationInput, ContactRequestUncheckedUpdateManyInput>
    /**
     * Filter which ContactRequests to update
     */
    where?: ContactRequestWhereInput
    /**
     * Limit how many ContactRequests to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactRequestIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ContactRequest upsert
   */
  export type ContactRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactRequest
     */
    select?: ContactRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactRequest
     */
    omit?: ContactRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the ContactRequest to update in case it exists.
     */
    where: ContactRequestWhereUniqueInput
    /**
     * In case the ContactRequest found by the `where` argument doesn't exist, create a new ContactRequest with this data.
     */
    create: XOR<ContactRequestCreateInput, ContactRequestUncheckedCreateInput>
    /**
     * In case the ContactRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContactRequestUpdateInput, ContactRequestUncheckedUpdateInput>
  }

  /**
   * ContactRequest delete
   */
  export type ContactRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactRequest
     */
    select?: ContactRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactRequest
     */
    omit?: ContactRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactRequestInclude<ExtArgs> | null
    /**
     * Filter which ContactRequest to delete.
     */
    where: ContactRequestWhereUniqueInput
  }

  /**
   * ContactRequest deleteMany
   */
  export type ContactRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContactRequests to delete
     */
    where?: ContactRequestWhereInput
    /**
     * Limit how many ContactRequests to delete.
     */
    limit?: number
  }

  /**
   * ContactRequest.notes
   */
  export type ContactRequest$notesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestNote
     */
    select?: RequestNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestNote
     */
    omit?: RequestNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestNoteInclude<ExtArgs> | null
    where?: RequestNoteWhereInput
    orderBy?: RequestNoteOrderByWithRelationInput | RequestNoteOrderByWithRelationInput[]
    cursor?: RequestNoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RequestNoteScalarFieldEnum | RequestNoteScalarFieldEnum[]
  }

  /**
   * ContactRequest.logs
   */
  export type ContactRequest$logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestLog
     */
    select?: RequestLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestLog
     */
    omit?: RequestLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestLogInclude<ExtArgs> | null
    where?: RequestLogWhereInput
    orderBy?: RequestLogOrderByWithRelationInput | RequestLogOrderByWithRelationInput[]
    cursor?: RequestLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RequestLogScalarFieldEnum | RequestLogScalarFieldEnum[]
  }

  /**
   * ContactRequest.requestData
   */
  export type ContactRequest$requestDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestData
     */
    select?: RequestDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestData
     */
    omit?: RequestDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestDataInclude<ExtArgs> | null
    where?: RequestDataWhereInput
    orderBy?: RequestDataOrderByWithRelationInput | RequestDataOrderByWithRelationInput[]
    cursor?: RequestDataWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RequestDataScalarFieldEnum | RequestDataScalarFieldEnum[]
  }

  /**
   * ContactRequest.customer
   */
  export type ContactRequest$customerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    where?: CustomerWhereInput
  }

  /**
   * ContactRequest.appointment
   */
  export type ContactRequest$appointmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
  }

  /**
   * ContactRequest.processor
   */
  export type ContactRequest$processorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * ContactRequest without action
   */
  export type ContactRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactRequest
     */
    select?: ContactRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactRequest
     */
    omit?: ContactRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactRequestInclude<ExtArgs> | null
  }


  /**
   * Model RequestNote
   */

  export type AggregateRequestNote = {
    _count: RequestNoteCountAggregateOutputType | null
    _avg: RequestNoteAvgAggregateOutputType | null
    _sum: RequestNoteSumAggregateOutputType | null
    _min: RequestNoteMinAggregateOutputType | null
    _max: RequestNoteMaxAggregateOutputType | null
  }

  export type RequestNoteAvgAggregateOutputType = {
    id: number | null
    requestId: number | null
    userId: number | null
  }

  export type RequestNoteSumAggregateOutputType = {
    id: number | null
    requestId: number | null
    userId: number | null
  }

  export type RequestNoteMinAggregateOutputType = {
    id: number | null
    requestId: number | null
    userId: number | null
    userName: string | null
    text: string | null
    createdAt: Date | null
  }

  export type RequestNoteMaxAggregateOutputType = {
    id: number | null
    requestId: number | null
    userId: number | null
    userName: string | null
    text: string | null
    createdAt: Date | null
  }

  export type RequestNoteCountAggregateOutputType = {
    id: number
    requestId: number
    userId: number
    userName: number
    text: number
    createdAt: number
    _all: number
  }


  export type RequestNoteAvgAggregateInputType = {
    id?: true
    requestId?: true
    userId?: true
  }

  export type RequestNoteSumAggregateInputType = {
    id?: true
    requestId?: true
    userId?: true
  }

  export type RequestNoteMinAggregateInputType = {
    id?: true
    requestId?: true
    userId?: true
    userName?: true
    text?: true
    createdAt?: true
  }

  export type RequestNoteMaxAggregateInputType = {
    id?: true
    requestId?: true
    userId?: true
    userName?: true
    text?: true
    createdAt?: true
  }

  export type RequestNoteCountAggregateInputType = {
    id?: true
    requestId?: true
    userId?: true
    userName?: true
    text?: true
    createdAt?: true
    _all?: true
  }

  export type RequestNoteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RequestNote to aggregate.
     */
    where?: RequestNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestNotes to fetch.
     */
    orderBy?: RequestNoteOrderByWithRelationInput | RequestNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RequestNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RequestNotes
    **/
    _count?: true | RequestNoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RequestNoteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RequestNoteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RequestNoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RequestNoteMaxAggregateInputType
  }

  export type GetRequestNoteAggregateType<T extends RequestNoteAggregateArgs> = {
        [P in keyof T & keyof AggregateRequestNote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRequestNote[P]>
      : GetScalarType<T[P], AggregateRequestNote[P]>
  }




  export type RequestNoteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RequestNoteWhereInput
    orderBy?: RequestNoteOrderByWithAggregationInput | RequestNoteOrderByWithAggregationInput[]
    by: RequestNoteScalarFieldEnum[] | RequestNoteScalarFieldEnum
    having?: RequestNoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RequestNoteCountAggregateInputType | true
    _avg?: RequestNoteAvgAggregateInputType
    _sum?: RequestNoteSumAggregateInputType
    _min?: RequestNoteMinAggregateInputType
    _max?: RequestNoteMaxAggregateInputType
  }

  export type RequestNoteGroupByOutputType = {
    id: number
    requestId: number
    userId: number
    userName: string
    text: string
    createdAt: Date
    _count: RequestNoteCountAggregateOutputType | null
    _avg: RequestNoteAvgAggregateOutputType | null
    _sum: RequestNoteSumAggregateOutputType | null
    _min: RequestNoteMinAggregateOutputType | null
    _max: RequestNoteMaxAggregateOutputType | null
  }

  type GetRequestNoteGroupByPayload<T extends RequestNoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RequestNoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RequestNoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RequestNoteGroupByOutputType[P]>
            : GetScalarType<T[P], RequestNoteGroupByOutputType[P]>
        }
      >
    >


  export type RequestNoteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestId?: boolean
    userId?: boolean
    userName?: boolean
    text?: boolean
    createdAt?: boolean
    request?: boolean | ContactRequestDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["requestNote"]>

  export type RequestNoteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestId?: boolean
    userId?: boolean
    userName?: boolean
    text?: boolean
    createdAt?: boolean
    request?: boolean | ContactRequestDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["requestNote"]>

  export type RequestNoteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestId?: boolean
    userId?: boolean
    userName?: boolean
    text?: boolean
    createdAt?: boolean
    request?: boolean | ContactRequestDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["requestNote"]>

  export type RequestNoteSelectScalar = {
    id?: boolean
    requestId?: boolean
    userId?: boolean
    userName?: boolean
    text?: boolean
    createdAt?: boolean
  }

  export type RequestNoteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "requestId" | "userId" | "userName" | "text" | "createdAt", ExtArgs["result"]["requestNote"]>
  export type RequestNoteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    request?: boolean | ContactRequestDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RequestNoteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    request?: boolean | ContactRequestDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RequestNoteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    request?: boolean | ContactRequestDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $RequestNotePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RequestNote"
    objects: {
      request: Prisma.$ContactRequestPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      requestId: number
      userId: number
      userName: string
      text: string
      createdAt: Date
    }, ExtArgs["result"]["requestNote"]>
    composites: {}
  }

  type RequestNoteGetPayload<S extends boolean | null | undefined | RequestNoteDefaultArgs> = $Result.GetResult<Prisma.$RequestNotePayload, S>

  type RequestNoteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RequestNoteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RequestNoteCountAggregateInputType | true
    }

  export interface RequestNoteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RequestNote'], meta: { name: 'RequestNote' } }
    /**
     * Find zero or one RequestNote that matches the filter.
     * @param {RequestNoteFindUniqueArgs} args - Arguments to find a RequestNote
     * @example
     * // Get one RequestNote
     * const requestNote = await prisma.requestNote.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RequestNoteFindUniqueArgs>(args: SelectSubset<T, RequestNoteFindUniqueArgs<ExtArgs>>): Prisma__RequestNoteClient<$Result.GetResult<Prisma.$RequestNotePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RequestNote that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RequestNoteFindUniqueOrThrowArgs} args - Arguments to find a RequestNote
     * @example
     * // Get one RequestNote
     * const requestNote = await prisma.requestNote.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RequestNoteFindUniqueOrThrowArgs>(args: SelectSubset<T, RequestNoteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RequestNoteClient<$Result.GetResult<Prisma.$RequestNotePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RequestNote that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestNoteFindFirstArgs} args - Arguments to find a RequestNote
     * @example
     * // Get one RequestNote
     * const requestNote = await prisma.requestNote.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RequestNoteFindFirstArgs>(args?: SelectSubset<T, RequestNoteFindFirstArgs<ExtArgs>>): Prisma__RequestNoteClient<$Result.GetResult<Prisma.$RequestNotePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RequestNote that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestNoteFindFirstOrThrowArgs} args - Arguments to find a RequestNote
     * @example
     * // Get one RequestNote
     * const requestNote = await prisma.requestNote.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RequestNoteFindFirstOrThrowArgs>(args?: SelectSubset<T, RequestNoteFindFirstOrThrowArgs<ExtArgs>>): Prisma__RequestNoteClient<$Result.GetResult<Prisma.$RequestNotePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RequestNotes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestNoteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RequestNotes
     * const requestNotes = await prisma.requestNote.findMany()
     * 
     * // Get first 10 RequestNotes
     * const requestNotes = await prisma.requestNote.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const requestNoteWithIdOnly = await prisma.requestNote.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RequestNoteFindManyArgs>(args?: SelectSubset<T, RequestNoteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestNotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RequestNote.
     * @param {RequestNoteCreateArgs} args - Arguments to create a RequestNote.
     * @example
     * // Create one RequestNote
     * const RequestNote = await prisma.requestNote.create({
     *   data: {
     *     // ... data to create a RequestNote
     *   }
     * })
     * 
     */
    create<T extends RequestNoteCreateArgs>(args: SelectSubset<T, RequestNoteCreateArgs<ExtArgs>>): Prisma__RequestNoteClient<$Result.GetResult<Prisma.$RequestNotePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RequestNotes.
     * @param {RequestNoteCreateManyArgs} args - Arguments to create many RequestNotes.
     * @example
     * // Create many RequestNotes
     * const requestNote = await prisma.requestNote.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RequestNoteCreateManyArgs>(args?: SelectSubset<T, RequestNoteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RequestNotes and returns the data saved in the database.
     * @param {RequestNoteCreateManyAndReturnArgs} args - Arguments to create many RequestNotes.
     * @example
     * // Create many RequestNotes
     * const requestNote = await prisma.requestNote.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RequestNotes and only return the `id`
     * const requestNoteWithIdOnly = await prisma.requestNote.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RequestNoteCreateManyAndReturnArgs>(args?: SelectSubset<T, RequestNoteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestNotePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RequestNote.
     * @param {RequestNoteDeleteArgs} args - Arguments to delete one RequestNote.
     * @example
     * // Delete one RequestNote
     * const RequestNote = await prisma.requestNote.delete({
     *   where: {
     *     // ... filter to delete one RequestNote
     *   }
     * })
     * 
     */
    delete<T extends RequestNoteDeleteArgs>(args: SelectSubset<T, RequestNoteDeleteArgs<ExtArgs>>): Prisma__RequestNoteClient<$Result.GetResult<Prisma.$RequestNotePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RequestNote.
     * @param {RequestNoteUpdateArgs} args - Arguments to update one RequestNote.
     * @example
     * // Update one RequestNote
     * const requestNote = await prisma.requestNote.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RequestNoteUpdateArgs>(args: SelectSubset<T, RequestNoteUpdateArgs<ExtArgs>>): Prisma__RequestNoteClient<$Result.GetResult<Prisma.$RequestNotePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RequestNotes.
     * @param {RequestNoteDeleteManyArgs} args - Arguments to filter RequestNotes to delete.
     * @example
     * // Delete a few RequestNotes
     * const { count } = await prisma.requestNote.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RequestNoteDeleteManyArgs>(args?: SelectSubset<T, RequestNoteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RequestNotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestNoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RequestNotes
     * const requestNote = await prisma.requestNote.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RequestNoteUpdateManyArgs>(args: SelectSubset<T, RequestNoteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RequestNotes and returns the data updated in the database.
     * @param {RequestNoteUpdateManyAndReturnArgs} args - Arguments to update many RequestNotes.
     * @example
     * // Update many RequestNotes
     * const requestNote = await prisma.requestNote.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RequestNotes and only return the `id`
     * const requestNoteWithIdOnly = await prisma.requestNote.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RequestNoteUpdateManyAndReturnArgs>(args: SelectSubset<T, RequestNoteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestNotePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RequestNote.
     * @param {RequestNoteUpsertArgs} args - Arguments to update or create a RequestNote.
     * @example
     * // Update or create a RequestNote
     * const requestNote = await prisma.requestNote.upsert({
     *   create: {
     *     // ... data to create a RequestNote
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RequestNote we want to update
     *   }
     * })
     */
    upsert<T extends RequestNoteUpsertArgs>(args: SelectSubset<T, RequestNoteUpsertArgs<ExtArgs>>): Prisma__RequestNoteClient<$Result.GetResult<Prisma.$RequestNotePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RequestNotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestNoteCountArgs} args - Arguments to filter RequestNotes to count.
     * @example
     * // Count the number of RequestNotes
     * const count = await prisma.requestNote.count({
     *   where: {
     *     // ... the filter for the RequestNotes we want to count
     *   }
     * })
    **/
    count<T extends RequestNoteCountArgs>(
      args?: Subset<T, RequestNoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RequestNoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RequestNote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestNoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RequestNoteAggregateArgs>(args: Subset<T, RequestNoteAggregateArgs>): Prisma.PrismaPromise<GetRequestNoteAggregateType<T>>

    /**
     * Group by RequestNote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestNoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RequestNoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RequestNoteGroupByArgs['orderBy'] }
        : { orderBy?: RequestNoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RequestNoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRequestNoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RequestNote model
   */
  readonly fields: RequestNoteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RequestNote.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RequestNoteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    request<T extends ContactRequestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContactRequestDefaultArgs<ExtArgs>>): Prisma__ContactRequestClient<$Result.GetResult<Prisma.$ContactRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RequestNote model
   */
  interface RequestNoteFieldRefs {
    readonly id: FieldRef<"RequestNote", 'Int'>
    readonly requestId: FieldRef<"RequestNote", 'Int'>
    readonly userId: FieldRef<"RequestNote", 'Int'>
    readonly userName: FieldRef<"RequestNote", 'String'>
    readonly text: FieldRef<"RequestNote", 'String'>
    readonly createdAt: FieldRef<"RequestNote", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RequestNote findUnique
   */
  export type RequestNoteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestNote
     */
    select?: RequestNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestNote
     */
    omit?: RequestNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestNoteInclude<ExtArgs> | null
    /**
     * Filter, which RequestNote to fetch.
     */
    where: RequestNoteWhereUniqueInput
  }

  /**
   * RequestNote findUniqueOrThrow
   */
  export type RequestNoteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestNote
     */
    select?: RequestNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestNote
     */
    omit?: RequestNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestNoteInclude<ExtArgs> | null
    /**
     * Filter, which RequestNote to fetch.
     */
    where: RequestNoteWhereUniqueInput
  }

  /**
   * RequestNote findFirst
   */
  export type RequestNoteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestNote
     */
    select?: RequestNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestNote
     */
    omit?: RequestNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestNoteInclude<ExtArgs> | null
    /**
     * Filter, which RequestNote to fetch.
     */
    where?: RequestNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestNotes to fetch.
     */
    orderBy?: RequestNoteOrderByWithRelationInput | RequestNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RequestNotes.
     */
    cursor?: RequestNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RequestNotes.
     */
    distinct?: RequestNoteScalarFieldEnum | RequestNoteScalarFieldEnum[]
  }

  /**
   * RequestNote findFirstOrThrow
   */
  export type RequestNoteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestNote
     */
    select?: RequestNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestNote
     */
    omit?: RequestNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestNoteInclude<ExtArgs> | null
    /**
     * Filter, which RequestNote to fetch.
     */
    where?: RequestNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestNotes to fetch.
     */
    orderBy?: RequestNoteOrderByWithRelationInput | RequestNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RequestNotes.
     */
    cursor?: RequestNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RequestNotes.
     */
    distinct?: RequestNoteScalarFieldEnum | RequestNoteScalarFieldEnum[]
  }

  /**
   * RequestNote findMany
   */
  export type RequestNoteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestNote
     */
    select?: RequestNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestNote
     */
    omit?: RequestNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestNoteInclude<ExtArgs> | null
    /**
     * Filter, which RequestNotes to fetch.
     */
    where?: RequestNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestNotes to fetch.
     */
    orderBy?: RequestNoteOrderByWithRelationInput | RequestNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RequestNotes.
     */
    cursor?: RequestNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestNotes.
     */
    skip?: number
    distinct?: RequestNoteScalarFieldEnum | RequestNoteScalarFieldEnum[]
  }

  /**
   * RequestNote create
   */
  export type RequestNoteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestNote
     */
    select?: RequestNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestNote
     */
    omit?: RequestNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestNoteInclude<ExtArgs> | null
    /**
     * The data needed to create a RequestNote.
     */
    data: XOR<RequestNoteCreateInput, RequestNoteUncheckedCreateInput>
  }

  /**
   * RequestNote createMany
   */
  export type RequestNoteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RequestNotes.
     */
    data: RequestNoteCreateManyInput | RequestNoteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RequestNote createManyAndReturn
   */
  export type RequestNoteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestNote
     */
    select?: RequestNoteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RequestNote
     */
    omit?: RequestNoteOmit<ExtArgs> | null
    /**
     * The data used to create many RequestNotes.
     */
    data: RequestNoteCreateManyInput | RequestNoteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestNoteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RequestNote update
   */
  export type RequestNoteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestNote
     */
    select?: RequestNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestNote
     */
    omit?: RequestNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestNoteInclude<ExtArgs> | null
    /**
     * The data needed to update a RequestNote.
     */
    data: XOR<RequestNoteUpdateInput, RequestNoteUncheckedUpdateInput>
    /**
     * Choose, which RequestNote to update.
     */
    where: RequestNoteWhereUniqueInput
  }

  /**
   * RequestNote updateMany
   */
  export type RequestNoteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RequestNotes.
     */
    data: XOR<RequestNoteUpdateManyMutationInput, RequestNoteUncheckedUpdateManyInput>
    /**
     * Filter which RequestNotes to update
     */
    where?: RequestNoteWhereInput
    /**
     * Limit how many RequestNotes to update.
     */
    limit?: number
  }

  /**
   * RequestNote updateManyAndReturn
   */
  export type RequestNoteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestNote
     */
    select?: RequestNoteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RequestNote
     */
    omit?: RequestNoteOmit<ExtArgs> | null
    /**
     * The data used to update RequestNotes.
     */
    data: XOR<RequestNoteUpdateManyMutationInput, RequestNoteUncheckedUpdateManyInput>
    /**
     * Filter which RequestNotes to update
     */
    where?: RequestNoteWhereInput
    /**
     * Limit how many RequestNotes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestNoteIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RequestNote upsert
   */
  export type RequestNoteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestNote
     */
    select?: RequestNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestNote
     */
    omit?: RequestNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestNoteInclude<ExtArgs> | null
    /**
     * The filter to search for the RequestNote to update in case it exists.
     */
    where: RequestNoteWhereUniqueInput
    /**
     * In case the RequestNote found by the `where` argument doesn't exist, create a new RequestNote with this data.
     */
    create: XOR<RequestNoteCreateInput, RequestNoteUncheckedCreateInput>
    /**
     * In case the RequestNote was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RequestNoteUpdateInput, RequestNoteUncheckedUpdateInput>
  }

  /**
   * RequestNote delete
   */
  export type RequestNoteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestNote
     */
    select?: RequestNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestNote
     */
    omit?: RequestNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestNoteInclude<ExtArgs> | null
    /**
     * Filter which RequestNote to delete.
     */
    where: RequestNoteWhereUniqueInput
  }

  /**
   * RequestNote deleteMany
   */
  export type RequestNoteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RequestNotes to delete
     */
    where?: RequestNoteWhereInput
    /**
     * Limit how many RequestNotes to delete.
     */
    limit?: number
  }

  /**
   * RequestNote without action
   */
  export type RequestNoteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestNote
     */
    select?: RequestNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestNote
     */
    omit?: RequestNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestNoteInclude<ExtArgs> | null
  }


  /**
   * Model RequestLog
   */

  export type AggregateRequestLog = {
    _count: RequestLogCountAggregateOutputType | null
    _avg: RequestLogAvgAggregateOutputType | null
    _sum: RequestLogSumAggregateOutputType | null
    _min: RequestLogMinAggregateOutputType | null
    _max: RequestLogMaxAggregateOutputType | null
  }

  export type RequestLogAvgAggregateOutputType = {
    id: number | null
    requestId: number | null
    userId: number | null
  }

  export type RequestLogSumAggregateOutputType = {
    id: number | null
    requestId: number | null
    userId: number | null
  }

  export type RequestLogMinAggregateOutputType = {
    id: number | null
    requestId: number | null
    userId: number | null
    userName: string | null
    action: string | null
    details: string | null
    createdAt: Date | null
  }

  export type RequestLogMaxAggregateOutputType = {
    id: number | null
    requestId: number | null
    userId: number | null
    userName: string | null
    action: string | null
    details: string | null
    createdAt: Date | null
  }

  export type RequestLogCountAggregateOutputType = {
    id: number
    requestId: number
    userId: number
    userName: number
    action: number
    details: number
    createdAt: number
    _all: number
  }


  export type RequestLogAvgAggregateInputType = {
    id?: true
    requestId?: true
    userId?: true
  }

  export type RequestLogSumAggregateInputType = {
    id?: true
    requestId?: true
    userId?: true
  }

  export type RequestLogMinAggregateInputType = {
    id?: true
    requestId?: true
    userId?: true
    userName?: true
    action?: true
    details?: true
    createdAt?: true
  }

  export type RequestLogMaxAggregateInputType = {
    id?: true
    requestId?: true
    userId?: true
    userName?: true
    action?: true
    details?: true
    createdAt?: true
  }

  export type RequestLogCountAggregateInputType = {
    id?: true
    requestId?: true
    userId?: true
    userName?: true
    action?: true
    details?: true
    createdAt?: true
    _all?: true
  }

  export type RequestLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RequestLog to aggregate.
     */
    where?: RequestLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestLogs to fetch.
     */
    orderBy?: RequestLogOrderByWithRelationInput | RequestLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RequestLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RequestLogs
    **/
    _count?: true | RequestLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RequestLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RequestLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RequestLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RequestLogMaxAggregateInputType
  }

  export type GetRequestLogAggregateType<T extends RequestLogAggregateArgs> = {
        [P in keyof T & keyof AggregateRequestLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRequestLog[P]>
      : GetScalarType<T[P], AggregateRequestLog[P]>
  }




  export type RequestLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RequestLogWhereInput
    orderBy?: RequestLogOrderByWithAggregationInput | RequestLogOrderByWithAggregationInput[]
    by: RequestLogScalarFieldEnum[] | RequestLogScalarFieldEnum
    having?: RequestLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RequestLogCountAggregateInputType | true
    _avg?: RequestLogAvgAggregateInputType
    _sum?: RequestLogSumAggregateInputType
    _min?: RequestLogMinAggregateInputType
    _max?: RequestLogMaxAggregateInputType
  }

  export type RequestLogGroupByOutputType = {
    id: number
    requestId: number
    userId: number
    userName: string
    action: string
    details: string | null
    createdAt: Date
    _count: RequestLogCountAggregateOutputType | null
    _avg: RequestLogAvgAggregateOutputType | null
    _sum: RequestLogSumAggregateOutputType | null
    _min: RequestLogMinAggregateOutputType | null
    _max: RequestLogMaxAggregateOutputType | null
  }

  type GetRequestLogGroupByPayload<T extends RequestLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RequestLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RequestLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RequestLogGroupByOutputType[P]>
            : GetScalarType<T[P], RequestLogGroupByOutputType[P]>
        }
      >
    >


  export type RequestLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestId?: boolean
    userId?: boolean
    userName?: boolean
    action?: boolean
    details?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    request?: boolean | ContactRequestDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["requestLog"]>

  export type RequestLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestId?: boolean
    userId?: boolean
    userName?: boolean
    action?: boolean
    details?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    request?: boolean | ContactRequestDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["requestLog"]>

  export type RequestLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestId?: boolean
    userId?: boolean
    userName?: boolean
    action?: boolean
    details?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    request?: boolean | ContactRequestDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["requestLog"]>

  export type RequestLogSelectScalar = {
    id?: boolean
    requestId?: boolean
    userId?: boolean
    userName?: boolean
    action?: boolean
    details?: boolean
    createdAt?: boolean
  }

  export type RequestLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "requestId" | "userId" | "userName" | "action" | "details" | "createdAt", ExtArgs["result"]["requestLog"]>
  export type RequestLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    request?: boolean | ContactRequestDefaultArgs<ExtArgs>
  }
  export type RequestLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    request?: boolean | ContactRequestDefaultArgs<ExtArgs>
  }
  export type RequestLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    request?: boolean | ContactRequestDefaultArgs<ExtArgs>
  }

  export type $RequestLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RequestLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      request: Prisma.$ContactRequestPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      requestId: number
      userId: number
      userName: string
      action: string
      details: string | null
      createdAt: Date
    }, ExtArgs["result"]["requestLog"]>
    composites: {}
  }

  type RequestLogGetPayload<S extends boolean | null | undefined | RequestLogDefaultArgs> = $Result.GetResult<Prisma.$RequestLogPayload, S>

  type RequestLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RequestLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RequestLogCountAggregateInputType | true
    }

  export interface RequestLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RequestLog'], meta: { name: 'RequestLog' } }
    /**
     * Find zero or one RequestLog that matches the filter.
     * @param {RequestLogFindUniqueArgs} args - Arguments to find a RequestLog
     * @example
     * // Get one RequestLog
     * const requestLog = await prisma.requestLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RequestLogFindUniqueArgs>(args: SelectSubset<T, RequestLogFindUniqueArgs<ExtArgs>>): Prisma__RequestLogClient<$Result.GetResult<Prisma.$RequestLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RequestLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RequestLogFindUniqueOrThrowArgs} args - Arguments to find a RequestLog
     * @example
     * // Get one RequestLog
     * const requestLog = await prisma.requestLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RequestLogFindUniqueOrThrowArgs>(args: SelectSubset<T, RequestLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RequestLogClient<$Result.GetResult<Prisma.$RequestLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RequestLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestLogFindFirstArgs} args - Arguments to find a RequestLog
     * @example
     * // Get one RequestLog
     * const requestLog = await prisma.requestLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RequestLogFindFirstArgs>(args?: SelectSubset<T, RequestLogFindFirstArgs<ExtArgs>>): Prisma__RequestLogClient<$Result.GetResult<Prisma.$RequestLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RequestLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestLogFindFirstOrThrowArgs} args - Arguments to find a RequestLog
     * @example
     * // Get one RequestLog
     * const requestLog = await prisma.requestLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RequestLogFindFirstOrThrowArgs>(args?: SelectSubset<T, RequestLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__RequestLogClient<$Result.GetResult<Prisma.$RequestLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RequestLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RequestLogs
     * const requestLogs = await prisma.requestLog.findMany()
     * 
     * // Get first 10 RequestLogs
     * const requestLogs = await prisma.requestLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const requestLogWithIdOnly = await prisma.requestLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RequestLogFindManyArgs>(args?: SelectSubset<T, RequestLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RequestLog.
     * @param {RequestLogCreateArgs} args - Arguments to create a RequestLog.
     * @example
     * // Create one RequestLog
     * const RequestLog = await prisma.requestLog.create({
     *   data: {
     *     // ... data to create a RequestLog
     *   }
     * })
     * 
     */
    create<T extends RequestLogCreateArgs>(args: SelectSubset<T, RequestLogCreateArgs<ExtArgs>>): Prisma__RequestLogClient<$Result.GetResult<Prisma.$RequestLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RequestLogs.
     * @param {RequestLogCreateManyArgs} args - Arguments to create many RequestLogs.
     * @example
     * // Create many RequestLogs
     * const requestLog = await prisma.requestLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RequestLogCreateManyArgs>(args?: SelectSubset<T, RequestLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RequestLogs and returns the data saved in the database.
     * @param {RequestLogCreateManyAndReturnArgs} args - Arguments to create many RequestLogs.
     * @example
     * // Create many RequestLogs
     * const requestLog = await prisma.requestLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RequestLogs and only return the `id`
     * const requestLogWithIdOnly = await prisma.requestLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RequestLogCreateManyAndReturnArgs>(args?: SelectSubset<T, RequestLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RequestLog.
     * @param {RequestLogDeleteArgs} args - Arguments to delete one RequestLog.
     * @example
     * // Delete one RequestLog
     * const RequestLog = await prisma.requestLog.delete({
     *   where: {
     *     // ... filter to delete one RequestLog
     *   }
     * })
     * 
     */
    delete<T extends RequestLogDeleteArgs>(args: SelectSubset<T, RequestLogDeleteArgs<ExtArgs>>): Prisma__RequestLogClient<$Result.GetResult<Prisma.$RequestLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RequestLog.
     * @param {RequestLogUpdateArgs} args - Arguments to update one RequestLog.
     * @example
     * // Update one RequestLog
     * const requestLog = await prisma.requestLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RequestLogUpdateArgs>(args: SelectSubset<T, RequestLogUpdateArgs<ExtArgs>>): Prisma__RequestLogClient<$Result.GetResult<Prisma.$RequestLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RequestLogs.
     * @param {RequestLogDeleteManyArgs} args - Arguments to filter RequestLogs to delete.
     * @example
     * // Delete a few RequestLogs
     * const { count } = await prisma.requestLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RequestLogDeleteManyArgs>(args?: SelectSubset<T, RequestLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RequestLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RequestLogs
     * const requestLog = await prisma.requestLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RequestLogUpdateManyArgs>(args: SelectSubset<T, RequestLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RequestLogs and returns the data updated in the database.
     * @param {RequestLogUpdateManyAndReturnArgs} args - Arguments to update many RequestLogs.
     * @example
     * // Update many RequestLogs
     * const requestLog = await prisma.requestLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RequestLogs and only return the `id`
     * const requestLogWithIdOnly = await prisma.requestLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RequestLogUpdateManyAndReturnArgs>(args: SelectSubset<T, RequestLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RequestLog.
     * @param {RequestLogUpsertArgs} args - Arguments to update or create a RequestLog.
     * @example
     * // Update or create a RequestLog
     * const requestLog = await prisma.requestLog.upsert({
     *   create: {
     *     // ... data to create a RequestLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RequestLog we want to update
     *   }
     * })
     */
    upsert<T extends RequestLogUpsertArgs>(args: SelectSubset<T, RequestLogUpsertArgs<ExtArgs>>): Prisma__RequestLogClient<$Result.GetResult<Prisma.$RequestLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RequestLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestLogCountArgs} args - Arguments to filter RequestLogs to count.
     * @example
     * // Count the number of RequestLogs
     * const count = await prisma.requestLog.count({
     *   where: {
     *     // ... the filter for the RequestLogs we want to count
     *   }
     * })
    **/
    count<T extends RequestLogCountArgs>(
      args?: Subset<T, RequestLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RequestLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RequestLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RequestLogAggregateArgs>(args: Subset<T, RequestLogAggregateArgs>): Prisma.PrismaPromise<GetRequestLogAggregateType<T>>

    /**
     * Group by RequestLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RequestLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RequestLogGroupByArgs['orderBy'] }
        : { orderBy?: RequestLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RequestLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRequestLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RequestLog model
   */
  readonly fields: RequestLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RequestLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RequestLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    request<T extends ContactRequestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContactRequestDefaultArgs<ExtArgs>>): Prisma__ContactRequestClient<$Result.GetResult<Prisma.$ContactRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RequestLog model
   */
  interface RequestLogFieldRefs {
    readonly id: FieldRef<"RequestLog", 'Int'>
    readonly requestId: FieldRef<"RequestLog", 'Int'>
    readonly userId: FieldRef<"RequestLog", 'Int'>
    readonly userName: FieldRef<"RequestLog", 'String'>
    readonly action: FieldRef<"RequestLog", 'String'>
    readonly details: FieldRef<"RequestLog", 'String'>
    readonly createdAt: FieldRef<"RequestLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RequestLog findUnique
   */
  export type RequestLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestLog
     */
    select?: RequestLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestLog
     */
    omit?: RequestLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestLogInclude<ExtArgs> | null
    /**
     * Filter, which RequestLog to fetch.
     */
    where: RequestLogWhereUniqueInput
  }

  /**
   * RequestLog findUniqueOrThrow
   */
  export type RequestLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestLog
     */
    select?: RequestLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestLog
     */
    omit?: RequestLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestLogInclude<ExtArgs> | null
    /**
     * Filter, which RequestLog to fetch.
     */
    where: RequestLogWhereUniqueInput
  }

  /**
   * RequestLog findFirst
   */
  export type RequestLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestLog
     */
    select?: RequestLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestLog
     */
    omit?: RequestLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestLogInclude<ExtArgs> | null
    /**
     * Filter, which RequestLog to fetch.
     */
    where?: RequestLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestLogs to fetch.
     */
    orderBy?: RequestLogOrderByWithRelationInput | RequestLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RequestLogs.
     */
    cursor?: RequestLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RequestLogs.
     */
    distinct?: RequestLogScalarFieldEnum | RequestLogScalarFieldEnum[]
  }

  /**
   * RequestLog findFirstOrThrow
   */
  export type RequestLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestLog
     */
    select?: RequestLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestLog
     */
    omit?: RequestLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestLogInclude<ExtArgs> | null
    /**
     * Filter, which RequestLog to fetch.
     */
    where?: RequestLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestLogs to fetch.
     */
    orderBy?: RequestLogOrderByWithRelationInput | RequestLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RequestLogs.
     */
    cursor?: RequestLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RequestLogs.
     */
    distinct?: RequestLogScalarFieldEnum | RequestLogScalarFieldEnum[]
  }

  /**
   * RequestLog findMany
   */
  export type RequestLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestLog
     */
    select?: RequestLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestLog
     */
    omit?: RequestLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestLogInclude<ExtArgs> | null
    /**
     * Filter, which RequestLogs to fetch.
     */
    where?: RequestLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestLogs to fetch.
     */
    orderBy?: RequestLogOrderByWithRelationInput | RequestLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RequestLogs.
     */
    cursor?: RequestLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestLogs.
     */
    skip?: number
    distinct?: RequestLogScalarFieldEnum | RequestLogScalarFieldEnum[]
  }

  /**
   * RequestLog create
   */
  export type RequestLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestLog
     */
    select?: RequestLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestLog
     */
    omit?: RequestLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestLogInclude<ExtArgs> | null
    /**
     * The data needed to create a RequestLog.
     */
    data: XOR<RequestLogCreateInput, RequestLogUncheckedCreateInput>
  }

  /**
   * RequestLog createMany
   */
  export type RequestLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RequestLogs.
     */
    data: RequestLogCreateManyInput | RequestLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RequestLog createManyAndReturn
   */
  export type RequestLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestLog
     */
    select?: RequestLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RequestLog
     */
    omit?: RequestLogOmit<ExtArgs> | null
    /**
     * The data used to create many RequestLogs.
     */
    data: RequestLogCreateManyInput | RequestLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RequestLog update
   */
  export type RequestLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestLog
     */
    select?: RequestLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestLog
     */
    omit?: RequestLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestLogInclude<ExtArgs> | null
    /**
     * The data needed to update a RequestLog.
     */
    data: XOR<RequestLogUpdateInput, RequestLogUncheckedUpdateInput>
    /**
     * Choose, which RequestLog to update.
     */
    where: RequestLogWhereUniqueInput
  }

  /**
   * RequestLog updateMany
   */
  export type RequestLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RequestLogs.
     */
    data: XOR<RequestLogUpdateManyMutationInput, RequestLogUncheckedUpdateManyInput>
    /**
     * Filter which RequestLogs to update
     */
    where?: RequestLogWhereInput
    /**
     * Limit how many RequestLogs to update.
     */
    limit?: number
  }

  /**
   * RequestLog updateManyAndReturn
   */
  export type RequestLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestLog
     */
    select?: RequestLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RequestLog
     */
    omit?: RequestLogOmit<ExtArgs> | null
    /**
     * The data used to update RequestLogs.
     */
    data: XOR<RequestLogUpdateManyMutationInput, RequestLogUncheckedUpdateManyInput>
    /**
     * Filter which RequestLogs to update
     */
    where?: RequestLogWhereInput
    /**
     * Limit how many RequestLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RequestLog upsert
   */
  export type RequestLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestLog
     */
    select?: RequestLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestLog
     */
    omit?: RequestLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestLogInclude<ExtArgs> | null
    /**
     * The filter to search for the RequestLog to update in case it exists.
     */
    where: RequestLogWhereUniqueInput
    /**
     * In case the RequestLog found by the `where` argument doesn't exist, create a new RequestLog with this data.
     */
    create: XOR<RequestLogCreateInput, RequestLogUncheckedCreateInput>
    /**
     * In case the RequestLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RequestLogUpdateInput, RequestLogUncheckedUpdateInput>
  }

  /**
   * RequestLog delete
   */
  export type RequestLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestLog
     */
    select?: RequestLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestLog
     */
    omit?: RequestLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestLogInclude<ExtArgs> | null
    /**
     * Filter which RequestLog to delete.
     */
    where: RequestLogWhereUniqueInput
  }

  /**
   * RequestLog deleteMany
   */
  export type RequestLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RequestLogs to delete
     */
    where?: RequestLogWhereInput
    /**
     * Limit how many RequestLogs to delete.
     */
    limit?: number
  }

  /**
   * RequestLog without action
   */
  export type RequestLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestLog
     */
    select?: RequestLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestLog
     */
    omit?: RequestLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestLogInclude<ExtArgs> | null
  }


  /**
   * Model RequestData
   */

  export type AggregateRequestData = {
    _count: RequestDataCountAggregateOutputType | null
    _avg: RequestDataAvgAggregateOutputType | null
    _sum: RequestDataSumAggregateOutputType | null
    _min: RequestDataMinAggregateOutputType | null
    _max: RequestDataMaxAggregateOutputType | null
  }

  export type RequestDataAvgAggregateOutputType = {
    id: number | null
    requestId: number | null
    order: number | null
    version: number | null
    createdById: number | null
  }

  export type RequestDataSumAggregateOutputType = {
    id: number | null
    requestId: number | null
    order: number | null
    version: number | null
    createdById: number | null
  }

  export type RequestDataMinAggregateOutputType = {
    id: number | null
    requestId: number | null
    category: string | null
    label: string | null
    order: number | null
    dataType: string | null
    isValid: boolean | null
    processedBy: string | null
    version: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
  }

  export type RequestDataMaxAggregateOutputType = {
    id: number | null
    requestId: number | null
    category: string | null
    label: string | null
    order: number | null
    dataType: string | null
    isValid: boolean | null
    processedBy: string | null
    version: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
  }

  export type RequestDataCountAggregateOutputType = {
    id: number
    requestId: number
    category: number
    label: number
    order: number
    dataType: number
    data: number
    isValid: number
    processedBy: number
    version: number
    createdAt: number
    updatedAt: number
    createdById: number
    _all: number
  }


  export type RequestDataAvgAggregateInputType = {
    id?: true
    requestId?: true
    order?: true
    version?: true
    createdById?: true
  }

  export type RequestDataSumAggregateInputType = {
    id?: true
    requestId?: true
    order?: true
    version?: true
    createdById?: true
  }

  export type RequestDataMinAggregateInputType = {
    id?: true
    requestId?: true
    category?: true
    label?: true
    order?: true
    dataType?: true
    isValid?: true
    processedBy?: true
    version?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
  }

  export type RequestDataMaxAggregateInputType = {
    id?: true
    requestId?: true
    category?: true
    label?: true
    order?: true
    dataType?: true
    isValid?: true
    processedBy?: true
    version?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
  }

  export type RequestDataCountAggregateInputType = {
    id?: true
    requestId?: true
    category?: true
    label?: true
    order?: true
    dataType?: true
    data?: true
    isValid?: true
    processedBy?: true
    version?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    _all?: true
  }

  export type RequestDataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RequestData to aggregate.
     */
    where?: RequestDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestData to fetch.
     */
    orderBy?: RequestDataOrderByWithRelationInput | RequestDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RequestDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RequestData
    **/
    _count?: true | RequestDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RequestDataAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RequestDataSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RequestDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RequestDataMaxAggregateInputType
  }

  export type GetRequestDataAggregateType<T extends RequestDataAggregateArgs> = {
        [P in keyof T & keyof AggregateRequestData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRequestData[P]>
      : GetScalarType<T[P], AggregateRequestData[P]>
  }




  export type RequestDataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RequestDataWhereInput
    orderBy?: RequestDataOrderByWithAggregationInput | RequestDataOrderByWithAggregationInput[]
    by: RequestDataScalarFieldEnum[] | RequestDataScalarFieldEnum
    having?: RequestDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RequestDataCountAggregateInputType | true
    _avg?: RequestDataAvgAggregateInputType
    _sum?: RequestDataSumAggregateInputType
    _min?: RequestDataMinAggregateInputType
    _max?: RequestDataMaxAggregateInputType
  }

  export type RequestDataGroupByOutputType = {
    id: number
    requestId: number
    category: string
    label: string
    order: number
    dataType: string
    data: JsonValue
    isValid: boolean
    processedBy: string | null
    version: number
    createdAt: Date
    updatedAt: Date
    createdById: number | null
    _count: RequestDataCountAggregateOutputType | null
    _avg: RequestDataAvgAggregateOutputType | null
    _sum: RequestDataSumAggregateOutputType | null
    _min: RequestDataMinAggregateOutputType | null
    _max: RequestDataMaxAggregateOutputType | null
  }

  type GetRequestDataGroupByPayload<T extends RequestDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RequestDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RequestDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RequestDataGroupByOutputType[P]>
            : GetScalarType<T[P], RequestDataGroupByOutputType[P]>
        }
      >
    >


  export type RequestDataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestId?: boolean
    category?: boolean
    label?: boolean
    order?: boolean
    dataType?: boolean
    data?: boolean
    isValid?: boolean
    processedBy?: boolean
    version?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    request?: boolean | ContactRequestDefaultArgs<ExtArgs>
    createdBy?: boolean | RequestData$createdByArgs<ExtArgs>
    history?: boolean | RequestData$historyArgs<ExtArgs>
    _count?: boolean | RequestDataCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["requestData"]>

  export type RequestDataSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestId?: boolean
    category?: boolean
    label?: boolean
    order?: boolean
    dataType?: boolean
    data?: boolean
    isValid?: boolean
    processedBy?: boolean
    version?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    request?: boolean | ContactRequestDefaultArgs<ExtArgs>
    createdBy?: boolean | RequestData$createdByArgs<ExtArgs>
  }, ExtArgs["result"]["requestData"]>

  export type RequestDataSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestId?: boolean
    category?: boolean
    label?: boolean
    order?: boolean
    dataType?: boolean
    data?: boolean
    isValid?: boolean
    processedBy?: boolean
    version?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    request?: boolean | ContactRequestDefaultArgs<ExtArgs>
    createdBy?: boolean | RequestData$createdByArgs<ExtArgs>
  }, ExtArgs["result"]["requestData"]>

  export type RequestDataSelectScalar = {
    id?: boolean
    requestId?: boolean
    category?: boolean
    label?: boolean
    order?: boolean
    dataType?: boolean
    data?: boolean
    isValid?: boolean
    processedBy?: boolean
    version?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
  }

  export type RequestDataOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "requestId" | "category" | "label" | "order" | "dataType" | "data" | "isValid" | "processedBy" | "version" | "createdAt" | "updatedAt" | "createdById", ExtArgs["result"]["requestData"]>
  export type RequestDataInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    request?: boolean | ContactRequestDefaultArgs<ExtArgs>
    createdBy?: boolean | RequestData$createdByArgs<ExtArgs>
    history?: boolean | RequestData$historyArgs<ExtArgs>
    _count?: boolean | RequestDataCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RequestDataIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    request?: boolean | ContactRequestDefaultArgs<ExtArgs>
    createdBy?: boolean | RequestData$createdByArgs<ExtArgs>
  }
  export type RequestDataIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    request?: boolean | ContactRequestDefaultArgs<ExtArgs>
    createdBy?: boolean | RequestData$createdByArgs<ExtArgs>
  }

  export type $RequestDataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RequestData"
    objects: {
      request: Prisma.$ContactRequestPayload<ExtArgs>
      createdBy: Prisma.$UserPayload<ExtArgs> | null
      history: Prisma.$RequestDataHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      requestId: number
      category: string
      label: string
      order: number
      dataType: string
      data: Prisma.JsonValue
      isValid: boolean
      processedBy: string | null
      version: number
      createdAt: Date
      updatedAt: Date
      createdById: number | null
    }, ExtArgs["result"]["requestData"]>
    composites: {}
  }

  type RequestDataGetPayload<S extends boolean | null | undefined | RequestDataDefaultArgs> = $Result.GetResult<Prisma.$RequestDataPayload, S>

  type RequestDataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RequestDataFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RequestDataCountAggregateInputType | true
    }

  export interface RequestDataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RequestData'], meta: { name: 'RequestData' } }
    /**
     * Find zero or one RequestData that matches the filter.
     * @param {RequestDataFindUniqueArgs} args - Arguments to find a RequestData
     * @example
     * // Get one RequestData
     * const requestData = await prisma.requestData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RequestDataFindUniqueArgs>(args: SelectSubset<T, RequestDataFindUniqueArgs<ExtArgs>>): Prisma__RequestDataClient<$Result.GetResult<Prisma.$RequestDataPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RequestData that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RequestDataFindUniqueOrThrowArgs} args - Arguments to find a RequestData
     * @example
     * // Get one RequestData
     * const requestData = await prisma.requestData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RequestDataFindUniqueOrThrowArgs>(args: SelectSubset<T, RequestDataFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RequestDataClient<$Result.GetResult<Prisma.$RequestDataPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RequestData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestDataFindFirstArgs} args - Arguments to find a RequestData
     * @example
     * // Get one RequestData
     * const requestData = await prisma.requestData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RequestDataFindFirstArgs>(args?: SelectSubset<T, RequestDataFindFirstArgs<ExtArgs>>): Prisma__RequestDataClient<$Result.GetResult<Prisma.$RequestDataPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RequestData that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestDataFindFirstOrThrowArgs} args - Arguments to find a RequestData
     * @example
     * // Get one RequestData
     * const requestData = await prisma.requestData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RequestDataFindFirstOrThrowArgs>(args?: SelectSubset<T, RequestDataFindFirstOrThrowArgs<ExtArgs>>): Prisma__RequestDataClient<$Result.GetResult<Prisma.$RequestDataPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RequestData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestDataFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RequestData
     * const requestData = await prisma.requestData.findMany()
     * 
     * // Get first 10 RequestData
     * const requestData = await prisma.requestData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const requestDataWithIdOnly = await prisma.requestData.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RequestDataFindManyArgs>(args?: SelectSubset<T, RequestDataFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestDataPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RequestData.
     * @param {RequestDataCreateArgs} args - Arguments to create a RequestData.
     * @example
     * // Create one RequestData
     * const RequestData = await prisma.requestData.create({
     *   data: {
     *     // ... data to create a RequestData
     *   }
     * })
     * 
     */
    create<T extends RequestDataCreateArgs>(args: SelectSubset<T, RequestDataCreateArgs<ExtArgs>>): Prisma__RequestDataClient<$Result.GetResult<Prisma.$RequestDataPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RequestData.
     * @param {RequestDataCreateManyArgs} args - Arguments to create many RequestData.
     * @example
     * // Create many RequestData
     * const requestData = await prisma.requestData.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RequestDataCreateManyArgs>(args?: SelectSubset<T, RequestDataCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RequestData and returns the data saved in the database.
     * @param {RequestDataCreateManyAndReturnArgs} args - Arguments to create many RequestData.
     * @example
     * // Create many RequestData
     * const requestData = await prisma.requestData.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RequestData and only return the `id`
     * const requestDataWithIdOnly = await prisma.requestData.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RequestDataCreateManyAndReturnArgs>(args?: SelectSubset<T, RequestDataCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestDataPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RequestData.
     * @param {RequestDataDeleteArgs} args - Arguments to delete one RequestData.
     * @example
     * // Delete one RequestData
     * const RequestData = await prisma.requestData.delete({
     *   where: {
     *     // ... filter to delete one RequestData
     *   }
     * })
     * 
     */
    delete<T extends RequestDataDeleteArgs>(args: SelectSubset<T, RequestDataDeleteArgs<ExtArgs>>): Prisma__RequestDataClient<$Result.GetResult<Prisma.$RequestDataPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RequestData.
     * @param {RequestDataUpdateArgs} args - Arguments to update one RequestData.
     * @example
     * // Update one RequestData
     * const requestData = await prisma.requestData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RequestDataUpdateArgs>(args: SelectSubset<T, RequestDataUpdateArgs<ExtArgs>>): Prisma__RequestDataClient<$Result.GetResult<Prisma.$RequestDataPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RequestData.
     * @param {RequestDataDeleteManyArgs} args - Arguments to filter RequestData to delete.
     * @example
     * // Delete a few RequestData
     * const { count } = await prisma.requestData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RequestDataDeleteManyArgs>(args?: SelectSubset<T, RequestDataDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RequestData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RequestData
     * const requestData = await prisma.requestData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RequestDataUpdateManyArgs>(args: SelectSubset<T, RequestDataUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RequestData and returns the data updated in the database.
     * @param {RequestDataUpdateManyAndReturnArgs} args - Arguments to update many RequestData.
     * @example
     * // Update many RequestData
     * const requestData = await prisma.requestData.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RequestData and only return the `id`
     * const requestDataWithIdOnly = await prisma.requestData.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RequestDataUpdateManyAndReturnArgs>(args: SelectSubset<T, RequestDataUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestDataPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RequestData.
     * @param {RequestDataUpsertArgs} args - Arguments to update or create a RequestData.
     * @example
     * // Update or create a RequestData
     * const requestData = await prisma.requestData.upsert({
     *   create: {
     *     // ... data to create a RequestData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RequestData we want to update
     *   }
     * })
     */
    upsert<T extends RequestDataUpsertArgs>(args: SelectSubset<T, RequestDataUpsertArgs<ExtArgs>>): Prisma__RequestDataClient<$Result.GetResult<Prisma.$RequestDataPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RequestData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestDataCountArgs} args - Arguments to filter RequestData to count.
     * @example
     * // Count the number of RequestData
     * const count = await prisma.requestData.count({
     *   where: {
     *     // ... the filter for the RequestData we want to count
     *   }
     * })
    **/
    count<T extends RequestDataCountArgs>(
      args?: Subset<T, RequestDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RequestDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RequestData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RequestDataAggregateArgs>(args: Subset<T, RequestDataAggregateArgs>): Prisma.PrismaPromise<GetRequestDataAggregateType<T>>

    /**
     * Group by RequestData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RequestDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RequestDataGroupByArgs['orderBy'] }
        : { orderBy?: RequestDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RequestDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRequestDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RequestData model
   */
  readonly fields: RequestDataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RequestData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RequestDataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    request<T extends ContactRequestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContactRequestDefaultArgs<ExtArgs>>): Prisma__ContactRequestClient<$Result.GetResult<Prisma.$ContactRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends RequestData$createdByArgs<ExtArgs> = {}>(args?: Subset<T, RequestData$createdByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    history<T extends RequestData$historyArgs<ExtArgs> = {}>(args?: Subset<T, RequestData$historyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestDataHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RequestData model
   */
  interface RequestDataFieldRefs {
    readonly id: FieldRef<"RequestData", 'Int'>
    readonly requestId: FieldRef<"RequestData", 'Int'>
    readonly category: FieldRef<"RequestData", 'String'>
    readonly label: FieldRef<"RequestData", 'String'>
    readonly order: FieldRef<"RequestData", 'Int'>
    readonly dataType: FieldRef<"RequestData", 'String'>
    readonly data: FieldRef<"RequestData", 'Json'>
    readonly isValid: FieldRef<"RequestData", 'Boolean'>
    readonly processedBy: FieldRef<"RequestData", 'String'>
    readonly version: FieldRef<"RequestData", 'Int'>
    readonly createdAt: FieldRef<"RequestData", 'DateTime'>
    readonly updatedAt: FieldRef<"RequestData", 'DateTime'>
    readonly createdById: FieldRef<"RequestData", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * RequestData findUnique
   */
  export type RequestDataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestData
     */
    select?: RequestDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestData
     */
    omit?: RequestDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestDataInclude<ExtArgs> | null
    /**
     * Filter, which RequestData to fetch.
     */
    where: RequestDataWhereUniqueInput
  }

  /**
   * RequestData findUniqueOrThrow
   */
  export type RequestDataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestData
     */
    select?: RequestDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestData
     */
    omit?: RequestDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestDataInclude<ExtArgs> | null
    /**
     * Filter, which RequestData to fetch.
     */
    where: RequestDataWhereUniqueInput
  }

  /**
   * RequestData findFirst
   */
  export type RequestDataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestData
     */
    select?: RequestDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestData
     */
    omit?: RequestDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestDataInclude<ExtArgs> | null
    /**
     * Filter, which RequestData to fetch.
     */
    where?: RequestDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestData to fetch.
     */
    orderBy?: RequestDataOrderByWithRelationInput | RequestDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RequestData.
     */
    cursor?: RequestDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RequestData.
     */
    distinct?: RequestDataScalarFieldEnum | RequestDataScalarFieldEnum[]
  }

  /**
   * RequestData findFirstOrThrow
   */
  export type RequestDataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestData
     */
    select?: RequestDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestData
     */
    omit?: RequestDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestDataInclude<ExtArgs> | null
    /**
     * Filter, which RequestData to fetch.
     */
    where?: RequestDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestData to fetch.
     */
    orderBy?: RequestDataOrderByWithRelationInput | RequestDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RequestData.
     */
    cursor?: RequestDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RequestData.
     */
    distinct?: RequestDataScalarFieldEnum | RequestDataScalarFieldEnum[]
  }

  /**
   * RequestData findMany
   */
  export type RequestDataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestData
     */
    select?: RequestDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestData
     */
    omit?: RequestDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestDataInclude<ExtArgs> | null
    /**
     * Filter, which RequestData to fetch.
     */
    where?: RequestDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestData to fetch.
     */
    orderBy?: RequestDataOrderByWithRelationInput | RequestDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RequestData.
     */
    cursor?: RequestDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestData.
     */
    skip?: number
    distinct?: RequestDataScalarFieldEnum | RequestDataScalarFieldEnum[]
  }

  /**
   * RequestData create
   */
  export type RequestDataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestData
     */
    select?: RequestDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestData
     */
    omit?: RequestDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestDataInclude<ExtArgs> | null
    /**
     * The data needed to create a RequestData.
     */
    data: XOR<RequestDataCreateInput, RequestDataUncheckedCreateInput>
  }

  /**
   * RequestData createMany
   */
  export type RequestDataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RequestData.
     */
    data: RequestDataCreateManyInput | RequestDataCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RequestData createManyAndReturn
   */
  export type RequestDataCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestData
     */
    select?: RequestDataSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RequestData
     */
    omit?: RequestDataOmit<ExtArgs> | null
    /**
     * The data used to create many RequestData.
     */
    data: RequestDataCreateManyInput | RequestDataCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestDataIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RequestData update
   */
  export type RequestDataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestData
     */
    select?: RequestDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestData
     */
    omit?: RequestDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestDataInclude<ExtArgs> | null
    /**
     * The data needed to update a RequestData.
     */
    data: XOR<RequestDataUpdateInput, RequestDataUncheckedUpdateInput>
    /**
     * Choose, which RequestData to update.
     */
    where: RequestDataWhereUniqueInput
  }

  /**
   * RequestData updateMany
   */
  export type RequestDataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RequestData.
     */
    data: XOR<RequestDataUpdateManyMutationInput, RequestDataUncheckedUpdateManyInput>
    /**
     * Filter which RequestData to update
     */
    where?: RequestDataWhereInput
    /**
     * Limit how many RequestData to update.
     */
    limit?: number
  }

  /**
   * RequestData updateManyAndReturn
   */
  export type RequestDataUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestData
     */
    select?: RequestDataSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RequestData
     */
    omit?: RequestDataOmit<ExtArgs> | null
    /**
     * The data used to update RequestData.
     */
    data: XOR<RequestDataUpdateManyMutationInput, RequestDataUncheckedUpdateManyInput>
    /**
     * Filter which RequestData to update
     */
    where?: RequestDataWhereInput
    /**
     * Limit how many RequestData to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestDataIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RequestData upsert
   */
  export type RequestDataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestData
     */
    select?: RequestDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestData
     */
    omit?: RequestDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestDataInclude<ExtArgs> | null
    /**
     * The filter to search for the RequestData to update in case it exists.
     */
    where: RequestDataWhereUniqueInput
    /**
     * In case the RequestData found by the `where` argument doesn't exist, create a new RequestData with this data.
     */
    create: XOR<RequestDataCreateInput, RequestDataUncheckedCreateInput>
    /**
     * In case the RequestData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RequestDataUpdateInput, RequestDataUncheckedUpdateInput>
  }

  /**
   * RequestData delete
   */
  export type RequestDataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestData
     */
    select?: RequestDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestData
     */
    omit?: RequestDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestDataInclude<ExtArgs> | null
    /**
     * Filter which RequestData to delete.
     */
    where: RequestDataWhereUniqueInput
  }

  /**
   * RequestData deleteMany
   */
  export type RequestDataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RequestData to delete
     */
    where?: RequestDataWhereInput
    /**
     * Limit how many RequestData to delete.
     */
    limit?: number
  }

  /**
   * RequestData.createdBy
   */
  export type RequestData$createdByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * RequestData.history
   */
  export type RequestData$historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestDataHistory
     */
    select?: RequestDataHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestDataHistory
     */
    omit?: RequestDataHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestDataHistoryInclude<ExtArgs> | null
    where?: RequestDataHistoryWhereInput
    orderBy?: RequestDataHistoryOrderByWithRelationInput | RequestDataHistoryOrderByWithRelationInput[]
    cursor?: RequestDataHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RequestDataHistoryScalarFieldEnum | RequestDataHistoryScalarFieldEnum[]
  }

  /**
   * RequestData without action
   */
  export type RequestDataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestData
     */
    select?: RequestDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestData
     */
    omit?: RequestDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestDataInclude<ExtArgs> | null
  }


  /**
   * Model RequestDataHistory
   */

  export type AggregateRequestDataHistory = {
    _count: RequestDataHistoryCountAggregateOutputType | null
    _avg: RequestDataHistoryAvgAggregateOutputType | null
    _sum: RequestDataHistorySumAggregateOutputType | null
    _min: RequestDataHistoryMinAggregateOutputType | null
    _max: RequestDataHistoryMaxAggregateOutputType | null
  }

  export type RequestDataHistoryAvgAggregateOutputType = {
    id: number | null
    requestDataId: number | null
    version: number | null
    userId: number | null
  }

  export type RequestDataHistorySumAggregateOutputType = {
    id: number | null
    requestDataId: number | null
    version: number | null
    userId: number | null
  }

  export type RequestDataHistoryMinAggregateOutputType = {
    id: number | null
    requestDataId: number | null
    changedBy: string | null
    changeReason: string | null
    version: number | null
    createdAt: Date | null
    userId: number | null
  }

  export type RequestDataHistoryMaxAggregateOutputType = {
    id: number | null
    requestDataId: number | null
    changedBy: string | null
    changeReason: string | null
    version: number | null
    createdAt: Date | null
    userId: number | null
  }

  export type RequestDataHistoryCountAggregateOutputType = {
    id: number
    requestDataId: number
    data: number
    changedBy: number
    changeReason: number
    version: number
    createdAt: number
    userId: number
    _all: number
  }


  export type RequestDataHistoryAvgAggregateInputType = {
    id?: true
    requestDataId?: true
    version?: true
    userId?: true
  }

  export type RequestDataHistorySumAggregateInputType = {
    id?: true
    requestDataId?: true
    version?: true
    userId?: true
  }

  export type RequestDataHistoryMinAggregateInputType = {
    id?: true
    requestDataId?: true
    changedBy?: true
    changeReason?: true
    version?: true
    createdAt?: true
    userId?: true
  }

  export type RequestDataHistoryMaxAggregateInputType = {
    id?: true
    requestDataId?: true
    changedBy?: true
    changeReason?: true
    version?: true
    createdAt?: true
    userId?: true
  }

  export type RequestDataHistoryCountAggregateInputType = {
    id?: true
    requestDataId?: true
    data?: true
    changedBy?: true
    changeReason?: true
    version?: true
    createdAt?: true
    userId?: true
    _all?: true
  }

  export type RequestDataHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RequestDataHistory to aggregate.
     */
    where?: RequestDataHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestDataHistories to fetch.
     */
    orderBy?: RequestDataHistoryOrderByWithRelationInput | RequestDataHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RequestDataHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestDataHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestDataHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RequestDataHistories
    **/
    _count?: true | RequestDataHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RequestDataHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RequestDataHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RequestDataHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RequestDataHistoryMaxAggregateInputType
  }

  export type GetRequestDataHistoryAggregateType<T extends RequestDataHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateRequestDataHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRequestDataHistory[P]>
      : GetScalarType<T[P], AggregateRequestDataHistory[P]>
  }




  export type RequestDataHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RequestDataHistoryWhereInput
    orderBy?: RequestDataHistoryOrderByWithAggregationInput | RequestDataHistoryOrderByWithAggregationInput[]
    by: RequestDataHistoryScalarFieldEnum[] | RequestDataHistoryScalarFieldEnum
    having?: RequestDataHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RequestDataHistoryCountAggregateInputType | true
    _avg?: RequestDataHistoryAvgAggregateInputType
    _sum?: RequestDataHistorySumAggregateInputType
    _min?: RequestDataHistoryMinAggregateInputType
    _max?: RequestDataHistoryMaxAggregateInputType
  }

  export type RequestDataHistoryGroupByOutputType = {
    id: number
    requestDataId: number
    data: JsonValue
    changedBy: string | null
    changeReason: string | null
    version: number
    createdAt: Date
    userId: number | null
    _count: RequestDataHistoryCountAggregateOutputType | null
    _avg: RequestDataHistoryAvgAggregateOutputType | null
    _sum: RequestDataHistorySumAggregateOutputType | null
    _min: RequestDataHistoryMinAggregateOutputType | null
    _max: RequestDataHistoryMaxAggregateOutputType | null
  }

  type GetRequestDataHistoryGroupByPayload<T extends RequestDataHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RequestDataHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RequestDataHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RequestDataHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], RequestDataHistoryGroupByOutputType[P]>
        }
      >
    >


  export type RequestDataHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestDataId?: boolean
    data?: boolean
    changedBy?: boolean
    changeReason?: boolean
    version?: boolean
    createdAt?: boolean
    userId?: boolean
    requestData?: boolean | RequestDataDefaultArgs<ExtArgs>
    user?: boolean | RequestDataHistory$userArgs<ExtArgs>
  }, ExtArgs["result"]["requestDataHistory"]>

  export type RequestDataHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestDataId?: boolean
    data?: boolean
    changedBy?: boolean
    changeReason?: boolean
    version?: boolean
    createdAt?: boolean
    userId?: boolean
    requestData?: boolean | RequestDataDefaultArgs<ExtArgs>
    user?: boolean | RequestDataHistory$userArgs<ExtArgs>
  }, ExtArgs["result"]["requestDataHistory"]>

  export type RequestDataHistorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestDataId?: boolean
    data?: boolean
    changedBy?: boolean
    changeReason?: boolean
    version?: boolean
    createdAt?: boolean
    userId?: boolean
    requestData?: boolean | RequestDataDefaultArgs<ExtArgs>
    user?: boolean | RequestDataHistory$userArgs<ExtArgs>
  }, ExtArgs["result"]["requestDataHistory"]>

  export type RequestDataHistorySelectScalar = {
    id?: boolean
    requestDataId?: boolean
    data?: boolean
    changedBy?: boolean
    changeReason?: boolean
    version?: boolean
    createdAt?: boolean
    userId?: boolean
  }

  export type RequestDataHistoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "requestDataId" | "data" | "changedBy" | "changeReason" | "version" | "createdAt" | "userId", ExtArgs["result"]["requestDataHistory"]>
  export type RequestDataHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    requestData?: boolean | RequestDataDefaultArgs<ExtArgs>
    user?: boolean | RequestDataHistory$userArgs<ExtArgs>
  }
  export type RequestDataHistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    requestData?: boolean | RequestDataDefaultArgs<ExtArgs>
    user?: boolean | RequestDataHistory$userArgs<ExtArgs>
  }
  export type RequestDataHistoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    requestData?: boolean | RequestDataDefaultArgs<ExtArgs>
    user?: boolean | RequestDataHistory$userArgs<ExtArgs>
  }

  export type $RequestDataHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RequestDataHistory"
    objects: {
      requestData: Prisma.$RequestDataPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      requestDataId: number
      data: Prisma.JsonValue
      changedBy: string | null
      changeReason: string | null
      version: number
      createdAt: Date
      userId: number | null
    }, ExtArgs["result"]["requestDataHistory"]>
    composites: {}
  }

  type RequestDataHistoryGetPayload<S extends boolean | null | undefined | RequestDataHistoryDefaultArgs> = $Result.GetResult<Prisma.$RequestDataHistoryPayload, S>

  type RequestDataHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RequestDataHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RequestDataHistoryCountAggregateInputType | true
    }

  export interface RequestDataHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RequestDataHistory'], meta: { name: 'RequestDataHistory' } }
    /**
     * Find zero or one RequestDataHistory that matches the filter.
     * @param {RequestDataHistoryFindUniqueArgs} args - Arguments to find a RequestDataHistory
     * @example
     * // Get one RequestDataHistory
     * const requestDataHistory = await prisma.requestDataHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RequestDataHistoryFindUniqueArgs>(args: SelectSubset<T, RequestDataHistoryFindUniqueArgs<ExtArgs>>): Prisma__RequestDataHistoryClient<$Result.GetResult<Prisma.$RequestDataHistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RequestDataHistory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RequestDataHistoryFindUniqueOrThrowArgs} args - Arguments to find a RequestDataHistory
     * @example
     * // Get one RequestDataHistory
     * const requestDataHistory = await prisma.requestDataHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RequestDataHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, RequestDataHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RequestDataHistoryClient<$Result.GetResult<Prisma.$RequestDataHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RequestDataHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestDataHistoryFindFirstArgs} args - Arguments to find a RequestDataHistory
     * @example
     * // Get one RequestDataHistory
     * const requestDataHistory = await prisma.requestDataHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RequestDataHistoryFindFirstArgs>(args?: SelectSubset<T, RequestDataHistoryFindFirstArgs<ExtArgs>>): Prisma__RequestDataHistoryClient<$Result.GetResult<Prisma.$RequestDataHistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RequestDataHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestDataHistoryFindFirstOrThrowArgs} args - Arguments to find a RequestDataHistory
     * @example
     * // Get one RequestDataHistory
     * const requestDataHistory = await prisma.requestDataHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RequestDataHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, RequestDataHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__RequestDataHistoryClient<$Result.GetResult<Prisma.$RequestDataHistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RequestDataHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestDataHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RequestDataHistories
     * const requestDataHistories = await prisma.requestDataHistory.findMany()
     * 
     * // Get first 10 RequestDataHistories
     * const requestDataHistories = await prisma.requestDataHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const requestDataHistoryWithIdOnly = await prisma.requestDataHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RequestDataHistoryFindManyArgs>(args?: SelectSubset<T, RequestDataHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestDataHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RequestDataHistory.
     * @param {RequestDataHistoryCreateArgs} args - Arguments to create a RequestDataHistory.
     * @example
     * // Create one RequestDataHistory
     * const RequestDataHistory = await prisma.requestDataHistory.create({
     *   data: {
     *     // ... data to create a RequestDataHistory
     *   }
     * })
     * 
     */
    create<T extends RequestDataHistoryCreateArgs>(args: SelectSubset<T, RequestDataHistoryCreateArgs<ExtArgs>>): Prisma__RequestDataHistoryClient<$Result.GetResult<Prisma.$RequestDataHistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RequestDataHistories.
     * @param {RequestDataHistoryCreateManyArgs} args - Arguments to create many RequestDataHistories.
     * @example
     * // Create many RequestDataHistories
     * const requestDataHistory = await prisma.requestDataHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RequestDataHistoryCreateManyArgs>(args?: SelectSubset<T, RequestDataHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RequestDataHistories and returns the data saved in the database.
     * @param {RequestDataHistoryCreateManyAndReturnArgs} args - Arguments to create many RequestDataHistories.
     * @example
     * // Create many RequestDataHistories
     * const requestDataHistory = await prisma.requestDataHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RequestDataHistories and only return the `id`
     * const requestDataHistoryWithIdOnly = await prisma.requestDataHistory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RequestDataHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, RequestDataHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestDataHistoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RequestDataHistory.
     * @param {RequestDataHistoryDeleteArgs} args - Arguments to delete one RequestDataHistory.
     * @example
     * // Delete one RequestDataHistory
     * const RequestDataHistory = await prisma.requestDataHistory.delete({
     *   where: {
     *     // ... filter to delete one RequestDataHistory
     *   }
     * })
     * 
     */
    delete<T extends RequestDataHistoryDeleteArgs>(args: SelectSubset<T, RequestDataHistoryDeleteArgs<ExtArgs>>): Prisma__RequestDataHistoryClient<$Result.GetResult<Prisma.$RequestDataHistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RequestDataHistory.
     * @param {RequestDataHistoryUpdateArgs} args - Arguments to update one RequestDataHistory.
     * @example
     * // Update one RequestDataHistory
     * const requestDataHistory = await prisma.requestDataHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RequestDataHistoryUpdateArgs>(args: SelectSubset<T, RequestDataHistoryUpdateArgs<ExtArgs>>): Prisma__RequestDataHistoryClient<$Result.GetResult<Prisma.$RequestDataHistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RequestDataHistories.
     * @param {RequestDataHistoryDeleteManyArgs} args - Arguments to filter RequestDataHistories to delete.
     * @example
     * // Delete a few RequestDataHistories
     * const { count } = await prisma.requestDataHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RequestDataHistoryDeleteManyArgs>(args?: SelectSubset<T, RequestDataHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RequestDataHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestDataHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RequestDataHistories
     * const requestDataHistory = await prisma.requestDataHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RequestDataHistoryUpdateManyArgs>(args: SelectSubset<T, RequestDataHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RequestDataHistories and returns the data updated in the database.
     * @param {RequestDataHistoryUpdateManyAndReturnArgs} args - Arguments to update many RequestDataHistories.
     * @example
     * // Update many RequestDataHistories
     * const requestDataHistory = await prisma.requestDataHistory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RequestDataHistories and only return the `id`
     * const requestDataHistoryWithIdOnly = await prisma.requestDataHistory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RequestDataHistoryUpdateManyAndReturnArgs>(args: SelectSubset<T, RequestDataHistoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestDataHistoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RequestDataHistory.
     * @param {RequestDataHistoryUpsertArgs} args - Arguments to update or create a RequestDataHistory.
     * @example
     * // Update or create a RequestDataHistory
     * const requestDataHistory = await prisma.requestDataHistory.upsert({
     *   create: {
     *     // ... data to create a RequestDataHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RequestDataHistory we want to update
     *   }
     * })
     */
    upsert<T extends RequestDataHistoryUpsertArgs>(args: SelectSubset<T, RequestDataHistoryUpsertArgs<ExtArgs>>): Prisma__RequestDataHistoryClient<$Result.GetResult<Prisma.$RequestDataHistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RequestDataHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestDataHistoryCountArgs} args - Arguments to filter RequestDataHistories to count.
     * @example
     * // Count the number of RequestDataHistories
     * const count = await prisma.requestDataHistory.count({
     *   where: {
     *     // ... the filter for the RequestDataHistories we want to count
     *   }
     * })
    **/
    count<T extends RequestDataHistoryCountArgs>(
      args?: Subset<T, RequestDataHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RequestDataHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RequestDataHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestDataHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RequestDataHistoryAggregateArgs>(args: Subset<T, RequestDataHistoryAggregateArgs>): Prisma.PrismaPromise<GetRequestDataHistoryAggregateType<T>>

    /**
     * Group by RequestDataHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestDataHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RequestDataHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RequestDataHistoryGroupByArgs['orderBy'] }
        : { orderBy?: RequestDataHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RequestDataHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRequestDataHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RequestDataHistory model
   */
  readonly fields: RequestDataHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RequestDataHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RequestDataHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    requestData<T extends RequestDataDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RequestDataDefaultArgs<ExtArgs>>): Prisma__RequestDataClient<$Result.GetResult<Prisma.$RequestDataPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends RequestDataHistory$userArgs<ExtArgs> = {}>(args?: Subset<T, RequestDataHistory$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RequestDataHistory model
   */
  interface RequestDataHistoryFieldRefs {
    readonly id: FieldRef<"RequestDataHistory", 'Int'>
    readonly requestDataId: FieldRef<"RequestDataHistory", 'Int'>
    readonly data: FieldRef<"RequestDataHistory", 'Json'>
    readonly changedBy: FieldRef<"RequestDataHistory", 'String'>
    readonly changeReason: FieldRef<"RequestDataHistory", 'String'>
    readonly version: FieldRef<"RequestDataHistory", 'Int'>
    readonly createdAt: FieldRef<"RequestDataHistory", 'DateTime'>
    readonly userId: FieldRef<"RequestDataHistory", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * RequestDataHistory findUnique
   */
  export type RequestDataHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestDataHistory
     */
    select?: RequestDataHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestDataHistory
     */
    omit?: RequestDataHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestDataHistoryInclude<ExtArgs> | null
    /**
     * Filter, which RequestDataHistory to fetch.
     */
    where: RequestDataHistoryWhereUniqueInput
  }

  /**
   * RequestDataHistory findUniqueOrThrow
   */
  export type RequestDataHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestDataHistory
     */
    select?: RequestDataHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestDataHistory
     */
    omit?: RequestDataHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestDataHistoryInclude<ExtArgs> | null
    /**
     * Filter, which RequestDataHistory to fetch.
     */
    where: RequestDataHistoryWhereUniqueInput
  }

  /**
   * RequestDataHistory findFirst
   */
  export type RequestDataHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestDataHistory
     */
    select?: RequestDataHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestDataHistory
     */
    omit?: RequestDataHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestDataHistoryInclude<ExtArgs> | null
    /**
     * Filter, which RequestDataHistory to fetch.
     */
    where?: RequestDataHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestDataHistories to fetch.
     */
    orderBy?: RequestDataHistoryOrderByWithRelationInput | RequestDataHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RequestDataHistories.
     */
    cursor?: RequestDataHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestDataHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestDataHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RequestDataHistories.
     */
    distinct?: RequestDataHistoryScalarFieldEnum | RequestDataHistoryScalarFieldEnum[]
  }

  /**
   * RequestDataHistory findFirstOrThrow
   */
  export type RequestDataHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestDataHistory
     */
    select?: RequestDataHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestDataHistory
     */
    omit?: RequestDataHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestDataHistoryInclude<ExtArgs> | null
    /**
     * Filter, which RequestDataHistory to fetch.
     */
    where?: RequestDataHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestDataHistories to fetch.
     */
    orderBy?: RequestDataHistoryOrderByWithRelationInput | RequestDataHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RequestDataHistories.
     */
    cursor?: RequestDataHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestDataHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestDataHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RequestDataHistories.
     */
    distinct?: RequestDataHistoryScalarFieldEnum | RequestDataHistoryScalarFieldEnum[]
  }

  /**
   * RequestDataHistory findMany
   */
  export type RequestDataHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestDataHistory
     */
    select?: RequestDataHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestDataHistory
     */
    omit?: RequestDataHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestDataHistoryInclude<ExtArgs> | null
    /**
     * Filter, which RequestDataHistories to fetch.
     */
    where?: RequestDataHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestDataHistories to fetch.
     */
    orderBy?: RequestDataHistoryOrderByWithRelationInput | RequestDataHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RequestDataHistories.
     */
    cursor?: RequestDataHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestDataHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestDataHistories.
     */
    skip?: number
    distinct?: RequestDataHistoryScalarFieldEnum | RequestDataHistoryScalarFieldEnum[]
  }

  /**
   * RequestDataHistory create
   */
  export type RequestDataHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestDataHistory
     */
    select?: RequestDataHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestDataHistory
     */
    omit?: RequestDataHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestDataHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a RequestDataHistory.
     */
    data: XOR<RequestDataHistoryCreateInput, RequestDataHistoryUncheckedCreateInput>
  }

  /**
   * RequestDataHistory createMany
   */
  export type RequestDataHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RequestDataHistories.
     */
    data: RequestDataHistoryCreateManyInput | RequestDataHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RequestDataHistory createManyAndReturn
   */
  export type RequestDataHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestDataHistory
     */
    select?: RequestDataHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RequestDataHistory
     */
    omit?: RequestDataHistoryOmit<ExtArgs> | null
    /**
     * The data used to create many RequestDataHistories.
     */
    data: RequestDataHistoryCreateManyInput | RequestDataHistoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestDataHistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RequestDataHistory update
   */
  export type RequestDataHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestDataHistory
     */
    select?: RequestDataHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestDataHistory
     */
    omit?: RequestDataHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestDataHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a RequestDataHistory.
     */
    data: XOR<RequestDataHistoryUpdateInput, RequestDataHistoryUncheckedUpdateInput>
    /**
     * Choose, which RequestDataHistory to update.
     */
    where: RequestDataHistoryWhereUniqueInput
  }

  /**
   * RequestDataHistory updateMany
   */
  export type RequestDataHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RequestDataHistories.
     */
    data: XOR<RequestDataHistoryUpdateManyMutationInput, RequestDataHistoryUncheckedUpdateManyInput>
    /**
     * Filter which RequestDataHistories to update
     */
    where?: RequestDataHistoryWhereInput
    /**
     * Limit how many RequestDataHistories to update.
     */
    limit?: number
  }

  /**
   * RequestDataHistory updateManyAndReturn
   */
  export type RequestDataHistoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestDataHistory
     */
    select?: RequestDataHistorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RequestDataHistory
     */
    omit?: RequestDataHistoryOmit<ExtArgs> | null
    /**
     * The data used to update RequestDataHistories.
     */
    data: XOR<RequestDataHistoryUpdateManyMutationInput, RequestDataHistoryUncheckedUpdateManyInput>
    /**
     * Filter which RequestDataHistories to update
     */
    where?: RequestDataHistoryWhereInput
    /**
     * Limit how many RequestDataHistories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestDataHistoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RequestDataHistory upsert
   */
  export type RequestDataHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestDataHistory
     */
    select?: RequestDataHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestDataHistory
     */
    omit?: RequestDataHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestDataHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the RequestDataHistory to update in case it exists.
     */
    where: RequestDataHistoryWhereUniqueInput
    /**
     * In case the RequestDataHistory found by the `where` argument doesn't exist, create a new RequestDataHistory with this data.
     */
    create: XOR<RequestDataHistoryCreateInput, RequestDataHistoryUncheckedCreateInput>
    /**
     * In case the RequestDataHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RequestDataHistoryUpdateInput, RequestDataHistoryUncheckedUpdateInput>
  }

  /**
   * RequestDataHistory delete
   */
  export type RequestDataHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestDataHistory
     */
    select?: RequestDataHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestDataHistory
     */
    omit?: RequestDataHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestDataHistoryInclude<ExtArgs> | null
    /**
     * Filter which RequestDataHistory to delete.
     */
    where: RequestDataHistoryWhereUniqueInput
  }

  /**
   * RequestDataHistory deleteMany
   */
  export type RequestDataHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RequestDataHistories to delete
     */
    where?: RequestDataHistoryWhereInput
    /**
     * Limit how many RequestDataHistories to delete.
     */
    limit?: number
  }

  /**
   * RequestDataHistory.user
   */
  export type RequestDataHistory$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * RequestDataHistory without action
   */
  export type RequestDataHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestDataHistory
     */
    select?: RequestDataHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestDataHistory
     */
    omit?: RequestDataHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestDataHistoryInclude<ExtArgs> | null
  }


  /**
   * Model N8NWebhook
   */

  export type AggregateN8NWebhook = {
    _count: N8NWebhookCountAggregateOutputType | null
    _avg: N8NWebhookAvgAggregateOutputType | null
    _sum: N8NWebhookSumAggregateOutputType | null
    _min: N8NWebhookMinAggregateOutputType | null
    _max: N8NWebhookMaxAggregateOutputType | null
  }

  export type N8NWebhookAvgAggregateOutputType = {
    id: number | null
  }

  export type N8NWebhookSumAggregateOutputType = {
    id: number | null
  }

  export type N8NWebhookMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    url: string | null
    workflowId: string | null
    active: boolean | null
    category: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type N8NWebhookMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    url: string | null
    workflowId: string | null
    active: boolean | null
    category: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type N8NWebhookCountAggregateOutputType = {
    id: number
    name: number
    description: number
    url: number
    workflowId: number
    active: number
    category: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type N8NWebhookAvgAggregateInputType = {
    id?: true
  }

  export type N8NWebhookSumAggregateInputType = {
    id?: true
  }

  export type N8NWebhookMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    url?: true
    workflowId?: true
    active?: true
    category?: true
    createdAt?: true
    updatedAt?: true
  }

  export type N8NWebhookMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    url?: true
    workflowId?: true
    active?: true
    category?: true
    createdAt?: true
    updatedAt?: true
  }

  export type N8NWebhookCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    url?: true
    workflowId?: true
    active?: true
    category?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type N8NWebhookAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which N8NWebhook to aggregate.
     */
    where?: N8NWebhookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of N8NWebhooks to fetch.
     */
    orderBy?: N8NWebhookOrderByWithRelationInput | N8NWebhookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: N8NWebhookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` N8NWebhooks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` N8NWebhooks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned N8NWebhooks
    **/
    _count?: true | N8NWebhookCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: N8NWebhookAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: N8NWebhookSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: N8NWebhookMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: N8NWebhookMaxAggregateInputType
  }

  export type GetN8NWebhookAggregateType<T extends N8NWebhookAggregateArgs> = {
        [P in keyof T & keyof AggregateN8NWebhook]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateN8NWebhook[P]>
      : GetScalarType<T[P], AggregateN8NWebhook[P]>
  }




  export type N8NWebhookGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: N8NWebhookWhereInput
    orderBy?: N8NWebhookOrderByWithAggregationInput | N8NWebhookOrderByWithAggregationInput[]
    by: N8NWebhookScalarFieldEnum[] | N8NWebhookScalarFieldEnum
    having?: N8NWebhookScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: N8NWebhookCountAggregateInputType | true
    _avg?: N8NWebhookAvgAggregateInputType
    _sum?: N8NWebhookSumAggregateInputType
    _min?: N8NWebhookMinAggregateInputType
    _max?: N8NWebhookMaxAggregateInputType
  }

  export type N8NWebhookGroupByOutputType = {
    id: number
    name: string
    description: string | null
    url: string
    workflowId: string | null
    active: boolean
    category: string
    createdAt: Date
    updatedAt: Date
    _count: N8NWebhookCountAggregateOutputType | null
    _avg: N8NWebhookAvgAggregateOutputType | null
    _sum: N8NWebhookSumAggregateOutputType | null
    _min: N8NWebhookMinAggregateOutputType | null
    _max: N8NWebhookMaxAggregateOutputType | null
  }

  type GetN8NWebhookGroupByPayload<T extends N8NWebhookGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<N8NWebhookGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof N8NWebhookGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], N8NWebhookGroupByOutputType[P]>
            : GetScalarType<T[P], N8NWebhookGroupByOutputType[P]>
        }
      >
    >


  export type N8NWebhookSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    url?: boolean
    workflowId?: boolean
    active?: boolean
    category?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["n8NWebhook"]>

  export type N8NWebhookSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    url?: boolean
    workflowId?: boolean
    active?: boolean
    category?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["n8NWebhook"]>

  export type N8NWebhookSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    url?: boolean
    workflowId?: boolean
    active?: boolean
    category?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["n8NWebhook"]>

  export type N8NWebhookSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    url?: boolean
    workflowId?: boolean
    active?: boolean
    category?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type N8NWebhookOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "url" | "workflowId" | "active" | "category" | "createdAt" | "updatedAt", ExtArgs["result"]["n8NWebhook"]>

  export type $N8NWebhookPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "N8NWebhook"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string | null
      url: string
      workflowId: string | null
      active: boolean
      category: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["n8NWebhook"]>
    composites: {}
  }

  type N8NWebhookGetPayload<S extends boolean | null | undefined | N8NWebhookDefaultArgs> = $Result.GetResult<Prisma.$N8NWebhookPayload, S>

  type N8NWebhookCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<N8NWebhookFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: N8NWebhookCountAggregateInputType | true
    }

  export interface N8NWebhookDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['N8NWebhook'], meta: { name: 'N8NWebhook' } }
    /**
     * Find zero or one N8NWebhook that matches the filter.
     * @param {N8NWebhookFindUniqueArgs} args - Arguments to find a N8NWebhook
     * @example
     * // Get one N8NWebhook
     * const n8NWebhook = await prisma.n8NWebhook.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends N8NWebhookFindUniqueArgs>(args: SelectSubset<T, N8NWebhookFindUniqueArgs<ExtArgs>>): Prisma__N8NWebhookClient<$Result.GetResult<Prisma.$N8NWebhookPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one N8NWebhook that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {N8NWebhookFindUniqueOrThrowArgs} args - Arguments to find a N8NWebhook
     * @example
     * // Get one N8NWebhook
     * const n8NWebhook = await prisma.n8NWebhook.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends N8NWebhookFindUniqueOrThrowArgs>(args: SelectSubset<T, N8NWebhookFindUniqueOrThrowArgs<ExtArgs>>): Prisma__N8NWebhookClient<$Result.GetResult<Prisma.$N8NWebhookPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first N8NWebhook that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {N8NWebhookFindFirstArgs} args - Arguments to find a N8NWebhook
     * @example
     * // Get one N8NWebhook
     * const n8NWebhook = await prisma.n8NWebhook.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends N8NWebhookFindFirstArgs>(args?: SelectSubset<T, N8NWebhookFindFirstArgs<ExtArgs>>): Prisma__N8NWebhookClient<$Result.GetResult<Prisma.$N8NWebhookPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first N8NWebhook that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {N8NWebhookFindFirstOrThrowArgs} args - Arguments to find a N8NWebhook
     * @example
     * // Get one N8NWebhook
     * const n8NWebhook = await prisma.n8NWebhook.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends N8NWebhookFindFirstOrThrowArgs>(args?: SelectSubset<T, N8NWebhookFindFirstOrThrowArgs<ExtArgs>>): Prisma__N8NWebhookClient<$Result.GetResult<Prisma.$N8NWebhookPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more N8NWebhooks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {N8NWebhookFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all N8NWebhooks
     * const n8NWebhooks = await prisma.n8NWebhook.findMany()
     * 
     * // Get first 10 N8NWebhooks
     * const n8NWebhooks = await prisma.n8NWebhook.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const n8NWebhookWithIdOnly = await prisma.n8NWebhook.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends N8NWebhookFindManyArgs>(args?: SelectSubset<T, N8NWebhookFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$N8NWebhookPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a N8NWebhook.
     * @param {N8NWebhookCreateArgs} args - Arguments to create a N8NWebhook.
     * @example
     * // Create one N8NWebhook
     * const N8NWebhook = await prisma.n8NWebhook.create({
     *   data: {
     *     // ... data to create a N8NWebhook
     *   }
     * })
     * 
     */
    create<T extends N8NWebhookCreateArgs>(args: SelectSubset<T, N8NWebhookCreateArgs<ExtArgs>>): Prisma__N8NWebhookClient<$Result.GetResult<Prisma.$N8NWebhookPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many N8NWebhooks.
     * @param {N8NWebhookCreateManyArgs} args - Arguments to create many N8NWebhooks.
     * @example
     * // Create many N8NWebhooks
     * const n8NWebhook = await prisma.n8NWebhook.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends N8NWebhookCreateManyArgs>(args?: SelectSubset<T, N8NWebhookCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many N8NWebhooks and returns the data saved in the database.
     * @param {N8NWebhookCreateManyAndReturnArgs} args - Arguments to create many N8NWebhooks.
     * @example
     * // Create many N8NWebhooks
     * const n8NWebhook = await prisma.n8NWebhook.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many N8NWebhooks and only return the `id`
     * const n8NWebhookWithIdOnly = await prisma.n8NWebhook.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends N8NWebhookCreateManyAndReturnArgs>(args?: SelectSubset<T, N8NWebhookCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$N8NWebhookPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a N8NWebhook.
     * @param {N8NWebhookDeleteArgs} args - Arguments to delete one N8NWebhook.
     * @example
     * // Delete one N8NWebhook
     * const N8NWebhook = await prisma.n8NWebhook.delete({
     *   where: {
     *     // ... filter to delete one N8NWebhook
     *   }
     * })
     * 
     */
    delete<T extends N8NWebhookDeleteArgs>(args: SelectSubset<T, N8NWebhookDeleteArgs<ExtArgs>>): Prisma__N8NWebhookClient<$Result.GetResult<Prisma.$N8NWebhookPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one N8NWebhook.
     * @param {N8NWebhookUpdateArgs} args - Arguments to update one N8NWebhook.
     * @example
     * // Update one N8NWebhook
     * const n8NWebhook = await prisma.n8NWebhook.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends N8NWebhookUpdateArgs>(args: SelectSubset<T, N8NWebhookUpdateArgs<ExtArgs>>): Prisma__N8NWebhookClient<$Result.GetResult<Prisma.$N8NWebhookPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more N8NWebhooks.
     * @param {N8NWebhookDeleteManyArgs} args - Arguments to filter N8NWebhooks to delete.
     * @example
     * // Delete a few N8NWebhooks
     * const { count } = await prisma.n8NWebhook.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends N8NWebhookDeleteManyArgs>(args?: SelectSubset<T, N8NWebhookDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more N8NWebhooks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {N8NWebhookUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many N8NWebhooks
     * const n8NWebhook = await prisma.n8NWebhook.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends N8NWebhookUpdateManyArgs>(args: SelectSubset<T, N8NWebhookUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more N8NWebhooks and returns the data updated in the database.
     * @param {N8NWebhookUpdateManyAndReturnArgs} args - Arguments to update many N8NWebhooks.
     * @example
     * // Update many N8NWebhooks
     * const n8NWebhook = await prisma.n8NWebhook.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more N8NWebhooks and only return the `id`
     * const n8NWebhookWithIdOnly = await prisma.n8NWebhook.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends N8NWebhookUpdateManyAndReturnArgs>(args: SelectSubset<T, N8NWebhookUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$N8NWebhookPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one N8NWebhook.
     * @param {N8NWebhookUpsertArgs} args - Arguments to update or create a N8NWebhook.
     * @example
     * // Update or create a N8NWebhook
     * const n8NWebhook = await prisma.n8NWebhook.upsert({
     *   create: {
     *     // ... data to create a N8NWebhook
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the N8NWebhook we want to update
     *   }
     * })
     */
    upsert<T extends N8NWebhookUpsertArgs>(args: SelectSubset<T, N8NWebhookUpsertArgs<ExtArgs>>): Prisma__N8NWebhookClient<$Result.GetResult<Prisma.$N8NWebhookPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of N8NWebhooks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {N8NWebhookCountArgs} args - Arguments to filter N8NWebhooks to count.
     * @example
     * // Count the number of N8NWebhooks
     * const count = await prisma.n8NWebhook.count({
     *   where: {
     *     // ... the filter for the N8NWebhooks we want to count
     *   }
     * })
    **/
    count<T extends N8NWebhookCountArgs>(
      args?: Subset<T, N8NWebhookCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], N8NWebhookCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a N8NWebhook.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {N8NWebhookAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends N8NWebhookAggregateArgs>(args: Subset<T, N8NWebhookAggregateArgs>): Prisma.PrismaPromise<GetN8NWebhookAggregateType<T>>

    /**
     * Group by N8NWebhook.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {N8NWebhookGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends N8NWebhookGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: N8NWebhookGroupByArgs['orderBy'] }
        : { orderBy?: N8NWebhookGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, N8NWebhookGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetN8NWebhookGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the N8NWebhook model
   */
  readonly fields: N8NWebhookFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for N8NWebhook.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__N8NWebhookClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the N8NWebhook model
   */
  interface N8NWebhookFieldRefs {
    readonly id: FieldRef<"N8NWebhook", 'Int'>
    readonly name: FieldRef<"N8NWebhook", 'String'>
    readonly description: FieldRef<"N8NWebhook", 'String'>
    readonly url: FieldRef<"N8NWebhook", 'String'>
    readonly workflowId: FieldRef<"N8NWebhook", 'String'>
    readonly active: FieldRef<"N8NWebhook", 'Boolean'>
    readonly category: FieldRef<"N8NWebhook", 'String'>
    readonly createdAt: FieldRef<"N8NWebhook", 'DateTime'>
    readonly updatedAt: FieldRef<"N8NWebhook", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * N8NWebhook findUnique
   */
  export type N8NWebhookFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the N8NWebhook
     */
    select?: N8NWebhookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the N8NWebhook
     */
    omit?: N8NWebhookOmit<ExtArgs> | null
    /**
     * Filter, which N8NWebhook to fetch.
     */
    where: N8NWebhookWhereUniqueInput
  }

  /**
   * N8NWebhook findUniqueOrThrow
   */
  export type N8NWebhookFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the N8NWebhook
     */
    select?: N8NWebhookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the N8NWebhook
     */
    omit?: N8NWebhookOmit<ExtArgs> | null
    /**
     * Filter, which N8NWebhook to fetch.
     */
    where: N8NWebhookWhereUniqueInput
  }

  /**
   * N8NWebhook findFirst
   */
  export type N8NWebhookFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the N8NWebhook
     */
    select?: N8NWebhookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the N8NWebhook
     */
    omit?: N8NWebhookOmit<ExtArgs> | null
    /**
     * Filter, which N8NWebhook to fetch.
     */
    where?: N8NWebhookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of N8NWebhooks to fetch.
     */
    orderBy?: N8NWebhookOrderByWithRelationInput | N8NWebhookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for N8NWebhooks.
     */
    cursor?: N8NWebhookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` N8NWebhooks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` N8NWebhooks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of N8NWebhooks.
     */
    distinct?: N8NWebhookScalarFieldEnum | N8NWebhookScalarFieldEnum[]
  }

  /**
   * N8NWebhook findFirstOrThrow
   */
  export type N8NWebhookFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the N8NWebhook
     */
    select?: N8NWebhookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the N8NWebhook
     */
    omit?: N8NWebhookOmit<ExtArgs> | null
    /**
     * Filter, which N8NWebhook to fetch.
     */
    where?: N8NWebhookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of N8NWebhooks to fetch.
     */
    orderBy?: N8NWebhookOrderByWithRelationInput | N8NWebhookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for N8NWebhooks.
     */
    cursor?: N8NWebhookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` N8NWebhooks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` N8NWebhooks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of N8NWebhooks.
     */
    distinct?: N8NWebhookScalarFieldEnum | N8NWebhookScalarFieldEnum[]
  }

  /**
   * N8NWebhook findMany
   */
  export type N8NWebhookFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the N8NWebhook
     */
    select?: N8NWebhookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the N8NWebhook
     */
    omit?: N8NWebhookOmit<ExtArgs> | null
    /**
     * Filter, which N8NWebhooks to fetch.
     */
    where?: N8NWebhookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of N8NWebhooks to fetch.
     */
    orderBy?: N8NWebhookOrderByWithRelationInput | N8NWebhookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing N8NWebhooks.
     */
    cursor?: N8NWebhookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` N8NWebhooks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` N8NWebhooks.
     */
    skip?: number
    distinct?: N8NWebhookScalarFieldEnum | N8NWebhookScalarFieldEnum[]
  }

  /**
   * N8NWebhook create
   */
  export type N8NWebhookCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the N8NWebhook
     */
    select?: N8NWebhookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the N8NWebhook
     */
    omit?: N8NWebhookOmit<ExtArgs> | null
    /**
     * The data needed to create a N8NWebhook.
     */
    data: XOR<N8NWebhookCreateInput, N8NWebhookUncheckedCreateInput>
  }

  /**
   * N8NWebhook createMany
   */
  export type N8NWebhookCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many N8NWebhooks.
     */
    data: N8NWebhookCreateManyInput | N8NWebhookCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * N8NWebhook createManyAndReturn
   */
  export type N8NWebhookCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the N8NWebhook
     */
    select?: N8NWebhookSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the N8NWebhook
     */
    omit?: N8NWebhookOmit<ExtArgs> | null
    /**
     * The data used to create many N8NWebhooks.
     */
    data: N8NWebhookCreateManyInput | N8NWebhookCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * N8NWebhook update
   */
  export type N8NWebhookUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the N8NWebhook
     */
    select?: N8NWebhookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the N8NWebhook
     */
    omit?: N8NWebhookOmit<ExtArgs> | null
    /**
     * The data needed to update a N8NWebhook.
     */
    data: XOR<N8NWebhookUpdateInput, N8NWebhookUncheckedUpdateInput>
    /**
     * Choose, which N8NWebhook to update.
     */
    where: N8NWebhookWhereUniqueInput
  }

  /**
   * N8NWebhook updateMany
   */
  export type N8NWebhookUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update N8NWebhooks.
     */
    data: XOR<N8NWebhookUpdateManyMutationInput, N8NWebhookUncheckedUpdateManyInput>
    /**
     * Filter which N8NWebhooks to update
     */
    where?: N8NWebhookWhereInput
    /**
     * Limit how many N8NWebhooks to update.
     */
    limit?: number
  }

  /**
   * N8NWebhook updateManyAndReturn
   */
  export type N8NWebhookUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the N8NWebhook
     */
    select?: N8NWebhookSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the N8NWebhook
     */
    omit?: N8NWebhookOmit<ExtArgs> | null
    /**
     * The data used to update N8NWebhooks.
     */
    data: XOR<N8NWebhookUpdateManyMutationInput, N8NWebhookUncheckedUpdateManyInput>
    /**
     * Filter which N8NWebhooks to update
     */
    where?: N8NWebhookWhereInput
    /**
     * Limit how many N8NWebhooks to update.
     */
    limit?: number
  }

  /**
   * N8NWebhook upsert
   */
  export type N8NWebhookUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the N8NWebhook
     */
    select?: N8NWebhookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the N8NWebhook
     */
    omit?: N8NWebhookOmit<ExtArgs> | null
    /**
     * The filter to search for the N8NWebhook to update in case it exists.
     */
    where: N8NWebhookWhereUniqueInput
    /**
     * In case the N8NWebhook found by the `where` argument doesn't exist, create a new N8NWebhook with this data.
     */
    create: XOR<N8NWebhookCreateInput, N8NWebhookUncheckedCreateInput>
    /**
     * In case the N8NWebhook was found with the provided `where` argument, update it with this data.
     */
    update: XOR<N8NWebhookUpdateInput, N8NWebhookUncheckedUpdateInput>
  }

  /**
   * N8NWebhook delete
   */
  export type N8NWebhookDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the N8NWebhook
     */
    select?: N8NWebhookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the N8NWebhook
     */
    omit?: N8NWebhookOmit<ExtArgs> | null
    /**
     * Filter which N8NWebhook to delete.
     */
    where: N8NWebhookWhereUniqueInput
  }

  /**
   * N8NWebhook deleteMany
   */
  export type N8NWebhookDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which N8NWebhooks to delete
     */
    where?: N8NWebhookWhereInput
    /**
     * Limit how many N8NWebhooks to delete.
     */
    limit?: number
  }

  /**
   * N8NWebhook without action
   */
  export type N8NWebhookDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the N8NWebhook
     */
    select?: N8NWebhookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the N8NWebhook
     */
    omit?: N8NWebhookOmit<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    referenceId: number | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type NotificationSumAggregateOutputType = {
    id: number | null
    userId: number | null
    referenceId: number | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type NotificationMinAggregateOutputType = {
    id: number | null
    userId: number | null
    referenceId: number | null
    referenceType: string | null
    type: string | null
    title: string | null
    message: string | null
    description: string | null
    read: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    referenceId: number | null
    referenceType: string | null
    type: string | null
    title: string | null
    message: string | null
    description: string | null
    read: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    userId: number
    referenceId: number
    referenceType: number
    type: number
    title: number
    message: number
    description: number
    read: number
    createdAt: number
    updatedAt: number
    createdBy: number
    updatedBy: number
    _all: number
  }


  export type NotificationAvgAggregateInputType = {
    id?: true
    userId?: true
    referenceId?: true
    createdBy?: true
    updatedBy?: true
  }

  export type NotificationSumAggregateInputType = {
    id?: true
    userId?: true
    referenceId?: true
    createdBy?: true
    updatedBy?: true
  }

  export type NotificationMinAggregateInputType = {
    id?: true
    userId?: true
    referenceId?: true
    referenceType?: true
    type?: true
    title?: true
    message?: true
    description?: true
    read?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    updatedBy?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    userId?: true
    referenceId?: true
    referenceType?: true
    type?: true
    title?: true
    message?: true
    description?: true
    read?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    updatedBy?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    userId?: true
    referenceId?: true
    referenceType?: true
    type?: true
    title?: true
    message?: true
    description?: true
    read?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    updatedBy?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _avg?: NotificationAvgAggregateInputType
    _sum?: NotificationSumAggregateInputType
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: number
    userId: number | null
    referenceId: number | null
    referenceType: string | null
    type: string
    title: string
    message: string | null
    description: string | null
    read: boolean
    createdAt: Date
    updatedAt: Date
    createdBy: number | null
    updatedBy: number | null
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    referenceId?: boolean
    referenceType?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    description?: boolean
    read?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    updatedBy?: boolean
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    referenceId?: boolean
    referenceType?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    description?: boolean
    read?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    updatedBy?: boolean
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    referenceId?: boolean
    referenceType?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    description?: boolean
    read?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    updatedBy?: boolean
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    userId?: boolean
    referenceId?: boolean
    referenceType?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    description?: boolean
    read?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    updatedBy?: boolean
  }

  export type NotificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "referenceId" | "referenceType" | "type" | "title" | "message" | "description" | "read" | "createdAt" | "updatedAt" | "createdBy" | "updatedBy", ExtArgs["result"]["notification"]>

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number | null
      referenceId: number | null
      referenceType: string | null
      type: string
      title: string
      message: string | null
      description: string | null
      read: boolean
      createdAt: Date
      updatedAt: Date
      createdBy: number | null
      updatedBy: number | null
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications and returns the data updated in the database.
     * @param {NotificationUpdateManyAndReturnArgs} args - Arguments to update many Notifications.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificationUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'Int'>
    readonly userId: FieldRef<"Notification", 'Int'>
    readonly referenceId: FieldRef<"Notification", 'Int'>
    readonly referenceType: FieldRef<"Notification", 'String'>
    readonly type: FieldRef<"Notification", 'String'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly description: FieldRef<"Notification", 'String'>
    readonly read: FieldRef<"Notification", 'Boolean'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
    readonly updatedAt: FieldRef<"Notification", 'DateTime'>
    readonly createdBy: FieldRef<"Notification", 'Int'>
    readonly updatedBy: FieldRef<"Notification", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
  }

  /**
   * Notification updateManyAndReturn
   */
  export type NotificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to delete.
     */
    limit?: number
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
  }


  /**
   * Model File
   */

  export type AggregateFile = {
    _count: FileCountAggregateOutputType | null
    _avg: FileAvgAggregateOutputType | null
    _sum: FileSumAggregateOutputType | null
    _min: FileMinAggregateOutputType | null
    _max: FileMaxAggregateOutputType | null
  }

  export type FileAvgAggregateOutputType = {
    id: number | null
    size: number | null
    uploadedBy: number | null
  }

  export type FileSumAggregateOutputType = {
    id: number | null
    size: number | null
    uploadedBy: number | null
  }

  export type FileMinAggregateOutputType = {
    id: number | null
    filename: string | null
    originalName: string | null
    mimeType: string | null
    path: string | null
    size: number | null
    type: string | null
    uploadedAt: Date | null
    uploadedBy: number | null
    description: string | null
    isDeleted: boolean | null
    deletedAt: Date | null
  }

  export type FileMaxAggregateOutputType = {
    id: number | null
    filename: string | null
    originalName: string | null
    mimeType: string | null
    path: string | null
    size: number | null
    type: string | null
    uploadedAt: Date | null
    uploadedBy: number | null
    description: string | null
    isDeleted: boolean | null
    deletedAt: Date | null
  }

  export type FileCountAggregateOutputType = {
    id: number
    filename: number
    originalName: number
    mimeType: number
    path: number
    size: number
    type: number
    uploadedAt: number
    uploadedBy: number
    description: number
    isDeleted: number
    deletedAt: number
    _all: number
  }


  export type FileAvgAggregateInputType = {
    id?: true
    size?: true
    uploadedBy?: true
  }

  export type FileSumAggregateInputType = {
    id?: true
    size?: true
    uploadedBy?: true
  }

  export type FileMinAggregateInputType = {
    id?: true
    filename?: true
    originalName?: true
    mimeType?: true
    path?: true
    size?: true
    type?: true
    uploadedAt?: true
    uploadedBy?: true
    description?: true
    isDeleted?: true
    deletedAt?: true
  }

  export type FileMaxAggregateInputType = {
    id?: true
    filename?: true
    originalName?: true
    mimeType?: true
    path?: true
    size?: true
    type?: true
    uploadedAt?: true
    uploadedBy?: true
    description?: true
    isDeleted?: true
    deletedAt?: true
  }

  export type FileCountAggregateInputType = {
    id?: true
    filename?: true
    originalName?: true
    mimeType?: true
    path?: true
    size?: true
    type?: true
    uploadedAt?: true
    uploadedBy?: true
    description?: true
    isDeleted?: true
    deletedAt?: true
    _all?: true
  }

  export type FileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which File to aggregate.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Files
    **/
    _count?: true | FileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FileMaxAggregateInputType
  }

  export type GetFileAggregateType<T extends FileAggregateArgs> = {
        [P in keyof T & keyof AggregateFile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFile[P]>
      : GetScalarType<T[P], AggregateFile[P]>
  }




  export type FileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
    orderBy?: FileOrderByWithAggregationInput | FileOrderByWithAggregationInput[]
    by: FileScalarFieldEnum[] | FileScalarFieldEnum
    having?: FileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FileCountAggregateInputType | true
    _avg?: FileAvgAggregateInputType
    _sum?: FileSumAggregateInputType
    _min?: FileMinAggregateInputType
    _max?: FileMaxAggregateInputType
  }

  export type FileGroupByOutputType = {
    id: number
    filename: string
    originalName: string
    mimeType: string
    path: string
    size: number
    type: string
    uploadedAt: Date
    uploadedBy: number | null
    description: string | null
    isDeleted: boolean
    deletedAt: Date | null
    _count: FileCountAggregateOutputType | null
    _avg: FileAvgAggregateOutputType | null
    _sum: FileSumAggregateOutputType | null
    _min: FileMinAggregateOutputType | null
    _max: FileMaxAggregateOutputType | null
  }

  type GetFileGroupByPayload<T extends FileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FileGroupByOutputType[P]>
            : GetScalarType<T[P], FileGroupByOutputType[P]>
        }
      >
    >


  export type FileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    filename?: boolean
    originalName?: boolean
    mimeType?: boolean
    path?: boolean
    size?: boolean
    type?: boolean
    uploadedAt?: boolean
    uploadedBy?: boolean
    description?: boolean
    isDeleted?: boolean
    deletedAt?: boolean
    userProfiles?: boolean | File$userProfilesArgs<ExtArgs>
    _count?: boolean | FileCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["file"]>

  export type FileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    filename?: boolean
    originalName?: boolean
    mimeType?: boolean
    path?: boolean
    size?: boolean
    type?: boolean
    uploadedAt?: boolean
    uploadedBy?: boolean
    description?: boolean
    isDeleted?: boolean
    deletedAt?: boolean
  }, ExtArgs["result"]["file"]>

  export type FileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    filename?: boolean
    originalName?: boolean
    mimeType?: boolean
    path?: boolean
    size?: boolean
    type?: boolean
    uploadedAt?: boolean
    uploadedBy?: boolean
    description?: boolean
    isDeleted?: boolean
    deletedAt?: boolean
  }, ExtArgs["result"]["file"]>

  export type FileSelectScalar = {
    id?: boolean
    filename?: boolean
    originalName?: boolean
    mimeType?: boolean
    path?: boolean
    size?: boolean
    type?: boolean
    uploadedAt?: boolean
    uploadedBy?: boolean
    description?: boolean
    isDeleted?: boolean
    deletedAt?: boolean
  }

  export type FileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "filename" | "originalName" | "mimeType" | "path" | "size" | "type" | "uploadedAt" | "uploadedBy" | "description" | "isDeleted" | "deletedAt", ExtArgs["result"]["file"]>
  export type FileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userProfiles?: boolean | File$userProfilesArgs<ExtArgs>
    _count?: boolean | FileCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type FileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $FilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "File"
    objects: {
      userProfiles: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      filename: string
      originalName: string
      mimeType: string
      path: string
      size: number
      type: string
      uploadedAt: Date
      uploadedBy: number | null
      description: string | null
      isDeleted: boolean
      deletedAt: Date | null
    }, ExtArgs["result"]["file"]>
    composites: {}
  }

  type FileGetPayload<S extends boolean | null | undefined | FileDefaultArgs> = $Result.GetResult<Prisma.$FilePayload, S>

  type FileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FileCountAggregateInputType | true
    }

  export interface FileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['File'], meta: { name: 'File' } }
    /**
     * Find zero or one File that matches the filter.
     * @param {FileFindUniqueArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FileFindUniqueArgs>(args: SelectSubset<T, FileFindUniqueArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one File that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FileFindUniqueOrThrowArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FileFindUniqueOrThrowArgs>(args: SelectSubset<T, FileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first File that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindFirstArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FileFindFirstArgs>(args?: SelectSubset<T, FileFindFirstArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first File that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindFirstOrThrowArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FileFindFirstOrThrowArgs>(args?: SelectSubset<T, FileFindFirstOrThrowArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Files that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Files
     * const files = await prisma.file.findMany()
     * 
     * // Get first 10 Files
     * const files = await prisma.file.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fileWithIdOnly = await prisma.file.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FileFindManyArgs>(args?: SelectSubset<T, FileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a File.
     * @param {FileCreateArgs} args - Arguments to create a File.
     * @example
     * // Create one File
     * const File = await prisma.file.create({
     *   data: {
     *     // ... data to create a File
     *   }
     * })
     * 
     */
    create<T extends FileCreateArgs>(args: SelectSubset<T, FileCreateArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Files.
     * @param {FileCreateManyArgs} args - Arguments to create many Files.
     * @example
     * // Create many Files
     * const file = await prisma.file.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FileCreateManyArgs>(args?: SelectSubset<T, FileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Files and returns the data saved in the database.
     * @param {FileCreateManyAndReturnArgs} args - Arguments to create many Files.
     * @example
     * // Create many Files
     * const file = await prisma.file.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Files and only return the `id`
     * const fileWithIdOnly = await prisma.file.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FileCreateManyAndReturnArgs>(args?: SelectSubset<T, FileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a File.
     * @param {FileDeleteArgs} args - Arguments to delete one File.
     * @example
     * // Delete one File
     * const File = await prisma.file.delete({
     *   where: {
     *     // ... filter to delete one File
     *   }
     * })
     * 
     */
    delete<T extends FileDeleteArgs>(args: SelectSubset<T, FileDeleteArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one File.
     * @param {FileUpdateArgs} args - Arguments to update one File.
     * @example
     * // Update one File
     * const file = await prisma.file.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FileUpdateArgs>(args: SelectSubset<T, FileUpdateArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Files.
     * @param {FileDeleteManyArgs} args - Arguments to filter Files to delete.
     * @example
     * // Delete a few Files
     * const { count } = await prisma.file.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FileDeleteManyArgs>(args?: SelectSubset<T, FileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Files
     * const file = await prisma.file.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FileUpdateManyArgs>(args: SelectSubset<T, FileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Files and returns the data updated in the database.
     * @param {FileUpdateManyAndReturnArgs} args - Arguments to update many Files.
     * @example
     * // Update many Files
     * const file = await prisma.file.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Files and only return the `id`
     * const fileWithIdOnly = await prisma.file.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FileUpdateManyAndReturnArgs>(args: SelectSubset<T, FileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one File.
     * @param {FileUpsertArgs} args - Arguments to update or create a File.
     * @example
     * // Update or create a File
     * const file = await prisma.file.upsert({
     *   create: {
     *     // ... data to create a File
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the File we want to update
     *   }
     * })
     */
    upsert<T extends FileUpsertArgs>(args: SelectSubset<T, FileUpsertArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileCountArgs} args - Arguments to filter Files to count.
     * @example
     * // Count the number of Files
     * const count = await prisma.file.count({
     *   where: {
     *     // ... the filter for the Files we want to count
     *   }
     * })
    **/
    count<T extends FileCountArgs>(
      args?: Subset<T, FileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a File.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FileAggregateArgs>(args: Subset<T, FileAggregateArgs>): Prisma.PrismaPromise<GetFileAggregateType<T>>

    /**
     * Group by File.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FileGroupByArgs['orderBy'] }
        : { orderBy?: FileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the File model
   */
  readonly fields: FileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for File.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userProfiles<T extends File$userProfilesArgs<ExtArgs> = {}>(args?: Subset<T, File$userProfilesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the File model
   */
  interface FileFieldRefs {
    readonly id: FieldRef<"File", 'Int'>
    readonly filename: FieldRef<"File", 'String'>
    readonly originalName: FieldRef<"File", 'String'>
    readonly mimeType: FieldRef<"File", 'String'>
    readonly path: FieldRef<"File", 'String'>
    readonly size: FieldRef<"File", 'Int'>
    readonly type: FieldRef<"File", 'String'>
    readonly uploadedAt: FieldRef<"File", 'DateTime'>
    readonly uploadedBy: FieldRef<"File", 'Int'>
    readonly description: FieldRef<"File", 'String'>
    readonly isDeleted: FieldRef<"File", 'Boolean'>
    readonly deletedAt: FieldRef<"File", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * File findUnique
   */
  export type FileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File findUniqueOrThrow
   */
  export type FileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File findFirst
   */
  export type FileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Files.
     */
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File findFirstOrThrow
   */
  export type FileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Files.
     */
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File findMany
   */
  export type FileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which Files to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File create
   */
  export type FileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The data needed to create a File.
     */
    data: XOR<FileCreateInput, FileUncheckedCreateInput>
  }

  /**
   * File createMany
   */
  export type FileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Files.
     */
    data: FileCreateManyInput | FileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * File createManyAndReturn
   */
  export type FileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * The data used to create many Files.
     */
    data: FileCreateManyInput | FileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * File update
   */
  export type FileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The data needed to update a File.
     */
    data: XOR<FileUpdateInput, FileUncheckedUpdateInput>
    /**
     * Choose, which File to update.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File updateMany
   */
  export type FileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Files.
     */
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyInput>
    /**
     * Filter which Files to update
     */
    where?: FileWhereInput
    /**
     * Limit how many Files to update.
     */
    limit?: number
  }

  /**
   * File updateManyAndReturn
   */
  export type FileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * The data used to update Files.
     */
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyInput>
    /**
     * Filter which Files to update
     */
    where?: FileWhereInput
    /**
     * Limit how many Files to update.
     */
    limit?: number
  }

  /**
   * File upsert
   */
  export type FileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The filter to search for the File to update in case it exists.
     */
    where: FileWhereUniqueInput
    /**
     * In case the File found by the `where` argument doesn't exist, create a new File with this data.
     */
    create: XOR<FileCreateInput, FileUncheckedCreateInput>
    /**
     * In case the File was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FileUpdateInput, FileUncheckedUpdateInput>
  }

  /**
   * File delete
   */
  export type FileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter which File to delete.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File deleteMany
   */
  export type FileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Files to delete
     */
    where?: FileWhereInput
    /**
     * Limit how many Files to delete.
     */
    limit?: number
  }

  /**
   * File.userProfiles
   */
  export type File$userProfilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * File without action
   */
  export type FileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    role: 'role',
    phone: 'phone',
    status: 'status',
    profilePicture: 'profilePicture',
    profilePictureId: 'profilePictureId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy',
    lastLoginAt: 'lastLoginAt',
    resetToken: 'resetToken',
    resetTokenExpiry: 'resetTokenExpiry'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserSettingsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    darkMode: 'darkMode',
    emailNotifications: 'emailNotifications',
    pushNotifications: 'pushNotifications',
    language: 'language',
    notificationInterval: 'notificationInterval',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserSettingsScalarFieldEnum = (typeof UserSettingsScalarFieldEnum)[keyof typeof UserSettingsScalarFieldEnum]


  export const UserActivityScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    timestamp: 'timestamp',
    activity: 'activity',
    details: 'details',
    ipAddress: 'ipAddress'
  };

  export type UserActivityScalarFieldEnum = (typeof UserActivityScalarFieldEnum)[keyof typeof UserActivityScalarFieldEnum]


  export const UserSessionScalarFieldEnum: {
    sid: 'sid',
    sess: 'sess',
    expire: 'expire'
  };

  export type UserSessionScalarFieldEnum = (typeof UserSessionScalarFieldEnum)[keyof typeof UserSessionScalarFieldEnum]


  export const PermissionScalarFieldEnum: {
    id: 'id',
    code: 'code',
    name: 'name',
    description: 'description',
    category: 'category',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy'
  };

  export type PermissionScalarFieldEnum = (typeof PermissionScalarFieldEnum)[keyof typeof PermissionScalarFieldEnum]


  export const UserPermissionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    permissionId: 'permissionId',
    grantedAt: 'grantedAt',
    grantedBy: 'grantedBy'
  };

  export type UserPermissionScalarFieldEnum = (typeof UserPermissionScalarFieldEnum)[keyof typeof UserPermissionScalarFieldEnum]


  export const RefreshTokenScalarFieldEnum: {
    token: 'token',
    userId: 'userId',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    createdByIp: 'createdByIp',
    isRevoked: 'isRevoked',
    revokedAt: 'revokedAt',
    revokedByIp: 'revokedByIp',
    replacedByToken: 'replacedByToken'
  };

  export type RefreshTokenScalarFieldEnum = (typeof RefreshTokenScalarFieldEnum)[keyof typeof RefreshTokenScalarFieldEnum]


  export const SystemSettingsScalarFieldEnum: {
    id: 'id',
    key: 'key',
    value: 'value',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SystemSettingsScalarFieldEnum = (typeof SystemSettingsScalarFieldEnum)[keyof typeof SystemSettingsScalarFieldEnum]


  export const CustomerScalarFieldEnum: {
    id: 'id',
    name: 'name',
    company: 'company',
    email: 'email',
    phone: 'phone',
    address: 'address',
    postalCode: 'postalCode',
    city: 'city',
    country: 'country',
    vatNumber: 'vatNumber',
    notes: 'notes',
    newsletter: 'newsletter',
    status: 'status',
    type: 'type',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy'
  };

  export type CustomerScalarFieldEnum = (typeof CustomerScalarFieldEnum)[keyof typeof CustomerScalarFieldEnum]


  export const CustomerLogScalarFieldEnum: {
    id: 'id',
    customerId: 'customerId',
    userId: 'userId',
    userName: 'userName',
    action: 'action',
    details: 'details',
    createdAt: 'createdAt'
  };

  export type CustomerLogScalarFieldEnum = (typeof CustomerLogScalarFieldEnum)[keyof typeof CustomerLogScalarFieldEnum]


  export const AppointmentScalarFieldEnum: {
    id: 'id',
    title: 'title',
    customerId: 'customerId',
    appointmentDate: 'appointmentDate',
    duration: 'duration',
    location: 'location',
    description: 'description',
    status: 'status',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AppointmentScalarFieldEnum = (typeof AppointmentScalarFieldEnum)[keyof typeof AppointmentScalarFieldEnum]


  export const AppointmentNoteScalarFieldEnum: {
    id: 'id',
    appointmentId: 'appointmentId',
    userId: 'userId',
    userName: 'userName',
    text: 'text',
    createdAt: 'createdAt'
  };

  export type AppointmentNoteScalarFieldEnum = (typeof AppointmentNoteScalarFieldEnum)[keyof typeof AppointmentNoteScalarFieldEnum]


  export const AppointmentLogScalarFieldEnum: {
    id: 'id',
    appointmentId: 'appointmentId',
    userId: 'userId',
    userName: 'userName',
    action: 'action',
    details: 'details',
    createdAt: 'createdAt'
  };

  export type AppointmentLogScalarFieldEnum = (typeof AppointmentLogScalarFieldEnum)[keyof typeof AppointmentLogScalarFieldEnum]


  export const ContactRequestScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    phone: 'phone',
    service: 'service',
    message: 'message',
    status: 'status',
    processorId: 'processorId',
    customerId: 'customerId',
    appointmentId: 'appointmentId',
    ipAddress: 'ipAddress',
    source: 'source',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ContactRequestScalarFieldEnum = (typeof ContactRequestScalarFieldEnum)[keyof typeof ContactRequestScalarFieldEnum]


  export const RequestNoteScalarFieldEnum: {
    id: 'id',
    requestId: 'requestId',
    userId: 'userId',
    userName: 'userName',
    text: 'text',
    createdAt: 'createdAt'
  };

  export type RequestNoteScalarFieldEnum = (typeof RequestNoteScalarFieldEnum)[keyof typeof RequestNoteScalarFieldEnum]


  export const RequestLogScalarFieldEnum: {
    id: 'id',
    requestId: 'requestId',
    userId: 'userId',
    userName: 'userName',
    action: 'action',
    details: 'details',
    createdAt: 'createdAt'
  };

  export type RequestLogScalarFieldEnum = (typeof RequestLogScalarFieldEnum)[keyof typeof RequestLogScalarFieldEnum]


  export const RequestDataScalarFieldEnum: {
    id: 'id',
    requestId: 'requestId',
    category: 'category',
    label: 'label',
    order: 'order',
    dataType: 'dataType',
    data: 'data',
    isValid: 'isValid',
    processedBy: 'processedBy',
    version: 'version',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById'
  };

  export type RequestDataScalarFieldEnum = (typeof RequestDataScalarFieldEnum)[keyof typeof RequestDataScalarFieldEnum]


  export const RequestDataHistoryScalarFieldEnum: {
    id: 'id',
    requestDataId: 'requestDataId',
    data: 'data',
    changedBy: 'changedBy',
    changeReason: 'changeReason',
    version: 'version',
    createdAt: 'createdAt',
    userId: 'userId'
  };

  export type RequestDataHistoryScalarFieldEnum = (typeof RequestDataHistoryScalarFieldEnum)[keyof typeof RequestDataHistoryScalarFieldEnum]


  export const N8NWebhookScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    url: 'url',
    workflowId: 'workflowId',
    active: 'active',
    category: 'category',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type N8NWebhookScalarFieldEnum = (typeof N8NWebhookScalarFieldEnum)[keyof typeof N8NWebhookScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    referenceId: 'referenceId',
    referenceType: 'referenceType',
    type: 'type',
    title: 'title',
    message: 'message',
    description: 'description',
    read: 'read',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const FileScalarFieldEnum: {
    id: 'id',
    filename: 'filename',
    originalName: 'originalName',
    mimeType: 'mimeType',
    path: 'path',
    size: 'size',
    type: 'type',
    uploadedAt: 'uploadedAt',
    uploadedBy: 'uploadedBy',
    description: 'description',
    isDeleted: 'isDeleted',
    deletedAt: 'deletedAt'
  };

  export type FileScalarFieldEnum = (typeof FileScalarFieldEnum)[keyof typeof FileScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    phone?: StringNullableFilter<"User"> | string | null
    status?: StringFilter<"User"> | string
    profilePicture?: StringNullableFilter<"User"> | string | null
    profilePictureId?: IntNullableFilter<"User"> | number | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    createdBy?: IntNullableFilter<"User"> | number | null
    updatedBy?: IntNullableFilter<"User"> | number | null
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    resetToken?: StringNullableFilter<"User"> | string | null
    resetTokenExpiry?: DateTimeNullableFilter<"User"> | Date | string | null
    settings?: XOR<UserSettingsNullableScalarRelationFilter, UserSettingsWhereInput> | null
    activities?: UserActivityListRelationFilter
    appointments?: AppointmentListRelationFilter
    refreshTokens?: RefreshTokenListRelationFilter
    customerLogs?: CustomerLogListRelationFilter
    appointmentNotes?: AppointmentNoteListRelationFilter
    appointmentLogs?: AppointmentLogListRelationFilter
    contactRequests?: ContactRequestListRelationFilter
    requestNotes?: RequestNoteListRelationFilter
    requestLogs?: RequestLogListRelationFilter
    permissions?: UserPermissionListRelationFilter
    profilePictureFile?: XOR<FileNullableScalarRelationFilter, FileWhereInput> | null
    requestData?: RequestDataListRelationFilter
    requestDataHistory?: RequestDataHistoryListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    phone?: SortOrderInput | SortOrder
    status?: SortOrder
    profilePicture?: SortOrderInput | SortOrder
    profilePictureId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    resetToken?: SortOrderInput | SortOrder
    resetTokenExpiry?: SortOrderInput | SortOrder
    settings?: UserSettingsOrderByWithRelationInput
    activities?: UserActivityOrderByRelationAggregateInput
    appointments?: AppointmentOrderByRelationAggregateInput
    refreshTokens?: RefreshTokenOrderByRelationAggregateInput
    customerLogs?: CustomerLogOrderByRelationAggregateInput
    appointmentNotes?: AppointmentNoteOrderByRelationAggregateInput
    appointmentLogs?: AppointmentLogOrderByRelationAggregateInput
    contactRequests?: ContactRequestOrderByRelationAggregateInput
    requestNotes?: RequestNoteOrderByRelationAggregateInput
    requestLogs?: RequestLogOrderByRelationAggregateInput
    permissions?: UserPermissionOrderByRelationAggregateInput
    profilePictureFile?: FileOrderByWithRelationInput
    requestData?: RequestDataOrderByRelationAggregateInput
    requestDataHistory?: RequestDataHistoryOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    phone?: StringNullableFilter<"User"> | string | null
    status?: StringFilter<"User"> | string
    profilePicture?: StringNullableFilter<"User"> | string | null
    profilePictureId?: IntNullableFilter<"User"> | number | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    createdBy?: IntNullableFilter<"User"> | number | null
    updatedBy?: IntNullableFilter<"User"> | number | null
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    resetToken?: StringNullableFilter<"User"> | string | null
    resetTokenExpiry?: DateTimeNullableFilter<"User"> | Date | string | null
    settings?: XOR<UserSettingsNullableScalarRelationFilter, UserSettingsWhereInput> | null
    activities?: UserActivityListRelationFilter
    appointments?: AppointmentListRelationFilter
    refreshTokens?: RefreshTokenListRelationFilter
    customerLogs?: CustomerLogListRelationFilter
    appointmentNotes?: AppointmentNoteListRelationFilter
    appointmentLogs?: AppointmentLogListRelationFilter
    contactRequests?: ContactRequestListRelationFilter
    requestNotes?: RequestNoteListRelationFilter
    requestLogs?: RequestLogListRelationFilter
    permissions?: UserPermissionListRelationFilter
    profilePictureFile?: XOR<FileNullableScalarRelationFilter, FileWhereInput> | null
    requestData?: RequestDataListRelationFilter
    requestDataHistory?: RequestDataHistoryListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    phone?: SortOrderInput | SortOrder
    status?: SortOrder
    profilePicture?: SortOrderInput | SortOrder
    profilePictureId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    resetToken?: SortOrderInput | SortOrder
    resetTokenExpiry?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: StringWithAggregatesFilter<"User"> | string
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    status?: StringWithAggregatesFilter<"User"> | string
    profilePicture?: StringNullableWithAggregatesFilter<"User"> | string | null
    profilePictureId?: IntNullableWithAggregatesFilter<"User"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    createdBy?: IntNullableWithAggregatesFilter<"User"> | number | null
    updatedBy?: IntNullableWithAggregatesFilter<"User"> | number | null
    lastLoginAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    resetToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    resetTokenExpiry?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type UserSettingsWhereInput = {
    AND?: UserSettingsWhereInput | UserSettingsWhereInput[]
    OR?: UserSettingsWhereInput[]
    NOT?: UserSettingsWhereInput | UserSettingsWhereInput[]
    id?: IntFilter<"UserSettings"> | number
    userId?: IntFilter<"UserSettings"> | number
    darkMode?: BoolFilter<"UserSettings"> | boolean
    emailNotifications?: BoolFilter<"UserSettings"> | boolean
    pushNotifications?: BoolFilter<"UserSettings"> | boolean
    language?: StringFilter<"UserSettings"> | string
    notificationInterval?: StringFilter<"UserSettings"> | string
    createdAt?: DateTimeFilter<"UserSettings"> | Date | string
    updatedAt?: DateTimeFilter<"UserSettings"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserSettingsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    darkMode?: SortOrder
    emailNotifications?: SortOrder
    pushNotifications?: SortOrder
    language?: SortOrder
    notificationInterval?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserSettingsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    AND?: UserSettingsWhereInput | UserSettingsWhereInput[]
    OR?: UserSettingsWhereInput[]
    NOT?: UserSettingsWhereInput | UserSettingsWhereInput[]
    darkMode?: BoolFilter<"UserSettings"> | boolean
    emailNotifications?: BoolFilter<"UserSettings"> | boolean
    pushNotifications?: BoolFilter<"UserSettings"> | boolean
    language?: StringFilter<"UserSettings"> | string
    notificationInterval?: StringFilter<"UserSettings"> | string
    createdAt?: DateTimeFilter<"UserSettings"> | Date | string
    updatedAt?: DateTimeFilter<"UserSettings"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type UserSettingsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    darkMode?: SortOrder
    emailNotifications?: SortOrder
    pushNotifications?: SortOrder
    language?: SortOrder
    notificationInterval?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserSettingsCountOrderByAggregateInput
    _avg?: UserSettingsAvgOrderByAggregateInput
    _max?: UserSettingsMaxOrderByAggregateInput
    _min?: UserSettingsMinOrderByAggregateInput
    _sum?: UserSettingsSumOrderByAggregateInput
  }

  export type UserSettingsScalarWhereWithAggregatesInput = {
    AND?: UserSettingsScalarWhereWithAggregatesInput | UserSettingsScalarWhereWithAggregatesInput[]
    OR?: UserSettingsScalarWhereWithAggregatesInput[]
    NOT?: UserSettingsScalarWhereWithAggregatesInput | UserSettingsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserSettings"> | number
    userId?: IntWithAggregatesFilter<"UserSettings"> | number
    darkMode?: BoolWithAggregatesFilter<"UserSettings"> | boolean
    emailNotifications?: BoolWithAggregatesFilter<"UserSettings"> | boolean
    pushNotifications?: BoolWithAggregatesFilter<"UserSettings"> | boolean
    language?: StringWithAggregatesFilter<"UserSettings"> | string
    notificationInterval?: StringWithAggregatesFilter<"UserSettings"> | string
    createdAt?: DateTimeWithAggregatesFilter<"UserSettings"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserSettings"> | Date | string
  }

  export type UserActivityWhereInput = {
    AND?: UserActivityWhereInput | UserActivityWhereInput[]
    OR?: UserActivityWhereInput[]
    NOT?: UserActivityWhereInput | UserActivityWhereInput[]
    id?: IntFilter<"UserActivity"> | number
    userId?: IntFilter<"UserActivity"> | number
    timestamp?: DateTimeNullableFilter<"UserActivity"> | Date | string | null
    activity?: StringFilter<"UserActivity"> | string
    details?: StringNullableFilter<"UserActivity"> | string | null
    ipAddress?: StringNullableFilter<"UserActivity"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserActivityOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    timestamp?: SortOrderInput | SortOrder
    activity?: SortOrder
    details?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserActivityWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserActivityWhereInput | UserActivityWhereInput[]
    OR?: UserActivityWhereInput[]
    NOT?: UserActivityWhereInput | UserActivityWhereInput[]
    userId?: IntFilter<"UserActivity"> | number
    timestamp?: DateTimeNullableFilter<"UserActivity"> | Date | string | null
    activity?: StringFilter<"UserActivity"> | string
    details?: StringNullableFilter<"UserActivity"> | string | null
    ipAddress?: StringNullableFilter<"UserActivity"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type UserActivityOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    timestamp?: SortOrderInput | SortOrder
    activity?: SortOrder
    details?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    _count?: UserActivityCountOrderByAggregateInput
    _avg?: UserActivityAvgOrderByAggregateInput
    _max?: UserActivityMaxOrderByAggregateInput
    _min?: UserActivityMinOrderByAggregateInput
    _sum?: UserActivitySumOrderByAggregateInput
  }

  export type UserActivityScalarWhereWithAggregatesInput = {
    AND?: UserActivityScalarWhereWithAggregatesInput | UserActivityScalarWhereWithAggregatesInput[]
    OR?: UserActivityScalarWhereWithAggregatesInput[]
    NOT?: UserActivityScalarWhereWithAggregatesInput | UserActivityScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserActivity"> | number
    userId?: IntWithAggregatesFilter<"UserActivity"> | number
    timestamp?: DateTimeNullableWithAggregatesFilter<"UserActivity"> | Date | string | null
    activity?: StringWithAggregatesFilter<"UserActivity"> | string
    details?: StringNullableWithAggregatesFilter<"UserActivity"> | string | null
    ipAddress?: StringNullableWithAggregatesFilter<"UserActivity"> | string | null
  }

  export type UserSessionWhereInput = {
    AND?: UserSessionWhereInput | UserSessionWhereInput[]
    OR?: UserSessionWhereInput[]
    NOT?: UserSessionWhereInput | UserSessionWhereInput[]
    sid?: StringFilter<"UserSession"> | string
    sess?: JsonFilter<"UserSession">
    expire?: DateTimeFilter<"UserSession"> | Date | string
  }

  export type UserSessionOrderByWithRelationInput = {
    sid?: SortOrder
    sess?: SortOrder
    expire?: SortOrder
  }

  export type UserSessionWhereUniqueInput = Prisma.AtLeast<{
    sid?: string
    AND?: UserSessionWhereInput | UserSessionWhereInput[]
    OR?: UserSessionWhereInput[]
    NOT?: UserSessionWhereInput | UserSessionWhereInput[]
    sess?: JsonFilter<"UserSession">
    expire?: DateTimeFilter<"UserSession"> | Date | string
  }, "sid">

  export type UserSessionOrderByWithAggregationInput = {
    sid?: SortOrder
    sess?: SortOrder
    expire?: SortOrder
    _count?: UserSessionCountOrderByAggregateInput
    _max?: UserSessionMaxOrderByAggregateInput
    _min?: UserSessionMinOrderByAggregateInput
  }

  export type UserSessionScalarWhereWithAggregatesInput = {
    AND?: UserSessionScalarWhereWithAggregatesInput | UserSessionScalarWhereWithAggregatesInput[]
    OR?: UserSessionScalarWhereWithAggregatesInput[]
    NOT?: UserSessionScalarWhereWithAggregatesInput | UserSessionScalarWhereWithAggregatesInput[]
    sid?: StringWithAggregatesFilter<"UserSession"> | string
    sess?: JsonWithAggregatesFilter<"UserSession">
    expire?: DateTimeWithAggregatesFilter<"UserSession"> | Date | string
  }

  export type PermissionWhereInput = {
    AND?: PermissionWhereInput | PermissionWhereInput[]
    OR?: PermissionWhereInput[]
    NOT?: PermissionWhereInput | PermissionWhereInput[]
    id?: IntFilter<"Permission"> | number
    code?: StringFilter<"Permission"> | string
    name?: StringFilter<"Permission"> | string
    description?: StringFilter<"Permission"> | string
    category?: StringFilter<"Permission"> | string
    createdAt?: DateTimeFilter<"Permission"> | Date | string
    updatedAt?: DateTimeFilter<"Permission"> | Date | string
    createdBy?: IntNullableFilter<"Permission"> | number | null
    updatedBy?: IntNullableFilter<"Permission"> | number | null
    users?: UserPermissionListRelationFilter
  }

  export type PermissionOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    users?: UserPermissionOrderByRelationAggregateInput
  }

  export type PermissionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    code?: string
    AND?: PermissionWhereInput | PermissionWhereInput[]
    OR?: PermissionWhereInput[]
    NOT?: PermissionWhereInput | PermissionWhereInput[]
    name?: StringFilter<"Permission"> | string
    description?: StringFilter<"Permission"> | string
    category?: StringFilter<"Permission"> | string
    createdAt?: DateTimeFilter<"Permission"> | Date | string
    updatedAt?: DateTimeFilter<"Permission"> | Date | string
    createdBy?: IntNullableFilter<"Permission"> | number | null
    updatedBy?: IntNullableFilter<"Permission"> | number | null
    users?: UserPermissionListRelationFilter
  }, "id" | "code">

  export type PermissionOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    _count?: PermissionCountOrderByAggregateInput
    _avg?: PermissionAvgOrderByAggregateInput
    _max?: PermissionMaxOrderByAggregateInput
    _min?: PermissionMinOrderByAggregateInput
    _sum?: PermissionSumOrderByAggregateInput
  }

  export type PermissionScalarWhereWithAggregatesInput = {
    AND?: PermissionScalarWhereWithAggregatesInput | PermissionScalarWhereWithAggregatesInput[]
    OR?: PermissionScalarWhereWithAggregatesInput[]
    NOT?: PermissionScalarWhereWithAggregatesInput | PermissionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Permission"> | number
    code?: StringWithAggregatesFilter<"Permission"> | string
    name?: StringWithAggregatesFilter<"Permission"> | string
    description?: StringWithAggregatesFilter<"Permission"> | string
    category?: StringWithAggregatesFilter<"Permission"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Permission"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Permission"> | Date | string
    createdBy?: IntNullableWithAggregatesFilter<"Permission"> | number | null
    updatedBy?: IntNullableWithAggregatesFilter<"Permission"> | number | null
  }

  export type UserPermissionWhereInput = {
    AND?: UserPermissionWhereInput | UserPermissionWhereInput[]
    OR?: UserPermissionWhereInput[]
    NOT?: UserPermissionWhereInput | UserPermissionWhereInput[]
    id?: IntFilter<"UserPermission"> | number
    userId?: IntFilter<"UserPermission"> | number
    permissionId?: IntFilter<"UserPermission"> | number
    grantedAt?: DateTimeFilter<"UserPermission"> | Date | string
    grantedBy?: IntNullableFilter<"UserPermission"> | number | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    permission?: XOR<PermissionScalarRelationFilter, PermissionWhereInput>
  }

  export type UserPermissionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    permissionId?: SortOrder
    grantedAt?: SortOrder
    grantedBy?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    permission?: PermissionOrderByWithRelationInput
  }

  export type UserPermissionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId_permissionId?: UserPermissionUserIdPermissionIdCompoundUniqueInput
    AND?: UserPermissionWhereInput | UserPermissionWhereInput[]
    OR?: UserPermissionWhereInput[]
    NOT?: UserPermissionWhereInput | UserPermissionWhereInput[]
    userId?: IntFilter<"UserPermission"> | number
    permissionId?: IntFilter<"UserPermission"> | number
    grantedAt?: DateTimeFilter<"UserPermission"> | Date | string
    grantedBy?: IntNullableFilter<"UserPermission"> | number | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    permission?: XOR<PermissionScalarRelationFilter, PermissionWhereInput>
  }, "id" | "userId_permissionId">

  export type UserPermissionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    permissionId?: SortOrder
    grantedAt?: SortOrder
    grantedBy?: SortOrderInput | SortOrder
    _count?: UserPermissionCountOrderByAggregateInput
    _avg?: UserPermissionAvgOrderByAggregateInput
    _max?: UserPermissionMaxOrderByAggregateInput
    _min?: UserPermissionMinOrderByAggregateInput
    _sum?: UserPermissionSumOrderByAggregateInput
  }

  export type UserPermissionScalarWhereWithAggregatesInput = {
    AND?: UserPermissionScalarWhereWithAggregatesInput | UserPermissionScalarWhereWithAggregatesInput[]
    OR?: UserPermissionScalarWhereWithAggregatesInput[]
    NOT?: UserPermissionScalarWhereWithAggregatesInput | UserPermissionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserPermission"> | number
    userId?: IntWithAggregatesFilter<"UserPermission"> | number
    permissionId?: IntWithAggregatesFilter<"UserPermission"> | number
    grantedAt?: DateTimeWithAggregatesFilter<"UserPermission"> | Date | string
    grantedBy?: IntNullableWithAggregatesFilter<"UserPermission"> | number | null
  }

  export type RefreshTokenWhereInput = {
    AND?: RefreshTokenWhereInput | RefreshTokenWhereInput[]
    OR?: RefreshTokenWhereInput[]
    NOT?: RefreshTokenWhereInput | RefreshTokenWhereInput[]
    token?: StringFilter<"RefreshToken"> | string
    userId?: IntFilter<"RefreshToken"> | number
    expiresAt?: DateTimeFilter<"RefreshToken"> | Date | string
    createdAt?: DateTimeFilter<"RefreshToken"> | Date | string
    createdByIp?: StringNullableFilter<"RefreshToken"> | string | null
    isRevoked?: BoolFilter<"RefreshToken"> | boolean
    revokedAt?: DateTimeNullableFilter<"RefreshToken"> | Date | string | null
    revokedByIp?: StringNullableFilter<"RefreshToken"> | string | null
    replacedByToken?: StringNullableFilter<"RefreshToken"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type RefreshTokenOrderByWithRelationInput = {
    token?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    createdByIp?: SortOrderInput | SortOrder
    isRevoked?: SortOrder
    revokedAt?: SortOrderInput | SortOrder
    revokedByIp?: SortOrderInput | SortOrder
    replacedByToken?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type RefreshTokenWhereUniqueInput = Prisma.AtLeast<{
    token?: string
    AND?: RefreshTokenWhereInput | RefreshTokenWhereInput[]
    OR?: RefreshTokenWhereInput[]
    NOT?: RefreshTokenWhereInput | RefreshTokenWhereInput[]
    userId?: IntFilter<"RefreshToken"> | number
    expiresAt?: DateTimeFilter<"RefreshToken"> | Date | string
    createdAt?: DateTimeFilter<"RefreshToken"> | Date | string
    createdByIp?: StringNullableFilter<"RefreshToken"> | string | null
    isRevoked?: BoolFilter<"RefreshToken"> | boolean
    revokedAt?: DateTimeNullableFilter<"RefreshToken"> | Date | string | null
    revokedByIp?: StringNullableFilter<"RefreshToken"> | string | null
    replacedByToken?: StringNullableFilter<"RefreshToken"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "token">

  export type RefreshTokenOrderByWithAggregationInput = {
    token?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    createdByIp?: SortOrderInput | SortOrder
    isRevoked?: SortOrder
    revokedAt?: SortOrderInput | SortOrder
    revokedByIp?: SortOrderInput | SortOrder
    replacedByToken?: SortOrderInput | SortOrder
    _count?: RefreshTokenCountOrderByAggregateInput
    _avg?: RefreshTokenAvgOrderByAggregateInput
    _max?: RefreshTokenMaxOrderByAggregateInput
    _min?: RefreshTokenMinOrderByAggregateInput
    _sum?: RefreshTokenSumOrderByAggregateInput
  }

  export type RefreshTokenScalarWhereWithAggregatesInput = {
    AND?: RefreshTokenScalarWhereWithAggregatesInput | RefreshTokenScalarWhereWithAggregatesInput[]
    OR?: RefreshTokenScalarWhereWithAggregatesInput[]
    NOT?: RefreshTokenScalarWhereWithAggregatesInput | RefreshTokenScalarWhereWithAggregatesInput[]
    token?: StringWithAggregatesFilter<"RefreshToken"> | string
    userId?: IntWithAggregatesFilter<"RefreshToken"> | number
    expiresAt?: DateTimeWithAggregatesFilter<"RefreshToken"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"RefreshToken"> | Date | string
    createdByIp?: StringNullableWithAggregatesFilter<"RefreshToken"> | string | null
    isRevoked?: BoolWithAggregatesFilter<"RefreshToken"> | boolean
    revokedAt?: DateTimeNullableWithAggregatesFilter<"RefreshToken"> | Date | string | null
    revokedByIp?: StringNullableWithAggregatesFilter<"RefreshToken"> | string | null
    replacedByToken?: StringNullableWithAggregatesFilter<"RefreshToken"> | string | null
  }

  export type SystemSettingsWhereInput = {
    AND?: SystemSettingsWhereInput | SystemSettingsWhereInput[]
    OR?: SystemSettingsWhereInput[]
    NOT?: SystemSettingsWhereInput | SystemSettingsWhereInput[]
    id?: IntFilter<"SystemSettings"> | number
    key?: StringFilter<"SystemSettings"> | string
    value?: StringFilter<"SystemSettings"> | string
    description?: StringNullableFilter<"SystemSettings"> | string | null
    createdAt?: DateTimeFilter<"SystemSettings"> | Date | string
    updatedAt?: DateTimeFilter<"SystemSettings"> | Date | string
  }

  export type SystemSettingsOrderByWithRelationInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemSettingsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    key?: string
    AND?: SystemSettingsWhereInput | SystemSettingsWhereInput[]
    OR?: SystemSettingsWhereInput[]
    NOT?: SystemSettingsWhereInput | SystemSettingsWhereInput[]
    value?: StringFilter<"SystemSettings"> | string
    description?: StringNullableFilter<"SystemSettings"> | string | null
    createdAt?: DateTimeFilter<"SystemSettings"> | Date | string
    updatedAt?: DateTimeFilter<"SystemSettings"> | Date | string
  }, "id" | "key">

  export type SystemSettingsOrderByWithAggregationInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SystemSettingsCountOrderByAggregateInput
    _avg?: SystemSettingsAvgOrderByAggregateInput
    _max?: SystemSettingsMaxOrderByAggregateInput
    _min?: SystemSettingsMinOrderByAggregateInput
    _sum?: SystemSettingsSumOrderByAggregateInput
  }

  export type SystemSettingsScalarWhereWithAggregatesInput = {
    AND?: SystemSettingsScalarWhereWithAggregatesInput | SystemSettingsScalarWhereWithAggregatesInput[]
    OR?: SystemSettingsScalarWhereWithAggregatesInput[]
    NOT?: SystemSettingsScalarWhereWithAggregatesInput | SystemSettingsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SystemSettings"> | number
    key?: StringWithAggregatesFilter<"SystemSettings"> | string
    value?: StringWithAggregatesFilter<"SystemSettings"> | string
    description?: StringNullableWithAggregatesFilter<"SystemSettings"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"SystemSettings"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SystemSettings"> | Date | string
  }

  export type CustomerWhereInput = {
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    id?: IntFilter<"Customer"> | number
    name?: StringFilter<"Customer"> | string
    company?: StringNullableFilter<"Customer"> | string | null
    email?: StringNullableFilter<"Customer"> | string | null
    phone?: StringNullableFilter<"Customer"> | string | null
    address?: StringNullableFilter<"Customer"> | string | null
    postalCode?: StringNullableFilter<"Customer"> | string | null
    city?: StringNullableFilter<"Customer"> | string | null
    country?: StringFilter<"Customer"> | string
    vatNumber?: StringNullableFilter<"Customer"> | string | null
    notes?: StringNullableFilter<"Customer"> | string | null
    newsletter?: BoolFilter<"Customer"> | boolean
    status?: StringFilter<"Customer"> | string
    type?: StringFilter<"Customer"> | string
    createdAt?: DateTimeFilter<"Customer"> | Date | string
    updatedAt?: DateTimeFilter<"Customer"> | Date | string
    createdBy?: IntNullableFilter<"Customer"> | number | null
    updatedBy?: IntNullableFilter<"Customer"> | number | null
    appointments?: AppointmentListRelationFilter
    logs?: CustomerLogListRelationFilter
    contactRequests?: ContactRequestListRelationFilter
  }

  export type CustomerOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    company?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    postalCode?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    country?: SortOrder
    vatNumber?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    newsletter?: SortOrder
    status?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    appointments?: AppointmentOrderByRelationAggregateInput
    logs?: CustomerLogOrderByRelationAggregateInput
    contactRequests?: ContactRequestOrderByRelationAggregateInput
  }

  export type CustomerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    name?: StringFilter<"Customer"> | string
    company?: StringNullableFilter<"Customer"> | string | null
    email?: StringNullableFilter<"Customer"> | string | null
    phone?: StringNullableFilter<"Customer"> | string | null
    address?: StringNullableFilter<"Customer"> | string | null
    postalCode?: StringNullableFilter<"Customer"> | string | null
    city?: StringNullableFilter<"Customer"> | string | null
    country?: StringFilter<"Customer"> | string
    vatNumber?: StringNullableFilter<"Customer"> | string | null
    notes?: StringNullableFilter<"Customer"> | string | null
    newsletter?: BoolFilter<"Customer"> | boolean
    status?: StringFilter<"Customer"> | string
    type?: StringFilter<"Customer"> | string
    createdAt?: DateTimeFilter<"Customer"> | Date | string
    updatedAt?: DateTimeFilter<"Customer"> | Date | string
    createdBy?: IntNullableFilter<"Customer"> | number | null
    updatedBy?: IntNullableFilter<"Customer"> | number | null
    appointments?: AppointmentListRelationFilter
    logs?: CustomerLogListRelationFilter
    contactRequests?: ContactRequestListRelationFilter
  }, "id">

  export type CustomerOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    company?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    postalCode?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    country?: SortOrder
    vatNumber?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    newsletter?: SortOrder
    status?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    _count?: CustomerCountOrderByAggregateInput
    _avg?: CustomerAvgOrderByAggregateInput
    _max?: CustomerMaxOrderByAggregateInput
    _min?: CustomerMinOrderByAggregateInput
    _sum?: CustomerSumOrderByAggregateInput
  }

  export type CustomerScalarWhereWithAggregatesInput = {
    AND?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    OR?: CustomerScalarWhereWithAggregatesInput[]
    NOT?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Customer"> | number
    name?: StringWithAggregatesFilter<"Customer"> | string
    company?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    email?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    phone?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    address?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    postalCode?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    city?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    country?: StringWithAggregatesFilter<"Customer"> | string
    vatNumber?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    notes?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    newsletter?: BoolWithAggregatesFilter<"Customer"> | boolean
    status?: StringWithAggregatesFilter<"Customer"> | string
    type?: StringWithAggregatesFilter<"Customer"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Customer"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Customer"> | Date | string
    createdBy?: IntNullableWithAggregatesFilter<"Customer"> | number | null
    updatedBy?: IntNullableWithAggregatesFilter<"Customer"> | number | null
  }

  export type CustomerLogWhereInput = {
    AND?: CustomerLogWhereInput | CustomerLogWhereInput[]
    OR?: CustomerLogWhereInput[]
    NOT?: CustomerLogWhereInput | CustomerLogWhereInput[]
    id?: IntFilter<"CustomerLog"> | number
    customerId?: IntFilter<"CustomerLog"> | number
    userId?: IntNullableFilter<"CustomerLog"> | number | null
    userName?: StringFilter<"CustomerLog"> | string
    action?: StringFilter<"CustomerLog"> | string
    details?: StringNullableFilter<"CustomerLog"> | string | null
    createdAt?: DateTimeFilter<"CustomerLog"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
  }

  export type CustomerLogOrderByWithRelationInput = {
    id?: SortOrder
    customerId?: SortOrder
    userId?: SortOrderInput | SortOrder
    userName?: SortOrder
    action?: SortOrder
    details?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    customer?: CustomerOrderByWithRelationInput
  }

  export type CustomerLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CustomerLogWhereInput | CustomerLogWhereInput[]
    OR?: CustomerLogWhereInput[]
    NOT?: CustomerLogWhereInput | CustomerLogWhereInput[]
    customerId?: IntFilter<"CustomerLog"> | number
    userId?: IntNullableFilter<"CustomerLog"> | number | null
    userName?: StringFilter<"CustomerLog"> | string
    action?: StringFilter<"CustomerLog"> | string
    details?: StringNullableFilter<"CustomerLog"> | string | null
    createdAt?: DateTimeFilter<"CustomerLog"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
  }, "id">

  export type CustomerLogOrderByWithAggregationInput = {
    id?: SortOrder
    customerId?: SortOrder
    userId?: SortOrderInput | SortOrder
    userName?: SortOrder
    action?: SortOrder
    details?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: CustomerLogCountOrderByAggregateInput
    _avg?: CustomerLogAvgOrderByAggregateInput
    _max?: CustomerLogMaxOrderByAggregateInput
    _min?: CustomerLogMinOrderByAggregateInput
    _sum?: CustomerLogSumOrderByAggregateInput
  }

  export type CustomerLogScalarWhereWithAggregatesInput = {
    AND?: CustomerLogScalarWhereWithAggregatesInput | CustomerLogScalarWhereWithAggregatesInput[]
    OR?: CustomerLogScalarWhereWithAggregatesInput[]
    NOT?: CustomerLogScalarWhereWithAggregatesInput | CustomerLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CustomerLog"> | number
    customerId?: IntWithAggregatesFilter<"CustomerLog"> | number
    userId?: IntNullableWithAggregatesFilter<"CustomerLog"> | number | null
    userName?: StringWithAggregatesFilter<"CustomerLog"> | string
    action?: StringWithAggregatesFilter<"CustomerLog"> | string
    details?: StringNullableWithAggregatesFilter<"CustomerLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"CustomerLog"> | Date | string
  }

  export type AppointmentWhereInput = {
    AND?: AppointmentWhereInput | AppointmentWhereInput[]
    OR?: AppointmentWhereInput[]
    NOT?: AppointmentWhereInput | AppointmentWhereInput[]
    id?: IntFilter<"Appointment"> | number
    title?: StringFilter<"Appointment"> | string
    customerId?: IntNullableFilter<"Appointment"> | number | null
    appointmentDate?: DateTimeFilter<"Appointment"> | Date | string
    duration?: IntNullableFilter<"Appointment"> | number | null
    location?: StringNullableFilter<"Appointment"> | string | null
    description?: StringNullableFilter<"Appointment"> | string | null
    status?: StringFilter<"Appointment"> | string
    createdBy?: IntNullableFilter<"Appointment"> | number | null
    createdAt?: DateTimeFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeFilter<"Appointment"> | Date | string
    customer?: XOR<CustomerNullableScalarRelationFilter, CustomerWhereInput> | null
    creator?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    notes?: AppointmentNoteListRelationFilter
    logs?: AppointmentLogListRelationFilter
    contactRequests?: ContactRequestListRelationFilter
  }

  export type AppointmentOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    customerId?: SortOrderInput | SortOrder
    appointmentDate?: SortOrder
    duration?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    customer?: CustomerOrderByWithRelationInput
    creator?: UserOrderByWithRelationInput
    notes?: AppointmentNoteOrderByRelationAggregateInput
    logs?: AppointmentLogOrderByRelationAggregateInput
    contactRequests?: ContactRequestOrderByRelationAggregateInput
  }

  export type AppointmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AppointmentWhereInput | AppointmentWhereInput[]
    OR?: AppointmentWhereInput[]
    NOT?: AppointmentWhereInput | AppointmentWhereInput[]
    title?: StringFilter<"Appointment"> | string
    customerId?: IntNullableFilter<"Appointment"> | number | null
    appointmentDate?: DateTimeFilter<"Appointment"> | Date | string
    duration?: IntNullableFilter<"Appointment"> | number | null
    location?: StringNullableFilter<"Appointment"> | string | null
    description?: StringNullableFilter<"Appointment"> | string | null
    status?: StringFilter<"Appointment"> | string
    createdBy?: IntNullableFilter<"Appointment"> | number | null
    createdAt?: DateTimeFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeFilter<"Appointment"> | Date | string
    customer?: XOR<CustomerNullableScalarRelationFilter, CustomerWhereInput> | null
    creator?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    notes?: AppointmentNoteListRelationFilter
    logs?: AppointmentLogListRelationFilter
    contactRequests?: ContactRequestListRelationFilter
  }, "id">

  export type AppointmentOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    customerId?: SortOrderInput | SortOrder
    appointmentDate?: SortOrder
    duration?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AppointmentCountOrderByAggregateInput
    _avg?: AppointmentAvgOrderByAggregateInput
    _max?: AppointmentMaxOrderByAggregateInput
    _min?: AppointmentMinOrderByAggregateInput
    _sum?: AppointmentSumOrderByAggregateInput
  }

  export type AppointmentScalarWhereWithAggregatesInput = {
    AND?: AppointmentScalarWhereWithAggregatesInput | AppointmentScalarWhereWithAggregatesInput[]
    OR?: AppointmentScalarWhereWithAggregatesInput[]
    NOT?: AppointmentScalarWhereWithAggregatesInput | AppointmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Appointment"> | number
    title?: StringWithAggregatesFilter<"Appointment"> | string
    customerId?: IntNullableWithAggregatesFilter<"Appointment"> | number | null
    appointmentDate?: DateTimeWithAggregatesFilter<"Appointment"> | Date | string
    duration?: IntNullableWithAggregatesFilter<"Appointment"> | number | null
    location?: StringNullableWithAggregatesFilter<"Appointment"> | string | null
    description?: StringNullableWithAggregatesFilter<"Appointment"> | string | null
    status?: StringWithAggregatesFilter<"Appointment"> | string
    createdBy?: IntNullableWithAggregatesFilter<"Appointment"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Appointment"> | Date | string
  }

  export type AppointmentNoteWhereInput = {
    AND?: AppointmentNoteWhereInput | AppointmentNoteWhereInput[]
    OR?: AppointmentNoteWhereInput[]
    NOT?: AppointmentNoteWhereInput | AppointmentNoteWhereInput[]
    id?: IntFilter<"AppointmentNote"> | number
    appointmentId?: IntFilter<"AppointmentNote"> | number
    userId?: IntFilter<"AppointmentNote"> | number
    userName?: StringFilter<"AppointmentNote"> | string
    text?: StringFilter<"AppointmentNote"> | string
    createdAt?: DateTimeFilter<"AppointmentNote"> | Date | string
    appointment?: XOR<AppointmentScalarRelationFilter, AppointmentWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AppointmentNoteOrderByWithRelationInput = {
    id?: SortOrder
    appointmentId?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
    appointment?: AppointmentOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type AppointmentNoteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AppointmentNoteWhereInput | AppointmentNoteWhereInput[]
    OR?: AppointmentNoteWhereInput[]
    NOT?: AppointmentNoteWhereInput | AppointmentNoteWhereInput[]
    appointmentId?: IntFilter<"AppointmentNote"> | number
    userId?: IntFilter<"AppointmentNote"> | number
    userName?: StringFilter<"AppointmentNote"> | string
    text?: StringFilter<"AppointmentNote"> | string
    createdAt?: DateTimeFilter<"AppointmentNote"> | Date | string
    appointment?: XOR<AppointmentScalarRelationFilter, AppointmentWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type AppointmentNoteOrderByWithAggregationInput = {
    id?: SortOrder
    appointmentId?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
    _count?: AppointmentNoteCountOrderByAggregateInput
    _avg?: AppointmentNoteAvgOrderByAggregateInput
    _max?: AppointmentNoteMaxOrderByAggregateInput
    _min?: AppointmentNoteMinOrderByAggregateInput
    _sum?: AppointmentNoteSumOrderByAggregateInput
  }

  export type AppointmentNoteScalarWhereWithAggregatesInput = {
    AND?: AppointmentNoteScalarWhereWithAggregatesInput | AppointmentNoteScalarWhereWithAggregatesInput[]
    OR?: AppointmentNoteScalarWhereWithAggregatesInput[]
    NOT?: AppointmentNoteScalarWhereWithAggregatesInput | AppointmentNoteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AppointmentNote"> | number
    appointmentId?: IntWithAggregatesFilter<"AppointmentNote"> | number
    userId?: IntWithAggregatesFilter<"AppointmentNote"> | number
    userName?: StringWithAggregatesFilter<"AppointmentNote"> | string
    text?: StringWithAggregatesFilter<"AppointmentNote"> | string
    createdAt?: DateTimeWithAggregatesFilter<"AppointmentNote"> | Date | string
  }

  export type AppointmentLogWhereInput = {
    AND?: AppointmentLogWhereInput | AppointmentLogWhereInput[]
    OR?: AppointmentLogWhereInput[]
    NOT?: AppointmentLogWhereInput | AppointmentLogWhereInput[]
    id?: IntFilter<"AppointmentLog"> | number
    appointmentId?: IntFilter<"AppointmentLog"> | number
    userId?: IntFilter<"AppointmentLog"> | number
    userName?: StringFilter<"AppointmentLog"> | string
    action?: StringFilter<"AppointmentLog"> | string
    details?: StringNullableFilter<"AppointmentLog"> | string | null
    createdAt?: DateTimeFilter<"AppointmentLog"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    appointment?: XOR<AppointmentScalarRelationFilter, AppointmentWhereInput>
  }

  export type AppointmentLogOrderByWithRelationInput = {
    id?: SortOrder
    appointmentId?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    action?: SortOrder
    details?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    appointment?: AppointmentOrderByWithRelationInput
  }

  export type AppointmentLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AppointmentLogWhereInput | AppointmentLogWhereInput[]
    OR?: AppointmentLogWhereInput[]
    NOT?: AppointmentLogWhereInput | AppointmentLogWhereInput[]
    appointmentId?: IntFilter<"AppointmentLog"> | number
    userId?: IntFilter<"AppointmentLog"> | number
    userName?: StringFilter<"AppointmentLog"> | string
    action?: StringFilter<"AppointmentLog"> | string
    details?: StringNullableFilter<"AppointmentLog"> | string | null
    createdAt?: DateTimeFilter<"AppointmentLog"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    appointment?: XOR<AppointmentScalarRelationFilter, AppointmentWhereInput>
  }, "id">

  export type AppointmentLogOrderByWithAggregationInput = {
    id?: SortOrder
    appointmentId?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    action?: SortOrder
    details?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AppointmentLogCountOrderByAggregateInput
    _avg?: AppointmentLogAvgOrderByAggregateInput
    _max?: AppointmentLogMaxOrderByAggregateInput
    _min?: AppointmentLogMinOrderByAggregateInput
    _sum?: AppointmentLogSumOrderByAggregateInput
  }

  export type AppointmentLogScalarWhereWithAggregatesInput = {
    AND?: AppointmentLogScalarWhereWithAggregatesInput | AppointmentLogScalarWhereWithAggregatesInput[]
    OR?: AppointmentLogScalarWhereWithAggregatesInput[]
    NOT?: AppointmentLogScalarWhereWithAggregatesInput | AppointmentLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AppointmentLog"> | number
    appointmentId?: IntWithAggregatesFilter<"AppointmentLog"> | number
    userId?: IntWithAggregatesFilter<"AppointmentLog"> | number
    userName?: StringWithAggregatesFilter<"AppointmentLog"> | string
    action?: StringWithAggregatesFilter<"AppointmentLog"> | string
    details?: StringNullableWithAggregatesFilter<"AppointmentLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AppointmentLog"> | Date | string
  }

  export type ContactRequestWhereInput = {
    AND?: ContactRequestWhereInput | ContactRequestWhereInput[]
    OR?: ContactRequestWhereInput[]
    NOT?: ContactRequestWhereInput | ContactRequestWhereInput[]
    id?: IntFilter<"ContactRequest"> | number
    name?: StringFilter<"ContactRequest"> | string
    email?: StringFilter<"ContactRequest"> | string
    phone?: StringNullableFilter<"ContactRequest"> | string | null
    service?: StringFilter<"ContactRequest"> | string
    message?: StringFilter<"ContactRequest"> | string
    status?: StringFilter<"ContactRequest"> | string
    processorId?: IntNullableFilter<"ContactRequest"> | number | null
    customerId?: IntNullableFilter<"ContactRequest"> | number | null
    appointmentId?: IntNullableFilter<"ContactRequest"> | number | null
    ipAddress?: StringNullableFilter<"ContactRequest"> | string | null
    source?: StringNullableFilter<"ContactRequest"> | string | null
    metadata?: JsonNullableFilter<"ContactRequest">
    createdAt?: DateTimeFilter<"ContactRequest"> | Date | string
    updatedAt?: DateTimeFilter<"ContactRequest"> | Date | string
    notes?: RequestNoteListRelationFilter
    logs?: RequestLogListRelationFilter
    requestData?: RequestDataListRelationFilter
    customer?: XOR<CustomerNullableScalarRelationFilter, CustomerWhereInput> | null
    appointment?: XOR<AppointmentNullableScalarRelationFilter, AppointmentWhereInput> | null
    processor?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type ContactRequestOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    service?: SortOrder
    message?: SortOrder
    status?: SortOrder
    processorId?: SortOrderInput | SortOrder
    customerId?: SortOrderInput | SortOrder
    appointmentId?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    source?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    notes?: RequestNoteOrderByRelationAggregateInput
    logs?: RequestLogOrderByRelationAggregateInput
    requestData?: RequestDataOrderByRelationAggregateInput
    customer?: CustomerOrderByWithRelationInput
    appointment?: AppointmentOrderByWithRelationInput
    processor?: UserOrderByWithRelationInput
  }

  export type ContactRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ContactRequestWhereInput | ContactRequestWhereInput[]
    OR?: ContactRequestWhereInput[]
    NOT?: ContactRequestWhereInput | ContactRequestWhereInput[]
    name?: StringFilter<"ContactRequest"> | string
    email?: StringFilter<"ContactRequest"> | string
    phone?: StringNullableFilter<"ContactRequest"> | string | null
    service?: StringFilter<"ContactRequest"> | string
    message?: StringFilter<"ContactRequest"> | string
    status?: StringFilter<"ContactRequest"> | string
    processorId?: IntNullableFilter<"ContactRequest"> | number | null
    customerId?: IntNullableFilter<"ContactRequest"> | number | null
    appointmentId?: IntNullableFilter<"ContactRequest"> | number | null
    ipAddress?: StringNullableFilter<"ContactRequest"> | string | null
    source?: StringNullableFilter<"ContactRequest"> | string | null
    metadata?: JsonNullableFilter<"ContactRequest">
    createdAt?: DateTimeFilter<"ContactRequest"> | Date | string
    updatedAt?: DateTimeFilter<"ContactRequest"> | Date | string
    notes?: RequestNoteListRelationFilter
    logs?: RequestLogListRelationFilter
    requestData?: RequestDataListRelationFilter
    customer?: XOR<CustomerNullableScalarRelationFilter, CustomerWhereInput> | null
    appointment?: XOR<AppointmentNullableScalarRelationFilter, AppointmentWhereInput> | null
    processor?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type ContactRequestOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    service?: SortOrder
    message?: SortOrder
    status?: SortOrder
    processorId?: SortOrderInput | SortOrder
    customerId?: SortOrderInput | SortOrder
    appointmentId?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    source?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ContactRequestCountOrderByAggregateInput
    _avg?: ContactRequestAvgOrderByAggregateInput
    _max?: ContactRequestMaxOrderByAggregateInput
    _min?: ContactRequestMinOrderByAggregateInput
    _sum?: ContactRequestSumOrderByAggregateInput
  }

  export type ContactRequestScalarWhereWithAggregatesInput = {
    AND?: ContactRequestScalarWhereWithAggregatesInput | ContactRequestScalarWhereWithAggregatesInput[]
    OR?: ContactRequestScalarWhereWithAggregatesInput[]
    NOT?: ContactRequestScalarWhereWithAggregatesInput | ContactRequestScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ContactRequest"> | number
    name?: StringWithAggregatesFilter<"ContactRequest"> | string
    email?: StringWithAggregatesFilter<"ContactRequest"> | string
    phone?: StringNullableWithAggregatesFilter<"ContactRequest"> | string | null
    service?: StringWithAggregatesFilter<"ContactRequest"> | string
    message?: StringWithAggregatesFilter<"ContactRequest"> | string
    status?: StringWithAggregatesFilter<"ContactRequest"> | string
    processorId?: IntNullableWithAggregatesFilter<"ContactRequest"> | number | null
    customerId?: IntNullableWithAggregatesFilter<"ContactRequest"> | number | null
    appointmentId?: IntNullableWithAggregatesFilter<"ContactRequest"> | number | null
    ipAddress?: StringNullableWithAggregatesFilter<"ContactRequest"> | string | null
    source?: StringNullableWithAggregatesFilter<"ContactRequest"> | string | null
    metadata?: JsonNullableWithAggregatesFilter<"ContactRequest">
    createdAt?: DateTimeWithAggregatesFilter<"ContactRequest"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ContactRequest"> | Date | string
  }

  export type RequestNoteWhereInput = {
    AND?: RequestNoteWhereInput | RequestNoteWhereInput[]
    OR?: RequestNoteWhereInput[]
    NOT?: RequestNoteWhereInput | RequestNoteWhereInput[]
    id?: IntFilter<"RequestNote"> | number
    requestId?: IntFilter<"RequestNote"> | number
    userId?: IntFilter<"RequestNote"> | number
    userName?: StringFilter<"RequestNote"> | string
    text?: StringFilter<"RequestNote"> | string
    createdAt?: DateTimeFilter<"RequestNote"> | Date | string
    request?: XOR<ContactRequestScalarRelationFilter, ContactRequestWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type RequestNoteOrderByWithRelationInput = {
    id?: SortOrder
    requestId?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
    request?: ContactRequestOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type RequestNoteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RequestNoteWhereInput | RequestNoteWhereInput[]
    OR?: RequestNoteWhereInput[]
    NOT?: RequestNoteWhereInput | RequestNoteWhereInput[]
    requestId?: IntFilter<"RequestNote"> | number
    userId?: IntFilter<"RequestNote"> | number
    userName?: StringFilter<"RequestNote"> | string
    text?: StringFilter<"RequestNote"> | string
    createdAt?: DateTimeFilter<"RequestNote"> | Date | string
    request?: XOR<ContactRequestScalarRelationFilter, ContactRequestWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type RequestNoteOrderByWithAggregationInput = {
    id?: SortOrder
    requestId?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
    _count?: RequestNoteCountOrderByAggregateInput
    _avg?: RequestNoteAvgOrderByAggregateInput
    _max?: RequestNoteMaxOrderByAggregateInput
    _min?: RequestNoteMinOrderByAggregateInput
    _sum?: RequestNoteSumOrderByAggregateInput
  }

  export type RequestNoteScalarWhereWithAggregatesInput = {
    AND?: RequestNoteScalarWhereWithAggregatesInput | RequestNoteScalarWhereWithAggregatesInput[]
    OR?: RequestNoteScalarWhereWithAggregatesInput[]
    NOT?: RequestNoteScalarWhereWithAggregatesInput | RequestNoteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RequestNote"> | number
    requestId?: IntWithAggregatesFilter<"RequestNote"> | number
    userId?: IntWithAggregatesFilter<"RequestNote"> | number
    userName?: StringWithAggregatesFilter<"RequestNote"> | string
    text?: StringWithAggregatesFilter<"RequestNote"> | string
    createdAt?: DateTimeWithAggregatesFilter<"RequestNote"> | Date | string
  }

  export type RequestLogWhereInput = {
    AND?: RequestLogWhereInput | RequestLogWhereInput[]
    OR?: RequestLogWhereInput[]
    NOT?: RequestLogWhereInput | RequestLogWhereInput[]
    id?: IntFilter<"RequestLog"> | number
    requestId?: IntFilter<"RequestLog"> | number
    userId?: IntFilter<"RequestLog"> | number
    userName?: StringFilter<"RequestLog"> | string
    action?: StringFilter<"RequestLog"> | string
    details?: StringNullableFilter<"RequestLog"> | string | null
    createdAt?: DateTimeFilter<"RequestLog"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    request?: XOR<ContactRequestScalarRelationFilter, ContactRequestWhereInput>
  }

  export type RequestLogOrderByWithRelationInput = {
    id?: SortOrder
    requestId?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    action?: SortOrder
    details?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    request?: ContactRequestOrderByWithRelationInput
  }

  export type RequestLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RequestLogWhereInput | RequestLogWhereInput[]
    OR?: RequestLogWhereInput[]
    NOT?: RequestLogWhereInput | RequestLogWhereInput[]
    requestId?: IntFilter<"RequestLog"> | number
    userId?: IntFilter<"RequestLog"> | number
    userName?: StringFilter<"RequestLog"> | string
    action?: StringFilter<"RequestLog"> | string
    details?: StringNullableFilter<"RequestLog"> | string | null
    createdAt?: DateTimeFilter<"RequestLog"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    request?: XOR<ContactRequestScalarRelationFilter, ContactRequestWhereInput>
  }, "id">

  export type RequestLogOrderByWithAggregationInput = {
    id?: SortOrder
    requestId?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    action?: SortOrder
    details?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: RequestLogCountOrderByAggregateInput
    _avg?: RequestLogAvgOrderByAggregateInput
    _max?: RequestLogMaxOrderByAggregateInput
    _min?: RequestLogMinOrderByAggregateInput
    _sum?: RequestLogSumOrderByAggregateInput
  }

  export type RequestLogScalarWhereWithAggregatesInput = {
    AND?: RequestLogScalarWhereWithAggregatesInput | RequestLogScalarWhereWithAggregatesInput[]
    OR?: RequestLogScalarWhereWithAggregatesInput[]
    NOT?: RequestLogScalarWhereWithAggregatesInput | RequestLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RequestLog"> | number
    requestId?: IntWithAggregatesFilter<"RequestLog"> | number
    userId?: IntWithAggregatesFilter<"RequestLog"> | number
    userName?: StringWithAggregatesFilter<"RequestLog"> | string
    action?: StringWithAggregatesFilter<"RequestLog"> | string
    details?: StringNullableWithAggregatesFilter<"RequestLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"RequestLog"> | Date | string
  }

  export type RequestDataWhereInput = {
    AND?: RequestDataWhereInput | RequestDataWhereInput[]
    OR?: RequestDataWhereInput[]
    NOT?: RequestDataWhereInput | RequestDataWhereInput[]
    id?: IntFilter<"RequestData"> | number
    requestId?: IntFilter<"RequestData"> | number
    category?: StringFilter<"RequestData"> | string
    label?: StringFilter<"RequestData"> | string
    order?: IntFilter<"RequestData"> | number
    dataType?: StringFilter<"RequestData"> | string
    data?: JsonFilter<"RequestData">
    isValid?: BoolFilter<"RequestData"> | boolean
    processedBy?: StringNullableFilter<"RequestData"> | string | null
    version?: IntFilter<"RequestData"> | number
    createdAt?: DateTimeFilter<"RequestData"> | Date | string
    updatedAt?: DateTimeFilter<"RequestData"> | Date | string
    createdById?: IntNullableFilter<"RequestData"> | number | null
    request?: XOR<ContactRequestScalarRelationFilter, ContactRequestWhereInput>
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    history?: RequestDataHistoryListRelationFilter
  }

  export type RequestDataOrderByWithRelationInput = {
    id?: SortOrder
    requestId?: SortOrder
    category?: SortOrder
    label?: SortOrder
    order?: SortOrder
    dataType?: SortOrder
    data?: SortOrder
    isValid?: SortOrder
    processedBy?: SortOrderInput | SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    request?: ContactRequestOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
    history?: RequestDataHistoryOrderByRelationAggregateInput
  }

  export type RequestDataWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RequestDataWhereInput | RequestDataWhereInput[]
    OR?: RequestDataWhereInput[]
    NOT?: RequestDataWhereInput | RequestDataWhereInput[]
    requestId?: IntFilter<"RequestData"> | number
    category?: StringFilter<"RequestData"> | string
    label?: StringFilter<"RequestData"> | string
    order?: IntFilter<"RequestData"> | number
    dataType?: StringFilter<"RequestData"> | string
    data?: JsonFilter<"RequestData">
    isValid?: BoolFilter<"RequestData"> | boolean
    processedBy?: StringNullableFilter<"RequestData"> | string | null
    version?: IntFilter<"RequestData"> | number
    createdAt?: DateTimeFilter<"RequestData"> | Date | string
    updatedAt?: DateTimeFilter<"RequestData"> | Date | string
    createdById?: IntNullableFilter<"RequestData"> | number | null
    request?: XOR<ContactRequestScalarRelationFilter, ContactRequestWhereInput>
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    history?: RequestDataHistoryListRelationFilter
  }, "id">

  export type RequestDataOrderByWithAggregationInput = {
    id?: SortOrder
    requestId?: SortOrder
    category?: SortOrder
    label?: SortOrder
    order?: SortOrder
    dataType?: SortOrder
    data?: SortOrder
    isValid?: SortOrder
    processedBy?: SortOrderInput | SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    _count?: RequestDataCountOrderByAggregateInput
    _avg?: RequestDataAvgOrderByAggregateInput
    _max?: RequestDataMaxOrderByAggregateInput
    _min?: RequestDataMinOrderByAggregateInput
    _sum?: RequestDataSumOrderByAggregateInput
  }

  export type RequestDataScalarWhereWithAggregatesInput = {
    AND?: RequestDataScalarWhereWithAggregatesInput | RequestDataScalarWhereWithAggregatesInput[]
    OR?: RequestDataScalarWhereWithAggregatesInput[]
    NOT?: RequestDataScalarWhereWithAggregatesInput | RequestDataScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RequestData"> | number
    requestId?: IntWithAggregatesFilter<"RequestData"> | number
    category?: StringWithAggregatesFilter<"RequestData"> | string
    label?: StringWithAggregatesFilter<"RequestData"> | string
    order?: IntWithAggregatesFilter<"RequestData"> | number
    dataType?: StringWithAggregatesFilter<"RequestData"> | string
    data?: JsonWithAggregatesFilter<"RequestData">
    isValid?: BoolWithAggregatesFilter<"RequestData"> | boolean
    processedBy?: StringNullableWithAggregatesFilter<"RequestData"> | string | null
    version?: IntWithAggregatesFilter<"RequestData"> | number
    createdAt?: DateTimeWithAggregatesFilter<"RequestData"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"RequestData"> | Date | string
    createdById?: IntNullableWithAggregatesFilter<"RequestData"> | number | null
  }

  export type RequestDataHistoryWhereInput = {
    AND?: RequestDataHistoryWhereInput | RequestDataHistoryWhereInput[]
    OR?: RequestDataHistoryWhereInput[]
    NOT?: RequestDataHistoryWhereInput | RequestDataHistoryWhereInput[]
    id?: IntFilter<"RequestDataHistory"> | number
    requestDataId?: IntFilter<"RequestDataHistory"> | number
    data?: JsonFilter<"RequestDataHistory">
    changedBy?: StringNullableFilter<"RequestDataHistory"> | string | null
    changeReason?: StringNullableFilter<"RequestDataHistory"> | string | null
    version?: IntFilter<"RequestDataHistory"> | number
    createdAt?: DateTimeFilter<"RequestDataHistory"> | Date | string
    userId?: IntNullableFilter<"RequestDataHistory"> | number | null
    requestData?: XOR<RequestDataScalarRelationFilter, RequestDataWhereInput>
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type RequestDataHistoryOrderByWithRelationInput = {
    id?: SortOrder
    requestDataId?: SortOrder
    data?: SortOrder
    changedBy?: SortOrderInput | SortOrder
    changeReason?: SortOrderInput | SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrderInput | SortOrder
    requestData?: RequestDataOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type RequestDataHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RequestDataHistoryWhereInput | RequestDataHistoryWhereInput[]
    OR?: RequestDataHistoryWhereInput[]
    NOT?: RequestDataHistoryWhereInput | RequestDataHistoryWhereInput[]
    requestDataId?: IntFilter<"RequestDataHistory"> | number
    data?: JsonFilter<"RequestDataHistory">
    changedBy?: StringNullableFilter<"RequestDataHistory"> | string | null
    changeReason?: StringNullableFilter<"RequestDataHistory"> | string | null
    version?: IntFilter<"RequestDataHistory"> | number
    createdAt?: DateTimeFilter<"RequestDataHistory"> | Date | string
    userId?: IntNullableFilter<"RequestDataHistory"> | number | null
    requestData?: XOR<RequestDataScalarRelationFilter, RequestDataWhereInput>
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type RequestDataHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    requestDataId?: SortOrder
    data?: SortOrder
    changedBy?: SortOrderInput | SortOrder
    changeReason?: SortOrderInput | SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrderInput | SortOrder
    _count?: RequestDataHistoryCountOrderByAggregateInput
    _avg?: RequestDataHistoryAvgOrderByAggregateInput
    _max?: RequestDataHistoryMaxOrderByAggregateInput
    _min?: RequestDataHistoryMinOrderByAggregateInput
    _sum?: RequestDataHistorySumOrderByAggregateInput
  }

  export type RequestDataHistoryScalarWhereWithAggregatesInput = {
    AND?: RequestDataHistoryScalarWhereWithAggregatesInput | RequestDataHistoryScalarWhereWithAggregatesInput[]
    OR?: RequestDataHistoryScalarWhereWithAggregatesInput[]
    NOT?: RequestDataHistoryScalarWhereWithAggregatesInput | RequestDataHistoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RequestDataHistory"> | number
    requestDataId?: IntWithAggregatesFilter<"RequestDataHistory"> | number
    data?: JsonWithAggregatesFilter<"RequestDataHistory">
    changedBy?: StringNullableWithAggregatesFilter<"RequestDataHistory"> | string | null
    changeReason?: StringNullableWithAggregatesFilter<"RequestDataHistory"> | string | null
    version?: IntWithAggregatesFilter<"RequestDataHistory"> | number
    createdAt?: DateTimeWithAggregatesFilter<"RequestDataHistory"> | Date | string
    userId?: IntNullableWithAggregatesFilter<"RequestDataHistory"> | number | null
  }

  export type N8NWebhookWhereInput = {
    AND?: N8NWebhookWhereInput | N8NWebhookWhereInput[]
    OR?: N8NWebhookWhereInput[]
    NOT?: N8NWebhookWhereInput | N8NWebhookWhereInput[]
    id?: IntFilter<"N8NWebhook"> | number
    name?: StringFilter<"N8NWebhook"> | string
    description?: StringNullableFilter<"N8NWebhook"> | string | null
    url?: StringFilter<"N8NWebhook"> | string
    workflowId?: StringNullableFilter<"N8NWebhook"> | string | null
    active?: BoolFilter<"N8NWebhook"> | boolean
    category?: StringFilter<"N8NWebhook"> | string
    createdAt?: DateTimeFilter<"N8NWebhook"> | Date | string
    updatedAt?: DateTimeFilter<"N8NWebhook"> | Date | string
  }

  export type N8NWebhookOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    url?: SortOrder
    workflowId?: SortOrderInput | SortOrder
    active?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type N8NWebhookWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: N8NWebhookWhereInput | N8NWebhookWhereInput[]
    OR?: N8NWebhookWhereInput[]
    NOT?: N8NWebhookWhereInput | N8NWebhookWhereInput[]
    name?: StringFilter<"N8NWebhook"> | string
    description?: StringNullableFilter<"N8NWebhook"> | string | null
    url?: StringFilter<"N8NWebhook"> | string
    workflowId?: StringNullableFilter<"N8NWebhook"> | string | null
    active?: BoolFilter<"N8NWebhook"> | boolean
    category?: StringFilter<"N8NWebhook"> | string
    createdAt?: DateTimeFilter<"N8NWebhook"> | Date | string
    updatedAt?: DateTimeFilter<"N8NWebhook"> | Date | string
  }, "id">

  export type N8NWebhookOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    url?: SortOrder
    workflowId?: SortOrderInput | SortOrder
    active?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: N8NWebhookCountOrderByAggregateInput
    _avg?: N8NWebhookAvgOrderByAggregateInput
    _max?: N8NWebhookMaxOrderByAggregateInput
    _min?: N8NWebhookMinOrderByAggregateInput
    _sum?: N8NWebhookSumOrderByAggregateInput
  }

  export type N8NWebhookScalarWhereWithAggregatesInput = {
    AND?: N8NWebhookScalarWhereWithAggregatesInput | N8NWebhookScalarWhereWithAggregatesInput[]
    OR?: N8NWebhookScalarWhereWithAggregatesInput[]
    NOT?: N8NWebhookScalarWhereWithAggregatesInput | N8NWebhookScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"N8NWebhook"> | number
    name?: StringWithAggregatesFilter<"N8NWebhook"> | string
    description?: StringNullableWithAggregatesFilter<"N8NWebhook"> | string | null
    url?: StringWithAggregatesFilter<"N8NWebhook"> | string
    workflowId?: StringNullableWithAggregatesFilter<"N8NWebhook"> | string | null
    active?: BoolWithAggregatesFilter<"N8NWebhook"> | boolean
    category?: StringWithAggregatesFilter<"N8NWebhook"> | string
    createdAt?: DateTimeWithAggregatesFilter<"N8NWebhook"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"N8NWebhook"> | Date | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: IntFilter<"Notification"> | number
    userId?: IntNullableFilter<"Notification"> | number | null
    referenceId?: IntNullableFilter<"Notification"> | number | null
    referenceType?: StringNullableFilter<"Notification"> | string | null
    type?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringNullableFilter<"Notification"> | string | null
    description?: StringNullableFilter<"Notification"> | string | null
    read?: BoolFilter<"Notification"> | boolean
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
    createdBy?: IntNullableFilter<"Notification"> | number | null
    updatedBy?: IntNullableFilter<"Notification"> | number | null
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    referenceId?: SortOrderInput | SortOrder
    referenceType?: SortOrderInput | SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    read?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    userId?: IntNullableFilter<"Notification"> | number | null
    referenceId?: IntNullableFilter<"Notification"> | number | null
    referenceType?: StringNullableFilter<"Notification"> | string | null
    type?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringNullableFilter<"Notification"> | string | null
    description?: StringNullableFilter<"Notification"> | string | null
    read?: BoolFilter<"Notification"> | boolean
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
    createdBy?: IntNullableFilter<"Notification"> | number | null
    updatedBy?: IntNullableFilter<"Notification"> | number | null
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    referenceId?: SortOrderInput | SortOrder
    referenceType?: SortOrderInput | SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    read?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _avg?: NotificationAvgOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
    _sum?: NotificationSumOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Notification"> | number
    userId?: IntNullableWithAggregatesFilter<"Notification"> | number | null
    referenceId?: IntNullableWithAggregatesFilter<"Notification"> | number | null
    referenceType?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    type?: StringWithAggregatesFilter<"Notification"> | string
    title?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    description?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    read?: BoolWithAggregatesFilter<"Notification"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    createdBy?: IntNullableWithAggregatesFilter<"Notification"> | number | null
    updatedBy?: IntNullableWithAggregatesFilter<"Notification"> | number | null
  }

  export type FileWhereInput = {
    AND?: FileWhereInput | FileWhereInput[]
    OR?: FileWhereInput[]
    NOT?: FileWhereInput | FileWhereInput[]
    id?: IntFilter<"File"> | number
    filename?: StringFilter<"File"> | string
    originalName?: StringFilter<"File"> | string
    mimeType?: StringFilter<"File"> | string
    path?: StringFilter<"File"> | string
    size?: IntFilter<"File"> | number
    type?: StringFilter<"File"> | string
    uploadedAt?: DateTimeFilter<"File"> | Date | string
    uploadedBy?: IntNullableFilter<"File"> | number | null
    description?: StringNullableFilter<"File"> | string | null
    isDeleted?: BoolFilter<"File"> | boolean
    deletedAt?: DateTimeNullableFilter<"File"> | Date | string | null
    userProfiles?: UserListRelationFilter
  }

  export type FileOrderByWithRelationInput = {
    id?: SortOrder
    filename?: SortOrder
    originalName?: SortOrder
    mimeType?: SortOrder
    path?: SortOrder
    size?: SortOrder
    type?: SortOrder
    uploadedAt?: SortOrder
    uploadedBy?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    isDeleted?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    userProfiles?: UserOrderByRelationAggregateInput
  }

  export type FileWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FileWhereInput | FileWhereInput[]
    OR?: FileWhereInput[]
    NOT?: FileWhereInput | FileWhereInput[]
    filename?: StringFilter<"File"> | string
    originalName?: StringFilter<"File"> | string
    mimeType?: StringFilter<"File"> | string
    path?: StringFilter<"File"> | string
    size?: IntFilter<"File"> | number
    type?: StringFilter<"File"> | string
    uploadedAt?: DateTimeFilter<"File"> | Date | string
    uploadedBy?: IntNullableFilter<"File"> | number | null
    description?: StringNullableFilter<"File"> | string | null
    isDeleted?: BoolFilter<"File"> | boolean
    deletedAt?: DateTimeNullableFilter<"File"> | Date | string | null
    userProfiles?: UserListRelationFilter
  }, "id">

  export type FileOrderByWithAggregationInput = {
    id?: SortOrder
    filename?: SortOrder
    originalName?: SortOrder
    mimeType?: SortOrder
    path?: SortOrder
    size?: SortOrder
    type?: SortOrder
    uploadedAt?: SortOrder
    uploadedBy?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    isDeleted?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: FileCountOrderByAggregateInput
    _avg?: FileAvgOrderByAggregateInput
    _max?: FileMaxOrderByAggregateInput
    _min?: FileMinOrderByAggregateInput
    _sum?: FileSumOrderByAggregateInput
  }

  export type FileScalarWhereWithAggregatesInput = {
    AND?: FileScalarWhereWithAggregatesInput | FileScalarWhereWithAggregatesInput[]
    OR?: FileScalarWhereWithAggregatesInput[]
    NOT?: FileScalarWhereWithAggregatesInput | FileScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"File"> | number
    filename?: StringWithAggregatesFilter<"File"> | string
    originalName?: StringWithAggregatesFilter<"File"> | string
    mimeType?: StringWithAggregatesFilter<"File"> | string
    path?: StringWithAggregatesFilter<"File"> | string
    size?: IntWithAggregatesFilter<"File"> | number
    type?: StringWithAggregatesFilter<"File"> | string
    uploadedAt?: DateTimeWithAggregatesFilter<"File"> | Date | string
    uploadedBy?: IntNullableWithAggregatesFilter<"File"> | number | null
    description?: StringNullableWithAggregatesFilter<"File"> | string | null
    isDeleted?: BoolWithAggregatesFilter<"File"> | boolean
    deletedAt?: DateTimeNullableWithAggregatesFilter<"File"> | Date | string | null
  }

  export type UserCreateInput = {
    name: string
    email: string
    password: string
    role?: string
    phone?: string | null
    status?: string
    profilePicture?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    appointments?: AppointmentCreateNestedManyWithoutCreatorInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    customerLogs?: CustomerLogCreateNestedManyWithoutUserInput
    appointmentNotes?: AppointmentNoteCreateNestedManyWithoutUserInput
    appointmentLogs?: AppointmentLogCreateNestedManyWithoutUserInput
    contactRequests?: ContactRequestCreateNestedManyWithoutProcessorInput
    requestNotes?: RequestNoteCreateNestedManyWithoutUserInput
    requestLogs?: RequestLogCreateNestedManyWithoutUserInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    profilePictureFile?: FileCreateNestedOneWithoutUserProfilesInput
    requestData?: RequestDataCreateNestedManyWithoutCreatedByInput
    requestDataHistory?: RequestDataHistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    password: string
    role?: string
    phone?: string | null
    status?: string
    profilePicture?: string | null
    profilePictureId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutCreatorInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    customerLogs?: CustomerLogUncheckedCreateNestedManyWithoutUserInput
    appointmentNotes?: AppointmentNoteUncheckedCreateNestedManyWithoutUserInput
    appointmentLogs?: AppointmentLogUncheckedCreateNestedManyWithoutUserInput
    contactRequests?: ContactRequestUncheckedCreateNestedManyWithoutProcessorInput
    requestNotes?: RequestNoteUncheckedCreateNestedManyWithoutUserInput
    requestLogs?: RequestLogUncheckedCreateNestedManyWithoutUserInput
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    requestData?: RequestDataUncheckedCreateNestedManyWithoutCreatedByInput
    requestDataHistory?: RequestDataHistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    appointments?: AppointmentUpdateManyWithoutCreatorNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    customerLogs?: CustomerLogUpdateManyWithoutUserNestedInput
    appointmentNotes?: AppointmentNoteUpdateManyWithoutUserNestedInput
    appointmentLogs?: AppointmentLogUpdateManyWithoutUserNestedInput
    contactRequests?: ContactRequestUpdateManyWithoutProcessorNestedInput
    requestNotes?: RequestNoteUpdateManyWithoutUserNestedInput
    requestLogs?: RequestLogUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    profilePictureFile?: FileUpdateOneWithoutUserProfilesNestedInput
    requestData?: RequestDataUpdateManyWithoutCreatedByNestedInput
    requestDataHistory?: RequestDataHistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutCreatorNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    customerLogs?: CustomerLogUncheckedUpdateManyWithoutUserNestedInput
    appointmentNotes?: AppointmentNoteUncheckedUpdateManyWithoutUserNestedInput
    appointmentLogs?: AppointmentLogUncheckedUpdateManyWithoutUserNestedInput
    contactRequests?: ContactRequestUncheckedUpdateManyWithoutProcessorNestedInput
    requestNotes?: RequestNoteUncheckedUpdateManyWithoutUserNestedInput
    requestLogs?: RequestLogUncheckedUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    requestData?: RequestDataUncheckedUpdateManyWithoutCreatedByNestedInput
    requestDataHistory?: RequestDataHistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    name: string
    email: string
    password: string
    role?: string
    phone?: string | null
    status?: string
    profilePicture?: string | null
    profilePictureId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserSettingsCreateInput = {
    darkMode?: boolean
    emailNotifications?: boolean
    pushNotifications?: boolean
    language?: string
    notificationInterval?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSettingsInput
  }

  export type UserSettingsUncheckedCreateInput = {
    id?: number
    userId: number
    darkMode?: boolean
    emailNotifications?: boolean
    pushNotifications?: boolean
    language?: string
    notificationInterval?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSettingsUpdateInput = {
    darkMode?: BoolFieldUpdateOperationsInput | boolean
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    language?: StringFieldUpdateOperationsInput | string
    notificationInterval?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSettingsNestedInput
  }

  export type UserSettingsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    darkMode?: BoolFieldUpdateOperationsInput | boolean
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    language?: StringFieldUpdateOperationsInput | string
    notificationInterval?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSettingsCreateManyInput = {
    id?: number
    userId: number
    darkMode?: boolean
    emailNotifications?: boolean
    pushNotifications?: boolean
    language?: string
    notificationInterval?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSettingsUpdateManyMutationInput = {
    darkMode?: BoolFieldUpdateOperationsInput | boolean
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    language?: StringFieldUpdateOperationsInput | string
    notificationInterval?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSettingsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    darkMode?: BoolFieldUpdateOperationsInput | boolean
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    language?: StringFieldUpdateOperationsInput | string
    notificationInterval?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserActivityCreateInput = {
    timestamp?: Date | string | null
    activity: string
    details?: string | null
    ipAddress?: string | null
    user: UserCreateNestedOneWithoutActivitiesInput
  }

  export type UserActivityUncheckedCreateInput = {
    id?: number
    userId: number
    timestamp?: Date | string | null
    activity: string
    details?: string | null
    ipAddress?: string | null
  }

  export type UserActivityUpdateInput = {
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activity?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutActivitiesNestedInput
  }

  export type UserActivityUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activity?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserActivityCreateManyInput = {
    id?: number
    userId: number
    timestamp?: Date | string | null
    activity: string
    details?: string | null
    ipAddress?: string | null
  }

  export type UserActivityUpdateManyMutationInput = {
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activity?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserActivityUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activity?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserSessionCreateInput = {
    sid: string
    sess: JsonNullValueInput | InputJsonValue
    expire: Date | string
  }

  export type UserSessionUncheckedCreateInput = {
    sid: string
    sess: JsonNullValueInput | InputJsonValue
    expire: Date | string
  }

  export type UserSessionUpdateInput = {
    sid?: StringFieldUpdateOperationsInput | string
    sess?: JsonNullValueInput | InputJsonValue
    expire?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionUncheckedUpdateInput = {
    sid?: StringFieldUpdateOperationsInput | string
    sess?: JsonNullValueInput | InputJsonValue
    expire?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionCreateManyInput = {
    sid: string
    sess: JsonNullValueInput | InputJsonValue
    expire: Date | string
  }

  export type UserSessionUpdateManyMutationInput = {
    sid?: StringFieldUpdateOperationsInput | string
    sess?: JsonNullValueInput | InputJsonValue
    expire?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionUncheckedUpdateManyInput = {
    sid?: StringFieldUpdateOperationsInput | string
    sess?: JsonNullValueInput | InputJsonValue
    expire?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PermissionCreateInput = {
    code: string
    name: string
    description: string
    category: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    users?: UserPermissionCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUncheckedCreateInput = {
    id?: number
    code: string
    name: string
    description: string
    category: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    users?: UserPermissionUncheckedCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    users?: UserPermissionUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    users?: UserPermissionUncheckedUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionCreateManyInput = {
    id?: number
    code: string
    name: string
    description: string
    category: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
  }

  export type PermissionUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PermissionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserPermissionCreateInput = {
    grantedAt?: Date | string
    grantedBy?: number | null
    user: UserCreateNestedOneWithoutPermissionsInput
    permission: PermissionCreateNestedOneWithoutUsersInput
  }

  export type UserPermissionUncheckedCreateInput = {
    id?: number
    userId: number
    permissionId: number
    grantedAt?: Date | string
    grantedBy?: number | null
  }

  export type UserPermissionUpdateInput = {
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grantedBy?: NullableIntFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutPermissionsNestedInput
    permission?: PermissionUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserPermissionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    permissionId?: IntFieldUpdateOperationsInput | number
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grantedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserPermissionCreateManyInput = {
    id?: number
    userId: number
    permissionId: number
    grantedAt?: Date | string
    grantedBy?: number | null
  }

  export type UserPermissionUpdateManyMutationInput = {
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grantedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserPermissionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    permissionId?: IntFieldUpdateOperationsInput | number
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grantedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RefreshTokenCreateInput = {
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
    createdByIp?: string | null
    isRevoked?: boolean
    revokedAt?: Date | string | null
    revokedByIp?: string | null
    replacedByToken?: string | null
    user: UserCreateNestedOneWithoutRefreshTokensInput
  }

  export type RefreshTokenUncheckedCreateInput = {
    token: string
    userId: number
    expiresAt: Date | string
    createdAt?: Date | string
    createdByIp?: string | null
    isRevoked?: boolean
    revokedAt?: Date | string | null
    revokedByIp?: string | null
    replacedByToken?: string | null
  }

  export type RefreshTokenUpdateInput = {
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByIp?: NullableStringFieldUpdateOperationsInput | string | null
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revokedByIp?: NullableStringFieldUpdateOperationsInput | string | null
    replacedByToken?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutRefreshTokensNestedInput
  }

  export type RefreshTokenUncheckedUpdateInput = {
    token?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByIp?: NullableStringFieldUpdateOperationsInput | string | null
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revokedByIp?: NullableStringFieldUpdateOperationsInput | string | null
    replacedByToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RefreshTokenCreateManyInput = {
    token: string
    userId: number
    expiresAt: Date | string
    createdAt?: Date | string
    createdByIp?: string | null
    isRevoked?: boolean
    revokedAt?: Date | string | null
    revokedByIp?: string | null
    replacedByToken?: string | null
  }

  export type RefreshTokenUpdateManyMutationInput = {
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByIp?: NullableStringFieldUpdateOperationsInput | string | null
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revokedByIp?: NullableStringFieldUpdateOperationsInput | string | null
    replacedByToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RefreshTokenUncheckedUpdateManyInput = {
    token?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByIp?: NullableStringFieldUpdateOperationsInput | string | null
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revokedByIp?: NullableStringFieldUpdateOperationsInput | string | null
    replacedByToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SystemSettingsCreateInput = {
    key: string
    value: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SystemSettingsUncheckedCreateInput = {
    id?: number
    key: string
    value: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SystemSettingsUpdateInput = {
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemSettingsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemSettingsCreateManyInput = {
    id?: number
    key: string
    value: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SystemSettingsUpdateManyMutationInput = {
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemSettingsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerCreateInput = {
    name: string
    company?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    postalCode?: string | null
    city?: string | null
    country?: string
    vatNumber?: string | null
    notes?: string | null
    newsletter?: boolean
    status?: string
    type?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    appointments?: AppointmentCreateNestedManyWithoutCustomerInput
    logs?: CustomerLogCreateNestedManyWithoutCustomerInput
    contactRequests?: ContactRequestCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateInput = {
    id?: number
    name: string
    company?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    postalCode?: string | null
    city?: string | null
    country?: string
    vatNumber?: string | null
    notes?: string | null
    newsletter?: boolean
    status?: string
    type?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    appointments?: AppointmentUncheckedCreateNestedManyWithoutCustomerInput
    logs?: CustomerLogUncheckedCreateNestedManyWithoutCustomerInput
    contactRequests?: ContactRequestUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    appointments?: AppointmentUpdateManyWithoutCustomerNestedInput
    logs?: CustomerLogUpdateManyWithoutCustomerNestedInput
    contactRequests?: ContactRequestUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    appointments?: AppointmentUncheckedUpdateManyWithoutCustomerNestedInput
    logs?: CustomerLogUncheckedUpdateManyWithoutCustomerNestedInput
    contactRequests?: ContactRequestUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerCreateManyInput = {
    id?: number
    name: string
    company?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    postalCode?: string | null
    city?: string | null
    country?: string
    vatNumber?: string | null
    notes?: string | null
    newsletter?: boolean
    status?: string
    type?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
  }

  export type CustomerUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CustomerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CustomerLogCreateInput = {
    userName: string
    action: string
    details?: string | null
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutCustomerLogsInput
    customer: CustomerCreateNestedOneWithoutLogsInput
  }

  export type CustomerLogUncheckedCreateInput = {
    id?: number
    customerId: number
    userId?: number | null
    userName: string
    action: string
    details?: string | null
    createdAt?: Date | string
  }

  export type CustomerLogUpdateInput = {
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutCustomerLogsNestedInput
    customer?: CustomerUpdateOneRequiredWithoutLogsNestedInput
  }

  export type CustomerLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerId?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerLogCreateManyInput = {
    id?: number
    customerId: number
    userId?: number | null
    userName: string
    action: string
    details?: string | null
    createdAt?: Date | string
  }

  export type CustomerLogUpdateManyMutationInput = {
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerId?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentCreateInput = {
    title: string
    appointmentDate: Date | string
    duration?: number | null
    location?: string | null
    description?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    customer?: CustomerCreateNestedOneWithoutAppointmentsInput
    creator?: UserCreateNestedOneWithoutAppointmentsInput
    notes?: AppointmentNoteCreateNestedManyWithoutAppointmentInput
    logs?: AppointmentLogCreateNestedManyWithoutAppointmentInput
    contactRequests?: ContactRequestCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateInput = {
    id?: number
    title: string
    customerId?: number | null
    appointmentDate: Date | string
    duration?: number | null
    location?: string | null
    description?: string | null
    status?: string
    createdBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: AppointmentNoteUncheckedCreateNestedManyWithoutAppointmentInput
    logs?: AppointmentLogUncheckedCreateNestedManyWithoutAppointmentInput
    contactRequests?: ContactRequestUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneWithoutAppointmentsNestedInput
    creator?: UserUpdateOneWithoutAppointmentsNestedInput
    notes?: AppointmentNoteUpdateManyWithoutAppointmentNestedInput
    logs?: AppointmentLogUpdateManyWithoutAppointmentNestedInput
    contactRequests?: ContactRequestUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    customerId?: NullableIntFieldUpdateOperationsInput | number | null
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: AppointmentNoteUncheckedUpdateManyWithoutAppointmentNestedInput
    logs?: AppointmentLogUncheckedUpdateManyWithoutAppointmentNestedInput
    contactRequests?: ContactRequestUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentCreateManyInput = {
    id?: number
    title: string
    customerId?: number | null
    appointmentDate: Date | string
    duration?: number | null
    location?: string | null
    description?: string | null
    status?: string
    createdBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointmentUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    customerId?: NullableIntFieldUpdateOperationsInput | number | null
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentNoteCreateInput = {
    userName: string
    text: string
    createdAt?: Date | string
    appointment: AppointmentCreateNestedOneWithoutNotesInput
    user: UserCreateNestedOneWithoutAppointmentNotesInput
  }

  export type AppointmentNoteUncheckedCreateInput = {
    id?: number
    appointmentId: number
    userId: number
    userName: string
    text: string
    createdAt?: Date | string
  }

  export type AppointmentNoteUpdateInput = {
    userName?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointment?: AppointmentUpdateOneRequiredWithoutNotesNestedInput
    user?: UserUpdateOneRequiredWithoutAppointmentNotesNestedInput
  }

  export type AppointmentNoteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    appointmentId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentNoteCreateManyInput = {
    id?: number
    appointmentId: number
    userId: number
    userName: string
    text: string
    createdAt?: Date | string
  }

  export type AppointmentNoteUpdateManyMutationInput = {
    userName?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentNoteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    appointmentId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentLogCreateInput = {
    userName: string
    action: string
    details?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutAppointmentLogsInput
    appointment: AppointmentCreateNestedOneWithoutLogsInput
  }

  export type AppointmentLogUncheckedCreateInput = {
    id?: number
    appointmentId: number
    userId: number
    userName: string
    action: string
    details?: string | null
    createdAt?: Date | string
  }

  export type AppointmentLogUpdateInput = {
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAppointmentLogsNestedInput
    appointment?: AppointmentUpdateOneRequiredWithoutLogsNestedInput
  }

  export type AppointmentLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    appointmentId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentLogCreateManyInput = {
    id?: number
    appointmentId: number
    userId: number
    userName: string
    action: string
    details?: string | null
    createdAt?: Date | string
  }

  export type AppointmentLogUpdateManyMutationInput = {
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    appointmentId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactRequestCreateInput = {
    name: string
    email: string
    phone?: string | null
    service: string
    message: string
    status?: string
    ipAddress?: string | null
    source?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: RequestNoteCreateNestedManyWithoutRequestInput
    logs?: RequestLogCreateNestedManyWithoutRequestInput
    requestData?: RequestDataCreateNestedManyWithoutRequestInput
    customer?: CustomerCreateNestedOneWithoutContactRequestsInput
    appointment?: AppointmentCreateNestedOneWithoutContactRequestsInput
    processor?: UserCreateNestedOneWithoutContactRequestsInput
  }

  export type ContactRequestUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    phone?: string | null
    service: string
    message: string
    status?: string
    processorId?: number | null
    customerId?: number | null
    appointmentId?: number | null
    ipAddress?: string | null
    source?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: RequestNoteUncheckedCreateNestedManyWithoutRequestInput
    logs?: RequestLogUncheckedCreateNestedManyWithoutRequestInput
    requestData?: RequestDataUncheckedCreateNestedManyWithoutRequestInput
  }

  export type ContactRequestUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    service?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: RequestNoteUpdateManyWithoutRequestNestedInput
    logs?: RequestLogUpdateManyWithoutRequestNestedInput
    requestData?: RequestDataUpdateManyWithoutRequestNestedInput
    customer?: CustomerUpdateOneWithoutContactRequestsNestedInput
    appointment?: AppointmentUpdateOneWithoutContactRequestsNestedInput
    processor?: UserUpdateOneWithoutContactRequestsNestedInput
  }

  export type ContactRequestUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    service?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    processorId?: NullableIntFieldUpdateOperationsInput | number | null
    customerId?: NullableIntFieldUpdateOperationsInput | number | null
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: RequestNoteUncheckedUpdateManyWithoutRequestNestedInput
    logs?: RequestLogUncheckedUpdateManyWithoutRequestNestedInput
    requestData?: RequestDataUncheckedUpdateManyWithoutRequestNestedInput
  }

  export type ContactRequestCreateManyInput = {
    id?: number
    name: string
    email: string
    phone?: string | null
    service: string
    message: string
    status?: string
    processorId?: number | null
    customerId?: number | null
    appointmentId?: number | null
    ipAddress?: string | null
    source?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContactRequestUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    service?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactRequestUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    service?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    processorId?: NullableIntFieldUpdateOperationsInput | number | null
    customerId?: NullableIntFieldUpdateOperationsInput | number | null
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestNoteCreateInput = {
    userName: string
    text: string
    createdAt?: Date | string
    request: ContactRequestCreateNestedOneWithoutNotesInput
    user: UserCreateNestedOneWithoutRequestNotesInput
  }

  export type RequestNoteUncheckedCreateInput = {
    id?: number
    requestId: number
    userId: number
    userName: string
    text: string
    createdAt?: Date | string
  }

  export type RequestNoteUpdateInput = {
    userName?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    request?: ContactRequestUpdateOneRequiredWithoutNotesNestedInput
    user?: UserUpdateOneRequiredWithoutRequestNotesNestedInput
  }

  export type RequestNoteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestNoteCreateManyInput = {
    id?: number
    requestId: number
    userId: number
    userName: string
    text: string
    createdAt?: Date | string
  }

  export type RequestNoteUpdateManyMutationInput = {
    userName?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestNoteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestLogCreateInput = {
    userName: string
    action: string
    details?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutRequestLogsInput
    request: ContactRequestCreateNestedOneWithoutLogsInput
  }

  export type RequestLogUncheckedCreateInput = {
    id?: number
    requestId: number
    userId: number
    userName: string
    action: string
    details?: string | null
    createdAt?: Date | string
  }

  export type RequestLogUpdateInput = {
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRequestLogsNestedInput
    request?: ContactRequestUpdateOneRequiredWithoutLogsNestedInput
  }

  export type RequestLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestLogCreateManyInput = {
    id?: number
    requestId: number
    userId: number
    userName: string
    action: string
    details?: string | null
    createdAt?: Date | string
  }

  export type RequestLogUpdateManyMutationInput = {
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestDataCreateInput = {
    category: string
    label: string
    order?: number
    dataType: string
    data: JsonNullValueInput | InputJsonValue
    isValid?: boolean
    processedBy?: string | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    request: ContactRequestCreateNestedOneWithoutRequestDataInput
    createdBy?: UserCreateNestedOneWithoutRequestDataInput
    history?: RequestDataHistoryCreateNestedManyWithoutRequestDataInput
  }

  export type RequestDataUncheckedCreateInput = {
    id?: number
    requestId: number
    category: string
    label: string
    order?: number
    dataType: string
    data: JsonNullValueInput | InputJsonValue
    isValid?: boolean
    processedBy?: string | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: number | null
    history?: RequestDataHistoryUncheckedCreateNestedManyWithoutRequestDataInput
  }

  export type RequestDataUpdateInput = {
    category?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    dataType?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    isValid?: BoolFieldUpdateOperationsInput | boolean
    processedBy?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    request?: ContactRequestUpdateOneRequiredWithoutRequestDataNestedInput
    createdBy?: UserUpdateOneWithoutRequestDataNestedInput
    history?: RequestDataHistoryUpdateManyWithoutRequestDataNestedInput
  }

  export type RequestDataUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestId?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    dataType?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    isValid?: BoolFieldUpdateOperationsInput | boolean
    processedBy?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableIntFieldUpdateOperationsInput | number | null
    history?: RequestDataHistoryUncheckedUpdateManyWithoutRequestDataNestedInput
  }

  export type RequestDataCreateManyInput = {
    id?: number
    requestId: number
    category: string
    label: string
    order?: number
    dataType: string
    data: JsonNullValueInput | InputJsonValue
    isValid?: boolean
    processedBy?: string | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: number | null
  }

  export type RequestDataUpdateManyMutationInput = {
    category?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    dataType?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    isValid?: BoolFieldUpdateOperationsInput | boolean
    processedBy?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestDataUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestId?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    dataType?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    isValid?: BoolFieldUpdateOperationsInput | boolean
    processedBy?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RequestDataHistoryCreateInput = {
    data: JsonNullValueInput | InputJsonValue
    changedBy?: string | null
    changeReason?: string | null
    version: number
    createdAt?: Date | string
    requestData: RequestDataCreateNestedOneWithoutHistoryInput
    user?: UserCreateNestedOneWithoutRequestDataHistoryInput
  }

  export type RequestDataHistoryUncheckedCreateInput = {
    id?: number
    requestDataId: number
    data: JsonNullValueInput | InputJsonValue
    changedBy?: string | null
    changeReason?: string | null
    version: number
    createdAt?: Date | string
    userId?: number | null
  }

  export type RequestDataHistoryUpdateInput = {
    data?: JsonNullValueInput | InputJsonValue
    changedBy?: NullableStringFieldUpdateOperationsInput | string | null
    changeReason?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requestData?: RequestDataUpdateOneRequiredWithoutHistoryNestedInput
    user?: UserUpdateOneWithoutRequestDataHistoryNestedInput
  }

  export type RequestDataHistoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestDataId?: IntFieldUpdateOperationsInput | number
    data?: JsonNullValueInput | InputJsonValue
    changedBy?: NullableStringFieldUpdateOperationsInput | string | null
    changeReason?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RequestDataHistoryCreateManyInput = {
    id?: number
    requestDataId: number
    data: JsonNullValueInput | InputJsonValue
    changedBy?: string | null
    changeReason?: string | null
    version: number
    createdAt?: Date | string
    userId?: number | null
  }

  export type RequestDataHistoryUpdateManyMutationInput = {
    data?: JsonNullValueInput | InputJsonValue
    changedBy?: NullableStringFieldUpdateOperationsInput | string | null
    changeReason?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestDataHistoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestDataId?: IntFieldUpdateOperationsInput | number
    data?: JsonNullValueInput | InputJsonValue
    changedBy?: NullableStringFieldUpdateOperationsInput | string | null
    changeReason?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type N8NWebhookCreateInput = {
    name: string
    description?: string | null
    url: string
    workflowId?: string | null
    active?: boolean
    category: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type N8NWebhookUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    url: string
    workflowId?: string | null
    active?: boolean
    category: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type N8NWebhookUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    workflowId?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type N8NWebhookUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    workflowId?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type N8NWebhookCreateManyInput = {
    id?: number
    name: string
    description?: string | null
    url: string
    workflowId?: string | null
    active?: boolean
    category: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type N8NWebhookUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    workflowId?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type N8NWebhookUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    workflowId?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    userId?: number | null
    referenceId?: number | null
    referenceType?: string | null
    type: string
    title: string
    message?: string | null
    description?: string | null
    read?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
  }

  export type NotificationUncheckedCreateInput = {
    id?: number
    userId?: number | null
    referenceId?: number | null
    referenceType?: string | null
    type: string
    title: string
    message?: string | null
    description?: string | null
    read?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
  }

  export type NotificationUpdateInput = {
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    referenceId?: NullableIntFieldUpdateOperationsInput | number | null
    referenceType?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type NotificationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    referenceId?: NullableIntFieldUpdateOperationsInput | number | null
    referenceType?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type NotificationCreateManyInput = {
    id?: number
    userId?: number | null
    referenceId?: number | null
    referenceType?: string | null
    type: string
    title: string
    message?: string | null
    description?: string | null
    read?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
  }

  export type NotificationUpdateManyMutationInput = {
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    referenceId?: NullableIntFieldUpdateOperationsInput | number | null
    referenceType?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    referenceId?: NullableIntFieldUpdateOperationsInput | number | null
    referenceType?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FileCreateInput = {
    filename: string
    originalName: string
    mimeType: string
    path: string
    size: number
    type?: string
    uploadedAt?: Date | string
    uploadedBy?: number | null
    description?: string | null
    isDeleted?: boolean
    deletedAt?: Date | string | null
    userProfiles?: UserCreateNestedManyWithoutProfilePictureFileInput
  }

  export type FileUncheckedCreateInput = {
    id?: number
    filename: string
    originalName: string
    mimeType: string
    path: string
    size: number
    type?: string
    uploadedAt?: Date | string
    uploadedBy?: number | null
    description?: string | null
    isDeleted?: boolean
    deletedAt?: Date | string | null
    userProfiles?: UserUncheckedCreateNestedManyWithoutProfilePictureFileInput
  }

  export type FileUpdateInput = {
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedBy?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userProfiles?: UserUpdateManyWithoutProfilePictureFileNestedInput
  }

  export type FileUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedBy?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userProfiles?: UserUncheckedUpdateManyWithoutProfilePictureFileNestedInput
  }

  export type FileCreateManyInput = {
    id?: number
    filename: string
    originalName: string
    mimeType: string
    path: string
    size: number
    type?: string
    uploadedAt?: Date | string
    uploadedBy?: number | null
    description?: string | null
    isDeleted?: boolean
    deletedAt?: Date | string | null
  }

  export type FileUpdateManyMutationInput = {
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedBy?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FileUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedBy?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type UserSettingsNullableScalarRelationFilter = {
    is?: UserSettingsWhereInput | null
    isNot?: UserSettingsWhereInput | null
  }

  export type UserActivityListRelationFilter = {
    every?: UserActivityWhereInput
    some?: UserActivityWhereInput
    none?: UserActivityWhereInput
  }

  export type AppointmentListRelationFilter = {
    every?: AppointmentWhereInput
    some?: AppointmentWhereInput
    none?: AppointmentWhereInput
  }

  export type RefreshTokenListRelationFilter = {
    every?: RefreshTokenWhereInput
    some?: RefreshTokenWhereInput
    none?: RefreshTokenWhereInput
  }

  export type CustomerLogListRelationFilter = {
    every?: CustomerLogWhereInput
    some?: CustomerLogWhereInput
    none?: CustomerLogWhereInput
  }

  export type AppointmentNoteListRelationFilter = {
    every?: AppointmentNoteWhereInput
    some?: AppointmentNoteWhereInput
    none?: AppointmentNoteWhereInput
  }

  export type AppointmentLogListRelationFilter = {
    every?: AppointmentLogWhereInput
    some?: AppointmentLogWhereInput
    none?: AppointmentLogWhereInput
  }

  export type ContactRequestListRelationFilter = {
    every?: ContactRequestWhereInput
    some?: ContactRequestWhereInput
    none?: ContactRequestWhereInput
  }

  export type RequestNoteListRelationFilter = {
    every?: RequestNoteWhereInput
    some?: RequestNoteWhereInput
    none?: RequestNoteWhereInput
  }

  export type RequestLogListRelationFilter = {
    every?: RequestLogWhereInput
    some?: RequestLogWhereInput
    none?: RequestLogWhereInput
  }

  export type UserPermissionListRelationFilter = {
    every?: UserPermissionWhereInput
    some?: UserPermissionWhereInput
    none?: UserPermissionWhereInput
  }

  export type FileNullableScalarRelationFilter = {
    is?: FileWhereInput | null
    isNot?: FileWhereInput | null
  }

  export type RequestDataListRelationFilter = {
    every?: RequestDataWhereInput
    some?: RequestDataWhereInput
    none?: RequestDataWhereInput
  }

  export type RequestDataHistoryListRelationFilter = {
    every?: RequestDataHistoryWhereInput
    some?: RequestDataHistoryWhereInput
    none?: RequestDataHistoryWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserActivityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AppointmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RefreshTokenOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CustomerLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AppointmentNoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AppointmentLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContactRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RequestNoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RequestLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserPermissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RequestDataOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RequestDataHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    phone?: SortOrder
    status?: SortOrder
    profilePicture?: SortOrder
    profilePictureId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    lastLoginAt?: SortOrder
    resetToken?: SortOrder
    resetTokenExpiry?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    profilePictureId?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    phone?: SortOrder
    status?: SortOrder
    profilePicture?: SortOrder
    profilePictureId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    lastLoginAt?: SortOrder
    resetToken?: SortOrder
    resetTokenExpiry?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    phone?: SortOrder
    status?: SortOrder
    profilePicture?: SortOrder
    profilePictureId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    lastLoginAt?: SortOrder
    resetToken?: SortOrder
    resetTokenExpiry?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    profilePictureId?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type UserSettingsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    darkMode?: SortOrder
    emailNotifications?: SortOrder
    pushNotifications?: SortOrder
    language?: SortOrder
    notificationInterval?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSettingsAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type UserSettingsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    darkMode?: SortOrder
    emailNotifications?: SortOrder
    pushNotifications?: SortOrder
    language?: SortOrder
    notificationInterval?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSettingsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    darkMode?: SortOrder
    emailNotifications?: SortOrder
    pushNotifications?: SortOrder
    language?: SortOrder
    notificationInterval?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSettingsSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type UserActivityCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    timestamp?: SortOrder
    activity?: SortOrder
    details?: SortOrder
    ipAddress?: SortOrder
  }

  export type UserActivityAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type UserActivityMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    timestamp?: SortOrder
    activity?: SortOrder
    details?: SortOrder
    ipAddress?: SortOrder
  }

  export type UserActivityMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    timestamp?: SortOrder
    activity?: SortOrder
    details?: SortOrder
    ipAddress?: SortOrder
  }

  export type UserActivitySumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UserSessionCountOrderByAggregateInput = {
    sid?: SortOrder
    sess?: SortOrder
    expire?: SortOrder
  }

  export type UserSessionMaxOrderByAggregateInput = {
    sid?: SortOrder
    expire?: SortOrder
  }

  export type UserSessionMinOrderByAggregateInput = {
    sid?: SortOrder
    expire?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type PermissionCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type PermissionAvgOrderByAggregateInput = {
    id?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type PermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type PermissionMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type PermissionSumOrderByAggregateInput = {
    id?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type PermissionScalarRelationFilter = {
    is?: PermissionWhereInput
    isNot?: PermissionWhereInput
  }

  export type UserPermissionUserIdPermissionIdCompoundUniqueInput = {
    userId: number
    permissionId: number
  }

  export type UserPermissionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    permissionId?: SortOrder
    grantedAt?: SortOrder
    grantedBy?: SortOrder
  }

  export type UserPermissionAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    permissionId?: SortOrder
    grantedBy?: SortOrder
  }

  export type UserPermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    permissionId?: SortOrder
    grantedAt?: SortOrder
    grantedBy?: SortOrder
  }

  export type UserPermissionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    permissionId?: SortOrder
    grantedAt?: SortOrder
    grantedBy?: SortOrder
  }

  export type UserPermissionSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    permissionId?: SortOrder
    grantedBy?: SortOrder
  }

  export type RefreshTokenCountOrderByAggregateInput = {
    token?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    createdByIp?: SortOrder
    isRevoked?: SortOrder
    revokedAt?: SortOrder
    revokedByIp?: SortOrder
    replacedByToken?: SortOrder
  }

  export type RefreshTokenAvgOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type RefreshTokenMaxOrderByAggregateInput = {
    token?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    createdByIp?: SortOrder
    isRevoked?: SortOrder
    revokedAt?: SortOrder
    revokedByIp?: SortOrder
    replacedByToken?: SortOrder
  }

  export type RefreshTokenMinOrderByAggregateInput = {
    token?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    createdByIp?: SortOrder
    isRevoked?: SortOrder
    revokedAt?: SortOrder
    revokedByIp?: SortOrder
    replacedByToken?: SortOrder
  }

  export type RefreshTokenSumOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type SystemSettingsCountOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemSettingsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SystemSettingsMaxOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemSettingsMinOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemSettingsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CustomerCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    company?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    postalCode?: SortOrder
    city?: SortOrder
    country?: SortOrder
    vatNumber?: SortOrder
    notes?: SortOrder
    newsletter?: SortOrder
    status?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type CustomerAvgOrderByAggregateInput = {
    id?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type CustomerMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    company?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    postalCode?: SortOrder
    city?: SortOrder
    country?: SortOrder
    vatNumber?: SortOrder
    notes?: SortOrder
    newsletter?: SortOrder
    status?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type CustomerMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    company?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    postalCode?: SortOrder
    city?: SortOrder
    country?: SortOrder
    vatNumber?: SortOrder
    notes?: SortOrder
    newsletter?: SortOrder
    status?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type CustomerSumOrderByAggregateInput = {
    id?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type CustomerScalarRelationFilter = {
    is?: CustomerWhereInput
    isNot?: CustomerWhereInput
  }

  export type CustomerLogCountOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    action?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
  }

  export type CustomerLogAvgOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    userId?: SortOrder
  }

  export type CustomerLogMaxOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    action?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
  }

  export type CustomerLogMinOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    action?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
  }

  export type CustomerLogSumOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    userId?: SortOrder
  }

  export type CustomerNullableScalarRelationFilter = {
    is?: CustomerWhereInput | null
    isNot?: CustomerWhereInput | null
  }

  export type AppointmentCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    customerId?: SortOrder
    appointmentDate?: SortOrder
    duration?: SortOrder
    location?: SortOrder
    description?: SortOrder
    status?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppointmentAvgOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    duration?: SortOrder
    createdBy?: SortOrder
  }

  export type AppointmentMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    customerId?: SortOrder
    appointmentDate?: SortOrder
    duration?: SortOrder
    location?: SortOrder
    description?: SortOrder
    status?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppointmentMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    customerId?: SortOrder
    appointmentDate?: SortOrder
    duration?: SortOrder
    location?: SortOrder
    description?: SortOrder
    status?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppointmentSumOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    duration?: SortOrder
    createdBy?: SortOrder
  }

  export type AppointmentScalarRelationFilter = {
    is?: AppointmentWhereInput
    isNot?: AppointmentWhereInput
  }

  export type AppointmentNoteCountOrderByAggregateInput = {
    id?: SortOrder
    appointmentId?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
  }

  export type AppointmentNoteAvgOrderByAggregateInput = {
    id?: SortOrder
    appointmentId?: SortOrder
    userId?: SortOrder
  }

  export type AppointmentNoteMaxOrderByAggregateInput = {
    id?: SortOrder
    appointmentId?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
  }

  export type AppointmentNoteMinOrderByAggregateInput = {
    id?: SortOrder
    appointmentId?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
  }

  export type AppointmentNoteSumOrderByAggregateInput = {
    id?: SortOrder
    appointmentId?: SortOrder
    userId?: SortOrder
  }

  export type AppointmentLogCountOrderByAggregateInput = {
    id?: SortOrder
    appointmentId?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    action?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
  }

  export type AppointmentLogAvgOrderByAggregateInput = {
    id?: SortOrder
    appointmentId?: SortOrder
    userId?: SortOrder
  }

  export type AppointmentLogMaxOrderByAggregateInput = {
    id?: SortOrder
    appointmentId?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    action?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
  }

  export type AppointmentLogMinOrderByAggregateInput = {
    id?: SortOrder
    appointmentId?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    action?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
  }

  export type AppointmentLogSumOrderByAggregateInput = {
    id?: SortOrder
    appointmentId?: SortOrder
    userId?: SortOrder
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type AppointmentNullableScalarRelationFilter = {
    is?: AppointmentWhereInput | null
    isNot?: AppointmentWhereInput | null
  }

  export type ContactRequestCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    service?: SortOrder
    message?: SortOrder
    status?: SortOrder
    processorId?: SortOrder
    customerId?: SortOrder
    appointmentId?: SortOrder
    ipAddress?: SortOrder
    source?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContactRequestAvgOrderByAggregateInput = {
    id?: SortOrder
    processorId?: SortOrder
    customerId?: SortOrder
    appointmentId?: SortOrder
  }

  export type ContactRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    service?: SortOrder
    message?: SortOrder
    status?: SortOrder
    processorId?: SortOrder
    customerId?: SortOrder
    appointmentId?: SortOrder
    ipAddress?: SortOrder
    source?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContactRequestMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    service?: SortOrder
    message?: SortOrder
    status?: SortOrder
    processorId?: SortOrder
    customerId?: SortOrder
    appointmentId?: SortOrder
    ipAddress?: SortOrder
    source?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContactRequestSumOrderByAggregateInput = {
    id?: SortOrder
    processorId?: SortOrder
    customerId?: SortOrder
    appointmentId?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type ContactRequestScalarRelationFilter = {
    is?: ContactRequestWhereInput
    isNot?: ContactRequestWhereInput
  }

  export type RequestNoteCountOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
  }

  export type RequestNoteAvgOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    userId?: SortOrder
  }

  export type RequestNoteMaxOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
  }

  export type RequestNoteMinOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
  }

  export type RequestNoteSumOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    userId?: SortOrder
  }

  export type RequestLogCountOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    action?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
  }

  export type RequestLogAvgOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    userId?: SortOrder
  }

  export type RequestLogMaxOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    action?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
  }

  export type RequestLogMinOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    action?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
  }

  export type RequestLogSumOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    userId?: SortOrder
  }

  export type RequestDataCountOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    category?: SortOrder
    label?: SortOrder
    order?: SortOrder
    dataType?: SortOrder
    data?: SortOrder
    isValid?: SortOrder
    processedBy?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
  }

  export type RequestDataAvgOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    order?: SortOrder
    version?: SortOrder
    createdById?: SortOrder
  }

  export type RequestDataMaxOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    category?: SortOrder
    label?: SortOrder
    order?: SortOrder
    dataType?: SortOrder
    isValid?: SortOrder
    processedBy?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
  }

  export type RequestDataMinOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    category?: SortOrder
    label?: SortOrder
    order?: SortOrder
    dataType?: SortOrder
    isValid?: SortOrder
    processedBy?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
  }

  export type RequestDataSumOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    order?: SortOrder
    version?: SortOrder
    createdById?: SortOrder
  }

  export type RequestDataScalarRelationFilter = {
    is?: RequestDataWhereInput
    isNot?: RequestDataWhereInput
  }

  export type RequestDataHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    requestDataId?: SortOrder
    data?: SortOrder
    changedBy?: SortOrder
    changeReason?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type RequestDataHistoryAvgOrderByAggregateInput = {
    id?: SortOrder
    requestDataId?: SortOrder
    version?: SortOrder
    userId?: SortOrder
  }

  export type RequestDataHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    requestDataId?: SortOrder
    changedBy?: SortOrder
    changeReason?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type RequestDataHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    requestDataId?: SortOrder
    changedBy?: SortOrder
    changeReason?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type RequestDataHistorySumOrderByAggregateInput = {
    id?: SortOrder
    requestDataId?: SortOrder
    version?: SortOrder
    userId?: SortOrder
  }

  export type N8NWebhookCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    url?: SortOrder
    workflowId?: SortOrder
    active?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type N8NWebhookAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type N8NWebhookMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    url?: SortOrder
    workflowId?: SortOrder
    active?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type N8NWebhookMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    url?: SortOrder
    workflowId?: SortOrder
    active?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type N8NWebhookSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    referenceId?: SortOrder
    referenceType?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    description?: SortOrder
    read?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type NotificationAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    referenceId?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    referenceId?: SortOrder
    referenceType?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    description?: SortOrder
    read?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    referenceId?: SortOrder
    referenceType?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    description?: SortOrder
    read?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type NotificationSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    referenceId?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FileCountOrderByAggregateInput = {
    id?: SortOrder
    filename?: SortOrder
    originalName?: SortOrder
    mimeType?: SortOrder
    path?: SortOrder
    size?: SortOrder
    type?: SortOrder
    uploadedAt?: SortOrder
    uploadedBy?: SortOrder
    description?: SortOrder
    isDeleted?: SortOrder
    deletedAt?: SortOrder
  }

  export type FileAvgOrderByAggregateInput = {
    id?: SortOrder
    size?: SortOrder
    uploadedBy?: SortOrder
  }

  export type FileMaxOrderByAggregateInput = {
    id?: SortOrder
    filename?: SortOrder
    originalName?: SortOrder
    mimeType?: SortOrder
    path?: SortOrder
    size?: SortOrder
    type?: SortOrder
    uploadedAt?: SortOrder
    uploadedBy?: SortOrder
    description?: SortOrder
    isDeleted?: SortOrder
    deletedAt?: SortOrder
  }

  export type FileMinOrderByAggregateInput = {
    id?: SortOrder
    filename?: SortOrder
    originalName?: SortOrder
    mimeType?: SortOrder
    path?: SortOrder
    size?: SortOrder
    type?: SortOrder
    uploadedAt?: SortOrder
    uploadedBy?: SortOrder
    description?: SortOrder
    isDeleted?: SortOrder
    deletedAt?: SortOrder
  }

  export type FileSumOrderByAggregateInput = {
    id?: SortOrder
    size?: SortOrder
    uploadedBy?: SortOrder
  }

  export type UserSettingsCreateNestedOneWithoutUserInput = {
    create?: XOR<UserSettingsCreateWithoutUserInput, UserSettingsUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserSettingsCreateOrConnectWithoutUserInput
    connect?: UserSettingsWhereUniqueInput
  }

  export type UserActivityCreateNestedManyWithoutUserInput = {
    create?: XOR<UserActivityCreateWithoutUserInput, UserActivityUncheckedCreateWithoutUserInput> | UserActivityCreateWithoutUserInput[] | UserActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserActivityCreateOrConnectWithoutUserInput | UserActivityCreateOrConnectWithoutUserInput[]
    createMany?: UserActivityCreateManyUserInputEnvelope
    connect?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
  }

  export type AppointmentCreateNestedManyWithoutCreatorInput = {
    create?: XOR<AppointmentCreateWithoutCreatorInput, AppointmentUncheckedCreateWithoutCreatorInput> | AppointmentCreateWithoutCreatorInput[] | AppointmentUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutCreatorInput | AppointmentCreateOrConnectWithoutCreatorInput[]
    createMany?: AppointmentCreateManyCreatorInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type RefreshTokenCreateNestedManyWithoutUserInput = {
    create?: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput> | RefreshTokenCreateWithoutUserInput[] | RefreshTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RefreshTokenCreateOrConnectWithoutUserInput | RefreshTokenCreateOrConnectWithoutUserInput[]
    createMany?: RefreshTokenCreateManyUserInputEnvelope
    connect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
  }

  export type CustomerLogCreateNestedManyWithoutUserInput = {
    create?: XOR<CustomerLogCreateWithoutUserInput, CustomerLogUncheckedCreateWithoutUserInput> | CustomerLogCreateWithoutUserInput[] | CustomerLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CustomerLogCreateOrConnectWithoutUserInput | CustomerLogCreateOrConnectWithoutUserInput[]
    createMany?: CustomerLogCreateManyUserInputEnvelope
    connect?: CustomerLogWhereUniqueInput | CustomerLogWhereUniqueInput[]
  }

  export type AppointmentNoteCreateNestedManyWithoutUserInput = {
    create?: XOR<AppointmentNoteCreateWithoutUserInput, AppointmentNoteUncheckedCreateWithoutUserInput> | AppointmentNoteCreateWithoutUserInput[] | AppointmentNoteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AppointmentNoteCreateOrConnectWithoutUserInput | AppointmentNoteCreateOrConnectWithoutUserInput[]
    createMany?: AppointmentNoteCreateManyUserInputEnvelope
    connect?: AppointmentNoteWhereUniqueInput | AppointmentNoteWhereUniqueInput[]
  }

  export type AppointmentLogCreateNestedManyWithoutUserInput = {
    create?: XOR<AppointmentLogCreateWithoutUserInput, AppointmentLogUncheckedCreateWithoutUserInput> | AppointmentLogCreateWithoutUserInput[] | AppointmentLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AppointmentLogCreateOrConnectWithoutUserInput | AppointmentLogCreateOrConnectWithoutUserInput[]
    createMany?: AppointmentLogCreateManyUserInputEnvelope
    connect?: AppointmentLogWhereUniqueInput | AppointmentLogWhereUniqueInput[]
  }

  export type ContactRequestCreateNestedManyWithoutProcessorInput = {
    create?: XOR<ContactRequestCreateWithoutProcessorInput, ContactRequestUncheckedCreateWithoutProcessorInput> | ContactRequestCreateWithoutProcessorInput[] | ContactRequestUncheckedCreateWithoutProcessorInput[]
    connectOrCreate?: ContactRequestCreateOrConnectWithoutProcessorInput | ContactRequestCreateOrConnectWithoutProcessorInput[]
    createMany?: ContactRequestCreateManyProcessorInputEnvelope
    connect?: ContactRequestWhereUniqueInput | ContactRequestWhereUniqueInput[]
  }

  export type RequestNoteCreateNestedManyWithoutUserInput = {
    create?: XOR<RequestNoteCreateWithoutUserInput, RequestNoteUncheckedCreateWithoutUserInput> | RequestNoteCreateWithoutUserInput[] | RequestNoteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RequestNoteCreateOrConnectWithoutUserInput | RequestNoteCreateOrConnectWithoutUserInput[]
    createMany?: RequestNoteCreateManyUserInputEnvelope
    connect?: RequestNoteWhereUniqueInput | RequestNoteWhereUniqueInput[]
  }

  export type RequestLogCreateNestedManyWithoutUserInput = {
    create?: XOR<RequestLogCreateWithoutUserInput, RequestLogUncheckedCreateWithoutUserInput> | RequestLogCreateWithoutUserInput[] | RequestLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RequestLogCreateOrConnectWithoutUserInput | RequestLogCreateOrConnectWithoutUserInput[]
    createMany?: RequestLogCreateManyUserInputEnvelope
    connect?: RequestLogWhereUniqueInput | RequestLogWhereUniqueInput[]
  }

  export type UserPermissionCreateNestedManyWithoutUserInput = {
    create?: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput> | UserPermissionCreateWithoutUserInput[] | UserPermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutUserInput | UserPermissionCreateOrConnectWithoutUserInput[]
    createMany?: UserPermissionCreateManyUserInputEnvelope
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
  }

  export type FileCreateNestedOneWithoutUserProfilesInput = {
    create?: XOR<FileCreateWithoutUserProfilesInput, FileUncheckedCreateWithoutUserProfilesInput>
    connectOrCreate?: FileCreateOrConnectWithoutUserProfilesInput
    connect?: FileWhereUniqueInput
  }

  export type RequestDataCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<RequestDataCreateWithoutCreatedByInput, RequestDataUncheckedCreateWithoutCreatedByInput> | RequestDataCreateWithoutCreatedByInput[] | RequestDataUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: RequestDataCreateOrConnectWithoutCreatedByInput | RequestDataCreateOrConnectWithoutCreatedByInput[]
    createMany?: RequestDataCreateManyCreatedByInputEnvelope
    connect?: RequestDataWhereUniqueInput | RequestDataWhereUniqueInput[]
  }

  export type RequestDataHistoryCreateNestedManyWithoutUserInput = {
    create?: XOR<RequestDataHistoryCreateWithoutUserInput, RequestDataHistoryUncheckedCreateWithoutUserInput> | RequestDataHistoryCreateWithoutUserInput[] | RequestDataHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RequestDataHistoryCreateOrConnectWithoutUserInput | RequestDataHistoryCreateOrConnectWithoutUserInput[]
    createMany?: RequestDataHistoryCreateManyUserInputEnvelope
    connect?: RequestDataHistoryWhereUniqueInput | RequestDataHistoryWhereUniqueInput[]
  }

  export type UserSettingsUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<UserSettingsCreateWithoutUserInput, UserSettingsUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserSettingsCreateOrConnectWithoutUserInput
    connect?: UserSettingsWhereUniqueInput
  }

  export type UserActivityUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserActivityCreateWithoutUserInput, UserActivityUncheckedCreateWithoutUserInput> | UserActivityCreateWithoutUserInput[] | UserActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserActivityCreateOrConnectWithoutUserInput | UserActivityCreateOrConnectWithoutUserInput[]
    createMany?: UserActivityCreateManyUserInputEnvelope
    connect?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<AppointmentCreateWithoutCreatorInput, AppointmentUncheckedCreateWithoutCreatorInput> | AppointmentCreateWithoutCreatorInput[] | AppointmentUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutCreatorInput | AppointmentCreateOrConnectWithoutCreatorInput[]
    createMany?: AppointmentCreateManyCreatorInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type RefreshTokenUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput> | RefreshTokenCreateWithoutUserInput[] | RefreshTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RefreshTokenCreateOrConnectWithoutUserInput | RefreshTokenCreateOrConnectWithoutUserInput[]
    createMany?: RefreshTokenCreateManyUserInputEnvelope
    connect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
  }

  export type CustomerLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CustomerLogCreateWithoutUserInput, CustomerLogUncheckedCreateWithoutUserInput> | CustomerLogCreateWithoutUserInput[] | CustomerLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CustomerLogCreateOrConnectWithoutUserInput | CustomerLogCreateOrConnectWithoutUserInput[]
    createMany?: CustomerLogCreateManyUserInputEnvelope
    connect?: CustomerLogWhereUniqueInput | CustomerLogWhereUniqueInput[]
  }

  export type AppointmentNoteUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AppointmentNoteCreateWithoutUserInput, AppointmentNoteUncheckedCreateWithoutUserInput> | AppointmentNoteCreateWithoutUserInput[] | AppointmentNoteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AppointmentNoteCreateOrConnectWithoutUserInput | AppointmentNoteCreateOrConnectWithoutUserInput[]
    createMany?: AppointmentNoteCreateManyUserInputEnvelope
    connect?: AppointmentNoteWhereUniqueInput | AppointmentNoteWhereUniqueInput[]
  }

  export type AppointmentLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AppointmentLogCreateWithoutUserInput, AppointmentLogUncheckedCreateWithoutUserInput> | AppointmentLogCreateWithoutUserInput[] | AppointmentLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AppointmentLogCreateOrConnectWithoutUserInput | AppointmentLogCreateOrConnectWithoutUserInput[]
    createMany?: AppointmentLogCreateManyUserInputEnvelope
    connect?: AppointmentLogWhereUniqueInput | AppointmentLogWhereUniqueInput[]
  }

  export type ContactRequestUncheckedCreateNestedManyWithoutProcessorInput = {
    create?: XOR<ContactRequestCreateWithoutProcessorInput, ContactRequestUncheckedCreateWithoutProcessorInput> | ContactRequestCreateWithoutProcessorInput[] | ContactRequestUncheckedCreateWithoutProcessorInput[]
    connectOrCreate?: ContactRequestCreateOrConnectWithoutProcessorInput | ContactRequestCreateOrConnectWithoutProcessorInput[]
    createMany?: ContactRequestCreateManyProcessorInputEnvelope
    connect?: ContactRequestWhereUniqueInput | ContactRequestWhereUniqueInput[]
  }

  export type RequestNoteUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RequestNoteCreateWithoutUserInput, RequestNoteUncheckedCreateWithoutUserInput> | RequestNoteCreateWithoutUserInput[] | RequestNoteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RequestNoteCreateOrConnectWithoutUserInput | RequestNoteCreateOrConnectWithoutUserInput[]
    createMany?: RequestNoteCreateManyUserInputEnvelope
    connect?: RequestNoteWhereUniqueInput | RequestNoteWhereUniqueInput[]
  }

  export type RequestLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RequestLogCreateWithoutUserInput, RequestLogUncheckedCreateWithoutUserInput> | RequestLogCreateWithoutUserInput[] | RequestLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RequestLogCreateOrConnectWithoutUserInput | RequestLogCreateOrConnectWithoutUserInput[]
    createMany?: RequestLogCreateManyUserInputEnvelope
    connect?: RequestLogWhereUniqueInput | RequestLogWhereUniqueInput[]
  }

  export type UserPermissionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput> | UserPermissionCreateWithoutUserInput[] | UserPermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutUserInput | UserPermissionCreateOrConnectWithoutUserInput[]
    createMany?: UserPermissionCreateManyUserInputEnvelope
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
  }

  export type RequestDataUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<RequestDataCreateWithoutCreatedByInput, RequestDataUncheckedCreateWithoutCreatedByInput> | RequestDataCreateWithoutCreatedByInput[] | RequestDataUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: RequestDataCreateOrConnectWithoutCreatedByInput | RequestDataCreateOrConnectWithoutCreatedByInput[]
    createMany?: RequestDataCreateManyCreatedByInputEnvelope
    connect?: RequestDataWhereUniqueInput | RequestDataWhereUniqueInput[]
  }

  export type RequestDataHistoryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RequestDataHistoryCreateWithoutUserInput, RequestDataHistoryUncheckedCreateWithoutUserInput> | RequestDataHistoryCreateWithoutUserInput[] | RequestDataHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RequestDataHistoryCreateOrConnectWithoutUserInput | RequestDataHistoryCreateOrConnectWithoutUserInput[]
    createMany?: RequestDataHistoryCreateManyUserInputEnvelope
    connect?: RequestDataHistoryWhereUniqueInput | RequestDataHistoryWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserSettingsUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserSettingsCreateWithoutUserInput, UserSettingsUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserSettingsCreateOrConnectWithoutUserInput
    upsert?: UserSettingsUpsertWithoutUserInput
    disconnect?: UserSettingsWhereInput | boolean
    delete?: UserSettingsWhereInput | boolean
    connect?: UserSettingsWhereUniqueInput
    update?: XOR<XOR<UserSettingsUpdateToOneWithWhereWithoutUserInput, UserSettingsUpdateWithoutUserInput>, UserSettingsUncheckedUpdateWithoutUserInput>
  }

  export type UserActivityUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserActivityCreateWithoutUserInput, UserActivityUncheckedCreateWithoutUserInput> | UserActivityCreateWithoutUserInput[] | UserActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserActivityCreateOrConnectWithoutUserInput | UserActivityCreateOrConnectWithoutUserInput[]
    upsert?: UserActivityUpsertWithWhereUniqueWithoutUserInput | UserActivityUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserActivityCreateManyUserInputEnvelope
    set?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
    disconnect?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
    delete?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
    connect?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
    update?: UserActivityUpdateWithWhereUniqueWithoutUserInput | UserActivityUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserActivityUpdateManyWithWhereWithoutUserInput | UserActivityUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserActivityScalarWhereInput | UserActivityScalarWhereInput[]
  }

  export type AppointmentUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<AppointmentCreateWithoutCreatorInput, AppointmentUncheckedCreateWithoutCreatorInput> | AppointmentCreateWithoutCreatorInput[] | AppointmentUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutCreatorInput | AppointmentCreateOrConnectWithoutCreatorInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutCreatorInput | AppointmentUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: AppointmentCreateManyCreatorInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutCreatorInput | AppointmentUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutCreatorInput | AppointmentUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type RefreshTokenUpdateManyWithoutUserNestedInput = {
    create?: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput> | RefreshTokenCreateWithoutUserInput[] | RefreshTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RefreshTokenCreateOrConnectWithoutUserInput | RefreshTokenCreateOrConnectWithoutUserInput[]
    upsert?: RefreshTokenUpsertWithWhereUniqueWithoutUserInput | RefreshTokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RefreshTokenCreateManyUserInputEnvelope
    set?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    disconnect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    delete?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    connect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    update?: RefreshTokenUpdateWithWhereUniqueWithoutUserInput | RefreshTokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RefreshTokenUpdateManyWithWhereWithoutUserInput | RefreshTokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RefreshTokenScalarWhereInput | RefreshTokenScalarWhereInput[]
  }

  export type CustomerLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<CustomerLogCreateWithoutUserInput, CustomerLogUncheckedCreateWithoutUserInput> | CustomerLogCreateWithoutUserInput[] | CustomerLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CustomerLogCreateOrConnectWithoutUserInput | CustomerLogCreateOrConnectWithoutUserInput[]
    upsert?: CustomerLogUpsertWithWhereUniqueWithoutUserInput | CustomerLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CustomerLogCreateManyUserInputEnvelope
    set?: CustomerLogWhereUniqueInput | CustomerLogWhereUniqueInput[]
    disconnect?: CustomerLogWhereUniqueInput | CustomerLogWhereUniqueInput[]
    delete?: CustomerLogWhereUniqueInput | CustomerLogWhereUniqueInput[]
    connect?: CustomerLogWhereUniqueInput | CustomerLogWhereUniqueInput[]
    update?: CustomerLogUpdateWithWhereUniqueWithoutUserInput | CustomerLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CustomerLogUpdateManyWithWhereWithoutUserInput | CustomerLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CustomerLogScalarWhereInput | CustomerLogScalarWhereInput[]
  }

  export type AppointmentNoteUpdateManyWithoutUserNestedInput = {
    create?: XOR<AppointmentNoteCreateWithoutUserInput, AppointmentNoteUncheckedCreateWithoutUserInput> | AppointmentNoteCreateWithoutUserInput[] | AppointmentNoteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AppointmentNoteCreateOrConnectWithoutUserInput | AppointmentNoteCreateOrConnectWithoutUserInput[]
    upsert?: AppointmentNoteUpsertWithWhereUniqueWithoutUserInput | AppointmentNoteUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AppointmentNoteCreateManyUserInputEnvelope
    set?: AppointmentNoteWhereUniqueInput | AppointmentNoteWhereUniqueInput[]
    disconnect?: AppointmentNoteWhereUniqueInput | AppointmentNoteWhereUniqueInput[]
    delete?: AppointmentNoteWhereUniqueInput | AppointmentNoteWhereUniqueInput[]
    connect?: AppointmentNoteWhereUniqueInput | AppointmentNoteWhereUniqueInput[]
    update?: AppointmentNoteUpdateWithWhereUniqueWithoutUserInput | AppointmentNoteUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AppointmentNoteUpdateManyWithWhereWithoutUserInput | AppointmentNoteUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AppointmentNoteScalarWhereInput | AppointmentNoteScalarWhereInput[]
  }

  export type AppointmentLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<AppointmentLogCreateWithoutUserInput, AppointmentLogUncheckedCreateWithoutUserInput> | AppointmentLogCreateWithoutUserInput[] | AppointmentLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AppointmentLogCreateOrConnectWithoutUserInput | AppointmentLogCreateOrConnectWithoutUserInput[]
    upsert?: AppointmentLogUpsertWithWhereUniqueWithoutUserInput | AppointmentLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AppointmentLogCreateManyUserInputEnvelope
    set?: AppointmentLogWhereUniqueInput | AppointmentLogWhereUniqueInput[]
    disconnect?: AppointmentLogWhereUniqueInput | AppointmentLogWhereUniqueInput[]
    delete?: AppointmentLogWhereUniqueInput | AppointmentLogWhereUniqueInput[]
    connect?: AppointmentLogWhereUniqueInput | AppointmentLogWhereUniqueInput[]
    update?: AppointmentLogUpdateWithWhereUniqueWithoutUserInput | AppointmentLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AppointmentLogUpdateManyWithWhereWithoutUserInput | AppointmentLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AppointmentLogScalarWhereInput | AppointmentLogScalarWhereInput[]
  }

  export type ContactRequestUpdateManyWithoutProcessorNestedInput = {
    create?: XOR<ContactRequestCreateWithoutProcessorInput, ContactRequestUncheckedCreateWithoutProcessorInput> | ContactRequestCreateWithoutProcessorInput[] | ContactRequestUncheckedCreateWithoutProcessorInput[]
    connectOrCreate?: ContactRequestCreateOrConnectWithoutProcessorInput | ContactRequestCreateOrConnectWithoutProcessorInput[]
    upsert?: ContactRequestUpsertWithWhereUniqueWithoutProcessorInput | ContactRequestUpsertWithWhereUniqueWithoutProcessorInput[]
    createMany?: ContactRequestCreateManyProcessorInputEnvelope
    set?: ContactRequestWhereUniqueInput | ContactRequestWhereUniqueInput[]
    disconnect?: ContactRequestWhereUniqueInput | ContactRequestWhereUniqueInput[]
    delete?: ContactRequestWhereUniqueInput | ContactRequestWhereUniqueInput[]
    connect?: ContactRequestWhereUniqueInput | ContactRequestWhereUniqueInput[]
    update?: ContactRequestUpdateWithWhereUniqueWithoutProcessorInput | ContactRequestUpdateWithWhereUniqueWithoutProcessorInput[]
    updateMany?: ContactRequestUpdateManyWithWhereWithoutProcessorInput | ContactRequestUpdateManyWithWhereWithoutProcessorInput[]
    deleteMany?: ContactRequestScalarWhereInput | ContactRequestScalarWhereInput[]
  }

  export type RequestNoteUpdateManyWithoutUserNestedInput = {
    create?: XOR<RequestNoteCreateWithoutUserInput, RequestNoteUncheckedCreateWithoutUserInput> | RequestNoteCreateWithoutUserInput[] | RequestNoteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RequestNoteCreateOrConnectWithoutUserInput | RequestNoteCreateOrConnectWithoutUserInput[]
    upsert?: RequestNoteUpsertWithWhereUniqueWithoutUserInput | RequestNoteUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RequestNoteCreateManyUserInputEnvelope
    set?: RequestNoteWhereUniqueInput | RequestNoteWhereUniqueInput[]
    disconnect?: RequestNoteWhereUniqueInput | RequestNoteWhereUniqueInput[]
    delete?: RequestNoteWhereUniqueInput | RequestNoteWhereUniqueInput[]
    connect?: RequestNoteWhereUniqueInput | RequestNoteWhereUniqueInput[]
    update?: RequestNoteUpdateWithWhereUniqueWithoutUserInput | RequestNoteUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RequestNoteUpdateManyWithWhereWithoutUserInput | RequestNoteUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RequestNoteScalarWhereInput | RequestNoteScalarWhereInput[]
  }

  export type RequestLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<RequestLogCreateWithoutUserInput, RequestLogUncheckedCreateWithoutUserInput> | RequestLogCreateWithoutUserInput[] | RequestLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RequestLogCreateOrConnectWithoutUserInput | RequestLogCreateOrConnectWithoutUserInput[]
    upsert?: RequestLogUpsertWithWhereUniqueWithoutUserInput | RequestLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RequestLogCreateManyUserInputEnvelope
    set?: RequestLogWhereUniqueInput | RequestLogWhereUniqueInput[]
    disconnect?: RequestLogWhereUniqueInput | RequestLogWhereUniqueInput[]
    delete?: RequestLogWhereUniqueInput | RequestLogWhereUniqueInput[]
    connect?: RequestLogWhereUniqueInput | RequestLogWhereUniqueInput[]
    update?: RequestLogUpdateWithWhereUniqueWithoutUserInput | RequestLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RequestLogUpdateManyWithWhereWithoutUserInput | RequestLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RequestLogScalarWhereInput | RequestLogScalarWhereInput[]
  }

  export type UserPermissionUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput> | UserPermissionCreateWithoutUserInput[] | UserPermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutUserInput | UserPermissionCreateOrConnectWithoutUserInput[]
    upsert?: UserPermissionUpsertWithWhereUniqueWithoutUserInput | UserPermissionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserPermissionCreateManyUserInputEnvelope
    set?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    disconnect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    delete?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    update?: UserPermissionUpdateWithWhereUniqueWithoutUserInput | UserPermissionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserPermissionUpdateManyWithWhereWithoutUserInput | UserPermissionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
  }

  export type FileUpdateOneWithoutUserProfilesNestedInput = {
    create?: XOR<FileCreateWithoutUserProfilesInput, FileUncheckedCreateWithoutUserProfilesInput>
    connectOrCreate?: FileCreateOrConnectWithoutUserProfilesInput
    upsert?: FileUpsertWithoutUserProfilesInput
    disconnect?: FileWhereInput | boolean
    delete?: FileWhereInput | boolean
    connect?: FileWhereUniqueInput
    update?: XOR<XOR<FileUpdateToOneWithWhereWithoutUserProfilesInput, FileUpdateWithoutUserProfilesInput>, FileUncheckedUpdateWithoutUserProfilesInput>
  }

  export type RequestDataUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<RequestDataCreateWithoutCreatedByInput, RequestDataUncheckedCreateWithoutCreatedByInput> | RequestDataCreateWithoutCreatedByInput[] | RequestDataUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: RequestDataCreateOrConnectWithoutCreatedByInput | RequestDataCreateOrConnectWithoutCreatedByInput[]
    upsert?: RequestDataUpsertWithWhereUniqueWithoutCreatedByInput | RequestDataUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: RequestDataCreateManyCreatedByInputEnvelope
    set?: RequestDataWhereUniqueInput | RequestDataWhereUniqueInput[]
    disconnect?: RequestDataWhereUniqueInput | RequestDataWhereUniqueInput[]
    delete?: RequestDataWhereUniqueInput | RequestDataWhereUniqueInput[]
    connect?: RequestDataWhereUniqueInput | RequestDataWhereUniqueInput[]
    update?: RequestDataUpdateWithWhereUniqueWithoutCreatedByInput | RequestDataUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: RequestDataUpdateManyWithWhereWithoutCreatedByInput | RequestDataUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: RequestDataScalarWhereInput | RequestDataScalarWhereInput[]
  }

  export type RequestDataHistoryUpdateManyWithoutUserNestedInput = {
    create?: XOR<RequestDataHistoryCreateWithoutUserInput, RequestDataHistoryUncheckedCreateWithoutUserInput> | RequestDataHistoryCreateWithoutUserInput[] | RequestDataHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RequestDataHistoryCreateOrConnectWithoutUserInput | RequestDataHistoryCreateOrConnectWithoutUserInput[]
    upsert?: RequestDataHistoryUpsertWithWhereUniqueWithoutUserInput | RequestDataHistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RequestDataHistoryCreateManyUserInputEnvelope
    set?: RequestDataHistoryWhereUniqueInput | RequestDataHistoryWhereUniqueInput[]
    disconnect?: RequestDataHistoryWhereUniqueInput | RequestDataHistoryWhereUniqueInput[]
    delete?: RequestDataHistoryWhereUniqueInput | RequestDataHistoryWhereUniqueInput[]
    connect?: RequestDataHistoryWhereUniqueInput | RequestDataHistoryWhereUniqueInput[]
    update?: RequestDataHistoryUpdateWithWhereUniqueWithoutUserInput | RequestDataHistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RequestDataHistoryUpdateManyWithWhereWithoutUserInput | RequestDataHistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RequestDataHistoryScalarWhereInput | RequestDataHistoryScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserSettingsUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserSettingsCreateWithoutUserInput, UserSettingsUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserSettingsCreateOrConnectWithoutUserInput
    upsert?: UserSettingsUpsertWithoutUserInput
    disconnect?: UserSettingsWhereInput | boolean
    delete?: UserSettingsWhereInput | boolean
    connect?: UserSettingsWhereUniqueInput
    update?: XOR<XOR<UserSettingsUpdateToOneWithWhereWithoutUserInput, UserSettingsUpdateWithoutUserInput>, UserSettingsUncheckedUpdateWithoutUserInput>
  }

  export type UserActivityUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserActivityCreateWithoutUserInput, UserActivityUncheckedCreateWithoutUserInput> | UserActivityCreateWithoutUserInput[] | UserActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserActivityCreateOrConnectWithoutUserInput | UserActivityCreateOrConnectWithoutUserInput[]
    upsert?: UserActivityUpsertWithWhereUniqueWithoutUserInput | UserActivityUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserActivityCreateManyUserInputEnvelope
    set?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
    disconnect?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
    delete?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
    connect?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
    update?: UserActivityUpdateWithWhereUniqueWithoutUserInput | UserActivityUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserActivityUpdateManyWithWhereWithoutUserInput | UserActivityUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserActivityScalarWhereInput | UserActivityScalarWhereInput[]
  }

  export type AppointmentUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<AppointmentCreateWithoutCreatorInput, AppointmentUncheckedCreateWithoutCreatorInput> | AppointmentCreateWithoutCreatorInput[] | AppointmentUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutCreatorInput | AppointmentCreateOrConnectWithoutCreatorInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutCreatorInput | AppointmentUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: AppointmentCreateManyCreatorInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutCreatorInput | AppointmentUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutCreatorInput | AppointmentUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type RefreshTokenUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput> | RefreshTokenCreateWithoutUserInput[] | RefreshTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RefreshTokenCreateOrConnectWithoutUserInput | RefreshTokenCreateOrConnectWithoutUserInput[]
    upsert?: RefreshTokenUpsertWithWhereUniqueWithoutUserInput | RefreshTokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RefreshTokenCreateManyUserInputEnvelope
    set?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    disconnect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    delete?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    connect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    update?: RefreshTokenUpdateWithWhereUniqueWithoutUserInput | RefreshTokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RefreshTokenUpdateManyWithWhereWithoutUserInput | RefreshTokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RefreshTokenScalarWhereInput | RefreshTokenScalarWhereInput[]
  }

  export type CustomerLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CustomerLogCreateWithoutUserInput, CustomerLogUncheckedCreateWithoutUserInput> | CustomerLogCreateWithoutUserInput[] | CustomerLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CustomerLogCreateOrConnectWithoutUserInput | CustomerLogCreateOrConnectWithoutUserInput[]
    upsert?: CustomerLogUpsertWithWhereUniqueWithoutUserInput | CustomerLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CustomerLogCreateManyUserInputEnvelope
    set?: CustomerLogWhereUniqueInput | CustomerLogWhereUniqueInput[]
    disconnect?: CustomerLogWhereUniqueInput | CustomerLogWhereUniqueInput[]
    delete?: CustomerLogWhereUniqueInput | CustomerLogWhereUniqueInput[]
    connect?: CustomerLogWhereUniqueInput | CustomerLogWhereUniqueInput[]
    update?: CustomerLogUpdateWithWhereUniqueWithoutUserInput | CustomerLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CustomerLogUpdateManyWithWhereWithoutUserInput | CustomerLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CustomerLogScalarWhereInput | CustomerLogScalarWhereInput[]
  }

  export type AppointmentNoteUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AppointmentNoteCreateWithoutUserInput, AppointmentNoteUncheckedCreateWithoutUserInput> | AppointmentNoteCreateWithoutUserInput[] | AppointmentNoteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AppointmentNoteCreateOrConnectWithoutUserInput | AppointmentNoteCreateOrConnectWithoutUserInput[]
    upsert?: AppointmentNoteUpsertWithWhereUniqueWithoutUserInput | AppointmentNoteUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AppointmentNoteCreateManyUserInputEnvelope
    set?: AppointmentNoteWhereUniqueInput | AppointmentNoteWhereUniqueInput[]
    disconnect?: AppointmentNoteWhereUniqueInput | AppointmentNoteWhereUniqueInput[]
    delete?: AppointmentNoteWhereUniqueInput | AppointmentNoteWhereUniqueInput[]
    connect?: AppointmentNoteWhereUniqueInput | AppointmentNoteWhereUniqueInput[]
    update?: AppointmentNoteUpdateWithWhereUniqueWithoutUserInput | AppointmentNoteUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AppointmentNoteUpdateManyWithWhereWithoutUserInput | AppointmentNoteUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AppointmentNoteScalarWhereInput | AppointmentNoteScalarWhereInput[]
  }

  export type AppointmentLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AppointmentLogCreateWithoutUserInput, AppointmentLogUncheckedCreateWithoutUserInput> | AppointmentLogCreateWithoutUserInput[] | AppointmentLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AppointmentLogCreateOrConnectWithoutUserInput | AppointmentLogCreateOrConnectWithoutUserInput[]
    upsert?: AppointmentLogUpsertWithWhereUniqueWithoutUserInput | AppointmentLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AppointmentLogCreateManyUserInputEnvelope
    set?: AppointmentLogWhereUniqueInput | AppointmentLogWhereUniqueInput[]
    disconnect?: AppointmentLogWhereUniqueInput | AppointmentLogWhereUniqueInput[]
    delete?: AppointmentLogWhereUniqueInput | AppointmentLogWhereUniqueInput[]
    connect?: AppointmentLogWhereUniqueInput | AppointmentLogWhereUniqueInput[]
    update?: AppointmentLogUpdateWithWhereUniqueWithoutUserInput | AppointmentLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AppointmentLogUpdateManyWithWhereWithoutUserInput | AppointmentLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AppointmentLogScalarWhereInput | AppointmentLogScalarWhereInput[]
  }

  export type ContactRequestUncheckedUpdateManyWithoutProcessorNestedInput = {
    create?: XOR<ContactRequestCreateWithoutProcessorInput, ContactRequestUncheckedCreateWithoutProcessorInput> | ContactRequestCreateWithoutProcessorInput[] | ContactRequestUncheckedCreateWithoutProcessorInput[]
    connectOrCreate?: ContactRequestCreateOrConnectWithoutProcessorInput | ContactRequestCreateOrConnectWithoutProcessorInput[]
    upsert?: ContactRequestUpsertWithWhereUniqueWithoutProcessorInput | ContactRequestUpsertWithWhereUniqueWithoutProcessorInput[]
    createMany?: ContactRequestCreateManyProcessorInputEnvelope
    set?: ContactRequestWhereUniqueInput | ContactRequestWhereUniqueInput[]
    disconnect?: ContactRequestWhereUniqueInput | ContactRequestWhereUniqueInput[]
    delete?: ContactRequestWhereUniqueInput | ContactRequestWhereUniqueInput[]
    connect?: ContactRequestWhereUniqueInput | ContactRequestWhereUniqueInput[]
    update?: ContactRequestUpdateWithWhereUniqueWithoutProcessorInput | ContactRequestUpdateWithWhereUniqueWithoutProcessorInput[]
    updateMany?: ContactRequestUpdateManyWithWhereWithoutProcessorInput | ContactRequestUpdateManyWithWhereWithoutProcessorInput[]
    deleteMany?: ContactRequestScalarWhereInput | ContactRequestScalarWhereInput[]
  }

  export type RequestNoteUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RequestNoteCreateWithoutUserInput, RequestNoteUncheckedCreateWithoutUserInput> | RequestNoteCreateWithoutUserInput[] | RequestNoteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RequestNoteCreateOrConnectWithoutUserInput | RequestNoteCreateOrConnectWithoutUserInput[]
    upsert?: RequestNoteUpsertWithWhereUniqueWithoutUserInput | RequestNoteUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RequestNoteCreateManyUserInputEnvelope
    set?: RequestNoteWhereUniqueInput | RequestNoteWhereUniqueInput[]
    disconnect?: RequestNoteWhereUniqueInput | RequestNoteWhereUniqueInput[]
    delete?: RequestNoteWhereUniqueInput | RequestNoteWhereUniqueInput[]
    connect?: RequestNoteWhereUniqueInput | RequestNoteWhereUniqueInput[]
    update?: RequestNoteUpdateWithWhereUniqueWithoutUserInput | RequestNoteUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RequestNoteUpdateManyWithWhereWithoutUserInput | RequestNoteUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RequestNoteScalarWhereInput | RequestNoteScalarWhereInput[]
  }

  export type RequestLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RequestLogCreateWithoutUserInput, RequestLogUncheckedCreateWithoutUserInput> | RequestLogCreateWithoutUserInput[] | RequestLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RequestLogCreateOrConnectWithoutUserInput | RequestLogCreateOrConnectWithoutUserInput[]
    upsert?: RequestLogUpsertWithWhereUniqueWithoutUserInput | RequestLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RequestLogCreateManyUserInputEnvelope
    set?: RequestLogWhereUniqueInput | RequestLogWhereUniqueInput[]
    disconnect?: RequestLogWhereUniqueInput | RequestLogWhereUniqueInput[]
    delete?: RequestLogWhereUniqueInput | RequestLogWhereUniqueInput[]
    connect?: RequestLogWhereUniqueInput | RequestLogWhereUniqueInput[]
    update?: RequestLogUpdateWithWhereUniqueWithoutUserInput | RequestLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RequestLogUpdateManyWithWhereWithoutUserInput | RequestLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RequestLogScalarWhereInput | RequestLogScalarWhereInput[]
  }

  export type UserPermissionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput> | UserPermissionCreateWithoutUserInput[] | UserPermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutUserInput | UserPermissionCreateOrConnectWithoutUserInput[]
    upsert?: UserPermissionUpsertWithWhereUniqueWithoutUserInput | UserPermissionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserPermissionCreateManyUserInputEnvelope
    set?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    disconnect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    delete?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    update?: UserPermissionUpdateWithWhereUniqueWithoutUserInput | UserPermissionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserPermissionUpdateManyWithWhereWithoutUserInput | UserPermissionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
  }

  export type RequestDataUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<RequestDataCreateWithoutCreatedByInput, RequestDataUncheckedCreateWithoutCreatedByInput> | RequestDataCreateWithoutCreatedByInput[] | RequestDataUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: RequestDataCreateOrConnectWithoutCreatedByInput | RequestDataCreateOrConnectWithoutCreatedByInput[]
    upsert?: RequestDataUpsertWithWhereUniqueWithoutCreatedByInput | RequestDataUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: RequestDataCreateManyCreatedByInputEnvelope
    set?: RequestDataWhereUniqueInput | RequestDataWhereUniqueInput[]
    disconnect?: RequestDataWhereUniqueInput | RequestDataWhereUniqueInput[]
    delete?: RequestDataWhereUniqueInput | RequestDataWhereUniqueInput[]
    connect?: RequestDataWhereUniqueInput | RequestDataWhereUniqueInput[]
    update?: RequestDataUpdateWithWhereUniqueWithoutCreatedByInput | RequestDataUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: RequestDataUpdateManyWithWhereWithoutCreatedByInput | RequestDataUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: RequestDataScalarWhereInput | RequestDataScalarWhereInput[]
  }

  export type RequestDataHistoryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RequestDataHistoryCreateWithoutUserInput, RequestDataHistoryUncheckedCreateWithoutUserInput> | RequestDataHistoryCreateWithoutUserInput[] | RequestDataHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RequestDataHistoryCreateOrConnectWithoutUserInput | RequestDataHistoryCreateOrConnectWithoutUserInput[]
    upsert?: RequestDataHistoryUpsertWithWhereUniqueWithoutUserInput | RequestDataHistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RequestDataHistoryCreateManyUserInputEnvelope
    set?: RequestDataHistoryWhereUniqueInput | RequestDataHistoryWhereUniqueInput[]
    disconnect?: RequestDataHistoryWhereUniqueInput | RequestDataHistoryWhereUniqueInput[]
    delete?: RequestDataHistoryWhereUniqueInput | RequestDataHistoryWhereUniqueInput[]
    connect?: RequestDataHistoryWhereUniqueInput | RequestDataHistoryWhereUniqueInput[]
    update?: RequestDataHistoryUpdateWithWhereUniqueWithoutUserInput | RequestDataHistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RequestDataHistoryUpdateManyWithWhereWithoutUserInput | RequestDataHistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RequestDataHistoryScalarWhereInput | RequestDataHistoryScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSettingsInput = {
    create?: XOR<UserCreateWithoutSettingsInput, UserUncheckedCreateWithoutSettingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSettingsInput
    connect?: UserWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutSettingsNestedInput = {
    create?: XOR<UserCreateWithoutSettingsInput, UserUncheckedCreateWithoutSettingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSettingsInput
    upsert?: UserUpsertWithoutSettingsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSettingsInput, UserUpdateWithoutSettingsInput>, UserUncheckedUpdateWithoutSettingsInput>
  }

  export type UserCreateNestedOneWithoutActivitiesInput = {
    create?: XOR<UserCreateWithoutActivitiesInput, UserUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivitiesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutActivitiesNestedInput = {
    create?: XOR<UserCreateWithoutActivitiesInput, UserUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivitiesInput
    upsert?: UserUpsertWithoutActivitiesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutActivitiesInput, UserUpdateWithoutActivitiesInput>, UserUncheckedUpdateWithoutActivitiesInput>
  }

  export type UserPermissionCreateNestedManyWithoutPermissionInput = {
    create?: XOR<UserPermissionCreateWithoutPermissionInput, UserPermissionUncheckedCreateWithoutPermissionInput> | UserPermissionCreateWithoutPermissionInput[] | UserPermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutPermissionInput | UserPermissionCreateOrConnectWithoutPermissionInput[]
    createMany?: UserPermissionCreateManyPermissionInputEnvelope
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
  }

  export type UserPermissionUncheckedCreateNestedManyWithoutPermissionInput = {
    create?: XOR<UserPermissionCreateWithoutPermissionInput, UserPermissionUncheckedCreateWithoutPermissionInput> | UserPermissionCreateWithoutPermissionInput[] | UserPermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutPermissionInput | UserPermissionCreateOrConnectWithoutPermissionInput[]
    createMany?: UserPermissionCreateManyPermissionInputEnvelope
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
  }

  export type UserPermissionUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<UserPermissionCreateWithoutPermissionInput, UserPermissionUncheckedCreateWithoutPermissionInput> | UserPermissionCreateWithoutPermissionInput[] | UserPermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutPermissionInput | UserPermissionCreateOrConnectWithoutPermissionInput[]
    upsert?: UserPermissionUpsertWithWhereUniqueWithoutPermissionInput | UserPermissionUpsertWithWhereUniqueWithoutPermissionInput[]
    createMany?: UserPermissionCreateManyPermissionInputEnvelope
    set?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    disconnect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    delete?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    update?: UserPermissionUpdateWithWhereUniqueWithoutPermissionInput | UserPermissionUpdateWithWhereUniqueWithoutPermissionInput[]
    updateMany?: UserPermissionUpdateManyWithWhereWithoutPermissionInput | UserPermissionUpdateManyWithWhereWithoutPermissionInput[]
    deleteMany?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
  }

  export type UserPermissionUncheckedUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<UserPermissionCreateWithoutPermissionInput, UserPermissionUncheckedCreateWithoutPermissionInput> | UserPermissionCreateWithoutPermissionInput[] | UserPermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutPermissionInput | UserPermissionCreateOrConnectWithoutPermissionInput[]
    upsert?: UserPermissionUpsertWithWhereUniqueWithoutPermissionInput | UserPermissionUpsertWithWhereUniqueWithoutPermissionInput[]
    createMany?: UserPermissionCreateManyPermissionInputEnvelope
    set?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    disconnect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    delete?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    update?: UserPermissionUpdateWithWhereUniqueWithoutPermissionInput | UserPermissionUpdateWithWhereUniqueWithoutPermissionInput[]
    updateMany?: UserPermissionUpdateManyWithWhereWithoutPermissionInput | UserPermissionUpdateManyWithWhereWithoutPermissionInput[]
    deleteMany?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutPermissionsInput = {
    create?: XOR<UserCreateWithoutPermissionsInput, UserUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPermissionsInput
    connect?: UserWhereUniqueInput
  }

  export type PermissionCreateNestedOneWithoutUsersInput = {
    create?: XOR<PermissionCreateWithoutUsersInput, PermissionUncheckedCreateWithoutUsersInput>
    connectOrCreate?: PermissionCreateOrConnectWithoutUsersInput
    connect?: PermissionWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPermissionsNestedInput = {
    create?: XOR<UserCreateWithoutPermissionsInput, UserUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPermissionsInput
    upsert?: UserUpsertWithoutPermissionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPermissionsInput, UserUpdateWithoutPermissionsInput>, UserUncheckedUpdateWithoutPermissionsInput>
  }

  export type PermissionUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<PermissionCreateWithoutUsersInput, PermissionUncheckedCreateWithoutUsersInput>
    connectOrCreate?: PermissionCreateOrConnectWithoutUsersInput
    upsert?: PermissionUpsertWithoutUsersInput
    connect?: PermissionWhereUniqueInput
    update?: XOR<XOR<PermissionUpdateToOneWithWhereWithoutUsersInput, PermissionUpdateWithoutUsersInput>, PermissionUncheckedUpdateWithoutUsersInput>
  }

  export type UserCreateNestedOneWithoutRefreshTokensInput = {
    create?: XOR<UserCreateWithoutRefreshTokensInput, UserUncheckedCreateWithoutRefreshTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutRefreshTokensInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutRefreshTokensNestedInput = {
    create?: XOR<UserCreateWithoutRefreshTokensInput, UserUncheckedCreateWithoutRefreshTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutRefreshTokensInput
    upsert?: UserUpsertWithoutRefreshTokensInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRefreshTokensInput, UserUpdateWithoutRefreshTokensInput>, UserUncheckedUpdateWithoutRefreshTokensInput>
  }

  export type AppointmentCreateNestedManyWithoutCustomerInput = {
    create?: XOR<AppointmentCreateWithoutCustomerInput, AppointmentUncheckedCreateWithoutCustomerInput> | AppointmentCreateWithoutCustomerInput[] | AppointmentUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutCustomerInput | AppointmentCreateOrConnectWithoutCustomerInput[]
    createMany?: AppointmentCreateManyCustomerInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type CustomerLogCreateNestedManyWithoutCustomerInput = {
    create?: XOR<CustomerLogCreateWithoutCustomerInput, CustomerLogUncheckedCreateWithoutCustomerInput> | CustomerLogCreateWithoutCustomerInput[] | CustomerLogUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CustomerLogCreateOrConnectWithoutCustomerInput | CustomerLogCreateOrConnectWithoutCustomerInput[]
    createMany?: CustomerLogCreateManyCustomerInputEnvelope
    connect?: CustomerLogWhereUniqueInput | CustomerLogWhereUniqueInput[]
  }

  export type ContactRequestCreateNestedManyWithoutCustomerInput = {
    create?: XOR<ContactRequestCreateWithoutCustomerInput, ContactRequestUncheckedCreateWithoutCustomerInput> | ContactRequestCreateWithoutCustomerInput[] | ContactRequestUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: ContactRequestCreateOrConnectWithoutCustomerInput | ContactRequestCreateOrConnectWithoutCustomerInput[]
    createMany?: ContactRequestCreateManyCustomerInputEnvelope
    connect?: ContactRequestWhereUniqueInput | ContactRequestWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<AppointmentCreateWithoutCustomerInput, AppointmentUncheckedCreateWithoutCustomerInput> | AppointmentCreateWithoutCustomerInput[] | AppointmentUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutCustomerInput | AppointmentCreateOrConnectWithoutCustomerInput[]
    createMany?: AppointmentCreateManyCustomerInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type CustomerLogUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<CustomerLogCreateWithoutCustomerInput, CustomerLogUncheckedCreateWithoutCustomerInput> | CustomerLogCreateWithoutCustomerInput[] | CustomerLogUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CustomerLogCreateOrConnectWithoutCustomerInput | CustomerLogCreateOrConnectWithoutCustomerInput[]
    createMany?: CustomerLogCreateManyCustomerInputEnvelope
    connect?: CustomerLogWhereUniqueInput | CustomerLogWhereUniqueInput[]
  }

  export type ContactRequestUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<ContactRequestCreateWithoutCustomerInput, ContactRequestUncheckedCreateWithoutCustomerInput> | ContactRequestCreateWithoutCustomerInput[] | ContactRequestUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: ContactRequestCreateOrConnectWithoutCustomerInput | ContactRequestCreateOrConnectWithoutCustomerInput[]
    createMany?: ContactRequestCreateManyCustomerInputEnvelope
    connect?: ContactRequestWhereUniqueInput | ContactRequestWhereUniqueInput[]
  }

  export type AppointmentUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<AppointmentCreateWithoutCustomerInput, AppointmentUncheckedCreateWithoutCustomerInput> | AppointmentCreateWithoutCustomerInput[] | AppointmentUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutCustomerInput | AppointmentCreateOrConnectWithoutCustomerInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutCustomerInput | AppointmentUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: AppointmentCreateManyCustomerInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutCustomerInput | AppointmentUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutCustomerInput | AppointmentUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type CustomerLogUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<CustomerLogCreateWithoutCustomerInput, CustomerLogUncheckedCreateWithoutCustomerInput> | CustomerLogCreateWithoutCustomerInput[] | CustomerLogUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CustomerLogCreateOrConnectWithoutCustomerInput | CustomerLogCreateOrConnectWithoutCustomerInput[]
    upsert?: CustomerLogUpsertWithWhereUniqueWithoutCustomerInput | CustomerLogUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: CustomerLogCreateManyCustomerInputEnvelope
    set?: CustomerLogWhereUniqueInput | CustomerLogWhereUniqueInput[]
    disconnect?: CustomerLogWhereUniqueInput | CustomerLogWhereUniqueInput[]
    delete?: CustomerLogWhereUniqueInput | CustomerLogWhereUniqueInput[]
    connect?: CustomerLogWhereUniqueInput | CustomerLogWhereUniqueInput[]
    update?: CustomerLogUpdateWithWhereUniqueWithoutCustomerInput | CustomerLogUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: CustomerLogUpdateManyWithWhereWithoutCustomerInput | CustomerLogUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: CustomerLogScalarWhereInput | CustomerLogScalarWhereInput[]
  }

  export type ContactRequestUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<ContactRequestCreateWithoutCustomerInput, ContactRequestUncheckedCreateWithoutCustomerInput> | ContactRequestCreateWithoutCustomerInput[] | ContactRequestUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: ContactRequestCreateOrConnectWithoutCustomerInput | ContactRequestCreateOrConnectWithoutCustomerInput[]
    upsert?: ContactRequestUpsertWithWhereUniqueWithoutCustomerInput | ContactRequestUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: ContactRequestCreateManyCustomerInputEnvelope
    set?: ContactRequestWhereUniqueInput | ContactRequestWhereUniqueInput[]
    disconnect?: ContactRequestWhereUniqueInput | ContactRequestWhereUniqueInput[]
    delete?: ContactRequestWhereUniqueInput | ContactRequestWhereUniqueInput[]
    connect?: ContactRequestWhereUniqueInput | ContactRequestWhereUniqueInput[]
    update?: ContactRequestUpdateWithWhereUniqueWithoutCustomerInput | ContactRequestUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: ContactRequestUpdateManyWithWhereWithoutCustomerInput | ContactRequestUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: ContactRequestScalarWhereInput | ContactRequestScalarWhereInput[]
  }

  export type AppointmentUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<AppointmentCreateWithoutCustomerInput, AppointmentUncheckedCreateWithoutCustomerInput> | AppointmentCreateWithoutCustomerInput[] | AppointmentUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutCustomerInput | AppointmentCreateOrConnectWithoutCustomerInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutCustomerInput | AppointmentUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: AppointmentCreateManyCustomerInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutCustomerInput | AppointmentUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutCustomerInput | AppointmentUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type CustomerLogUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<CustomerLogCreateWithoutCustomerInput, CustomerLogUncheckedCreateWithoutCustomerInput> | CustomerLogCreateWithoutCustomerInput[] | CustomerLogUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CustomerLogCreateOrConnectWithoutCustomerInput | CustomerLogCreateOrConnectWithoutCustomerInput[]
    upsert?: CustomerLogUpsertWithWhereUniqueWithoutCustomerInput | CustomerLogUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: CustomerLogCreateManyCustomerInputEnvelope
    set?: CustomerLogWhereUniqueInput | CustomerLogWhereUniqueInput[]
    disconnect?: CustomerLogWhereUniqueInput | CustomerLogWhereUniqueInput[]
    delete?: CustomerLogWhereUniqueInput | CustomerLogWhereUniqueInput[]
    connect?: CustomerLogWhereUniqueInput | CustomerLogWhereUniqueInput[]
    update?: CustomerLogUpdateWithWhereUniqueWithoutCustomerInput | CustomerLogUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: CustomerLogUpdateManyWithWhereWithoutCustomerInput | CustomerLogUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: CustomerLogScalarWhereInput | CustomerLogScalarWhereInput[]
  }

  export type ContactRequestUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<ContactRequestCreateWithoutCustomerInput, ContactRequestUncheckedCreateWithoutCustomerInput> | ContactRequestCreateWithoutCustomerInput[] | ContactRequestUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: ContactRequestCreateOrConnectWithoutCustomerInput | ContactRequestCreateOrConnectWithoutCustomerInput[]
    upsert?: ContactRequestUpsertWithWhereUniqueWithoutCustomerInput | ContactRequestUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: ContactRequestCreateManyCustomerInputEnvelope
    set?: ContactRequestWhereUniqueInput | ContactRequestWhereUniqueInput[]
    disconnect?: ContactRequestWhereUniqueInput | ContactRequestWhereUniqueInput[]
    delete?: ContactRequestWhereUniqueInput | ContactRequestWhereUniqueInput[]
    connect?: ContactRequestWhereUniqueInput | ContactRequestWhereUniqueInput[]
    update?: ContactRequestUpdateWithWhereUniqueWithoutCustomerInput | ContactRequestUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: ContactRequestUpdateManyWithWhereWithoutCustomerInput | ContactRequestUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: ContactRequestScalarWhereInput | ContactRequestScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCustomerLogsInput = {
    create?: XOR<UserCreateWithoutCustomerLogsInput, UserUncheckedCreateWithoutCustomerLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCustomerLogsInput
    connect?: UserWhereUniqueInput
  }

  export type CustomerCreateNestedOneWithoutLogsInput = {
    create?: XOR<CustomerCreateWithoutLogsInput, CustomerUncheckedCreateWithoutLogsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutLogsInput
    connect?: CustomerWhereUniqueInput
  }

  export type UserUpdateOneWithoutCustomerLogsNestedInput = {
    create?: XOR<UserCreateWithoutCustomerLogsInput, UserUncheckedCreateWithoutCustomerLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCustomerLogsInput
    upsert?: UserUpsertWithoutCustomerLogsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCustomerLogsInput, UserUpdateWithoutCustomerLogsInput>, UserUncheckedUpdateWithoutCustomerLogsInput>
  }

  export type CustomerUpdateOneRequiredWithoutLogsNestedInput = {
    create?: XOR<CustomerCreateWithoutLogsInput, CustomerUncheckedCreateWithoutLogsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutLogsInput
    upsert?: CustomerUpsertWithoutLogsInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutLogsInput, CustomerUpdateWithoutLogsInput>, CustomerUncheckedUpdateWithoutLogsInput>
  }

  export type CustomerCreateNestedOneWithoutAppointmentsInput = {
    create?: XOR<CustomerCreateWithoutAppointmentsInput, CustomerUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutAppointmentsInput
    connect?: CustomerWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAppointmentsInput = {
    create?: XOR<UserCreateWithoutAppointmentsInput, UserUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAppointmentsInput
    connect?: UserWhereUniqueInput
  }

  export type AppointmentNoteCreateNestedManyWithoutAppointmentInput = {
    create?: XOR<AppointmentNoteCreateWithoutAppointmentInput, AppointmentNoteUncheckedCreateWithoutAppointmentInput> | AppointmentNoteCreateWithoutAppointmentInput[] | AppointmentNoteUncheckedCreateWithoutAppointmentInput[]
    connectOrCreate?: AppointmentNoteCreateOrConnectWithoutAppointmentInput | AppointmentNoteCreateOrConnectWithoutAppointmentInput[]
    createMany?: AppointmentNoteCreateManyAppointmentInputEnvelope
    connect?: AppointmentNoteWhereUniqueInput | AppointmentNoteWhereUniqueInput[]
  }

  export type AppointmentLogCreateNestedManyWithoutAppointmentInput = {
    create?: XOR<AppointmentLogCreateWithoutAppointmentInput, AppointmentLogUncheckedCreateWithoutAppointmentInput> | AppointmentLogCreateWithoutAppointmentInput[] | AppointmentLogUncheckedCreateWithoutAppointmentInput[]
    connectOrCreate?: AppointmentLogCreateOrConnectWithoutAppointmentInput | AppointmentLogCreateOrConnectWithoutAppointmentInput[]
    createMany?: AppointmentLogCreateManyAppointmentInputEnvelope
    connect?: AppointmentLogWhereUniqueInput | AppointmentLogWhereUniqueInput[]
  }

  export type ContactRequestCreateNestedManyWithoutAppointmentInput = {
    create?: XOR<ContactRequestCreateWithoutAppointmentInput, ContactRequestUncheckedCreateWithoutAppointmentInput> | ContactRequestCreateWithoutAppointmentInput[] | ContactRequestUncheckedCreateWithoutAppointmentInput[]
    connectOrCreate?: ContactRequestCreateOrConnectWithoutAppointmentInput | ContactRequestCreateOrConnectWithoutAppointmentInput[]
    createMany?: ContactRequestCreateManyAppointmentInputEnvelope
    connect?: ContactRequestWhereUniqueInput | ContactRequestWhereUniqueInput[]
  }

  export type AppointmentNoteUncheckedCreateNestedManyWithoutAppointmentInput = {
    create?: XOR<AppointmentNoteCreateWithoutAppointmentInput, AppointmentNoteUncheckedCreateWithoutAppointmentInput> | AppointmentNoteCreateWithoutAppointmentInput[] | AppointmentNoteUncheckedCreateWithoutAppointmentInput[]
    connectOrCreate?: AppointmentNoteCreateOrConnectWithoutAppointmentInput | AppointmentNoteCreateOrConnectWithoutAppointmentInput[]
    createMany?: AppointmentNoteCreateManyAppointmentInputEnvelope
    connect?: AppointmentNoteWhereUniqueInput | AppointmentNoteWhereUniqueInput[]
  }

  export type AppointmentLogUncheckedCreateNestedManyWithoutAppointmentInput = {
    create?: XOR<AppointmentLogCreateWithoutAppointmentInput, AppointmentLogUncheckedCreateWithoutAppointmentInput> | AppointmentLogCreateWithoutAppointmentInput[] | AppointmentLogUncheckedCreateWithoutAppointmentInput[]
    connectOrCreate?: AppointmentLogCreateOrConnectWithoutAppointmentInput | AppointmentLogCreateOrConnectWithoutAppointmentInput[]
    createMany?: AppointmentLogCreateManyAppointmentInputEnvelope
    connect?: AppointmentLogWhereUniqueInput | AppointmentLogWhereUniqueInput[]
  }

  export type ContactRequestUncheckedCreateNestedManyWithoutAppointmentInput = {
    create?: XOR<ContactRequestCreateWithoutAppointmentInput, ContactRequestUncheckedCreateWithoutAppointmentInput> | ContactRequestCreateWithoutAppointmentInput[] | ContactRequestUncheckedCreateWithoutAppointmentInput[]
    connectOrCreate?: ContactRequestCreateOrConnectWithoutAppointmentInput | ContactRequestCreateOrConnectWithoutAppointmentInput[]
    createMany?: ContactRequestCreateManyAppointmentInputEnvelope
    connect?: ContactRequestWhereUniqueInput | ContactRequestWhereUniqueInput[]
  }

  export type CustomerUpdateOneWithoutAppointmentsNestedInput = {
    create?: XOR<CustomerCreateWithoutAppointmentsInput, CustomerUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutAppointmentsInput
    upsert?: CustomerUpsertWithoutAppointmentsInput
    disconnect?: CustomerWhereInput | boolean
    delete?: CustomerWhereInput | boolean
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutAppointmentsInput, CustomerUpdateWithoutAppointmentsInput>, CustomerUncheckedUpdateWithoutAppointmentsInput>
  }

  export type UserUpdateOneWithoutAppointmentsNestedInput = {
    create?: XOR<UserCreateWithoutAppointmentsInput, UserUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAppointmentsInput
    upsert?: UserUpsertWithoutAppointmentsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAppointmentsInput, UserUpdateWithoutAppointmentsInput>, UserUncheckedUpdateWithoutAppointmentsInput>
  }

  export type AppointmentNoteUpdateManyWithoutAppointmentNestedInput = {
    create?: XOR<AppointmentNoteCreateWithoutAppointmentInput, AppointmentNoteUncheckedCreateWithoutAppointmentInput> | AppointmentNoteCreateWithoutAppointmentInput[] | AppointmentNoteUncheckedCreateWithoutAppointmentInput[]
    connectOrCreate?: AppointmentNoteCreateOrConnectWithoutAppointmentInput | AppointmentNoteCreateOrConnectWithoutAppointmentInput[]
    upsert?: AppointmentNoteUpsertWithWhereUniqueWithoutAppointmentInput | AppointmentNoteUpsertWithWhereUniqueWithoutAppointmentInput[]
    createMany?: AppointmentNoteCreateManyAppointmentInputEnvelope
    set?: AppointmentNoteWhereUniqueInput | AppointmentNoteWhereUniqueInput[]
    disconnect?: AppointmentNoteWhereUniqueInput | AppointmentNoteWhereUniqueInput[]
    delete?: AppointmentNoteWhereUniqueInput | AppointmentNoteWhereUniqueInput[]
    connect?: AppointmentNoteWhereUniqueInput | AppointmentNoteWhereUniqueInput[]
    update?: AppointmentNoteUpdateWithWhereUniqueWithoutAppointmentInput | AppointmentNoteUpdateWithWhereUniqueWithoutAppointmentInput[]
    updateMany?: AppointmentNoteUpdateManyWithWhereWithoutAppointmentInput | AppointmentNoteUpdateManyWithWhereWithoutAppointmentInput[]
    deleteMany?: AppointmentNoteScalarWhereInput | AppointmentNoteScalarWhereInput[]
  }

  export type AppointmentLogUpdateManyWithoutAppointmentNestedInput = {
    create?: XOR<AppointmentLogCreateWithoutAppointmentInput, AppointmentLogUncheckedCreateWithoutAppointmentInput> | AppointmentLogCreateWithoutAppointmentInput[] | AppointmentLogUncheckedCreateWithoutAppointmentInput[]
    connectOrCreate?: AppointmentLogCreateOrConnectWithoutAppointmentInput | AppointmentLogCreateOrConnectWithoutAppointmentInput[]
    upsert?: AppointmentLogUpsertWithWhereUniqueWithoutAppointmentInput | AppointmentLogUpsertWithWhereUniqueWithoutAppointmentInput[]
    createMany?: AppointmentLogCreateManyAppointmentInputEnvelope
    set?: AppointmentLogWhereUniqueInput | AppointmentLogWhereUniqueInput[]
    disconnect?: AppointmentLogWhereUniqueInput | AppointmentLogWhereUniqueInput[]
    delete?: AppointmentLogWhereUniqueInput | AppointmentLogWhereUniqueInput[]
    connect?: AppointmentLogWhereUniqueInput | AppointmentLogWhereUniqueInput[]
    update?: AppointmentLogUpdateWithWhereUniqueWithoutAppointmentInput | AppointmentLogUpdateWithWhereUniqueWithoutAppointmentInput[]
    updateMany?: AppointmentLogUpdateManyWithWhereWithoutAppointmentInput | AppointmentLogUpdateManyWithWhereWithoutAppointmentInput[]
    deleteMany?: AppointmentLogScalarWhereInput | AppointmentLogScalarWhereInput[]
  }

  export type ContactRequestUpdateManyWithoutAppointmentNestedInput = {
    create?: XOR<ContactRequestCreateWithoutAppointmentInput, ContactRequestUncheckedCreateWithoutAppointmentInput> | ContactRequestCreateWithoutAppointmentInput[] | ContactRequestUncheckedCreateWithoutAppointmentInput[]
    connectOrCreate?: ContactRequestCreateOrConnectWithoutAppointmentInput | ContactRequestCreateOrConnectWithoutAppointmentInput[]
    upsert?: ContactRequestUpsertWithWhereUniqueWithoutAppointmentInput | ContactRequestUpsertWithWhereUniqueWithoutAppointmentInput[]
    createMany?: ContactRequestCreateManyAppointmentInputEnvelope
    set?: ContactRequestWhereUniqueInput | ContactRequestWhereUniqueInput[]
    disconnect?: ContactRequestWhereUniqueInput | ContactRequestWhereUniqueInput[]
    delete?: ContactRequestWhereUniqueInput | ContactRequestWhereUniqueInput[]
    connect?: ContactRequestWhereUniqueInput | ContactRequestWhereUniqueInput[]
    update?: ContactRequestUpdateWithWhereUniqueWithoutAppointmentInput | ContactRequestUpdateWithWhereUniqueWithoutAppointmentInput[]
    updateMany?: ContactRequestUpdateManyWithWhereWithoutAppointmentInput | ContactRequestUpdateManyWithWhereWithoutAppointmentInput[]
    deleteMany?: ContactRequestScalarWhereInput | ContactRequestScalarWhereInput[]
  }

  export type AppointmentNoteUncheckedUpdateManyWithoutAppointmentNestedInput = {
    create?: XOR<AppointmentNoteCreateWithoutAppointmentInput, AppointmentNoteUncheckedCreateWithoutAppointmentInput> | AppointmentNoteCreateWithoutAppointmentInput[] | AppointmentNoteUncheckedCreateWithoutAppointmentInput[]
    connectOrCreate?: AppointmentNoteCreateOrConnectWithoutAppointmentInput | AppointmentNoteCreateOrConnectWithoutAppointmentInput[]
    upsert?: AppointmentNoteUpsertWithWhereUniqueWithoutAppointmentInput | AppointmentNoteUpsertWithWhereUniqueWithoutAppointmentInput[]
    createMany?: AppointmentNoteCreateManyAppointmentInputEnvelope
    set?: AppointmentNoteWhereUniqueInput | AppointmentNoteWhereUniqueInput[]
    disconnect?: AppointmentNoteWhereUniqueInput | AppointmentNoteWhereUniqueInput[]
    delete?: AppointmentNoteWhereUniqueInput | AppointmentNoteWhereUniqueInput[]
    connect?: AppointmentNoteWhereUniqueInput | AppointmentNoteWhereUniqueInput[]
    update?: AppointmentNoteUpdateWithWhereUniqueWithoutAppointmentInput | AppointmentNoteUpdateWithWhereUniqueWithoutAppointmentInput[]
    updateMany?: AppointmentNoteUpdateManyWithWhereWithoutAppointmentInput | AppointmentNoteUpdateManyWithWhereWithoutAppointmentInput[]
    deleteMany?: AppointmentNoteScalarWhereInput | AppointmentNoteScalarWhereInput[]
  }

  export type AppointmentLogUncheckedUpdateManyWithoutAppointmentNestedInput = {
    create?: XOR<AppointmentLogCreateWithoutAppointmentInput, AppointmentLogUncheckedCreateWithoutAppointmentInput> | AppointmentLogCreateWithoutAppointmentInput[] | AppointmentLogUncheckedCreateWithoutAppointmentInput[]
    connectOrCreate?: AppointmentLogCreateOrConnectWithoutAppointmentInput | AppointmentLogCreateOrConnectWithoutAppointmentInput[]
    upsert?: AppointmentLogUpsertWithWhereUniqueWithoutAppointmentInput | AppointmentLogUpsertWithWhereUniqueWithoutAppointmentInput[]
    createMany?: AppointmentLogCreateManyAppointmentInputEnvelope
    set?: AppointmentLogWhereUniqueInput | AppointmentLogWhereUniqueInput[]
    disconnect?: AppointmentLogWhereUniqueInput | AppointmentLogWhereUniqueInput[]
    delete?: AppointmentLogWhereUniqueInput | AppointmentLogWhereUniqueInput[]
    connect?: AppointmentLogWhereUniqueInput | AppointmentLogWhereUniqueInput[]
    update?: AppointmentLogUpdateWithWhereUniqueWithoutAppointmentInput | AppointmentLogUpdateWithWhereUniqueWithoutAppointmentInput[]
    updateMany?: AppointmentLogUpdateManyWithWhereWithoutAppointmentInput | AppointmentLogUpdateManyWithWhereWithoutAppointmentInput[]
    deleteMany?: AppointmentLogScalarWhereInput | AppointmentLogScalarWhereInput[]
  }

  export type ContactRequestUncheckedUpdateManyWithoutAppointmentNestedInput = {
    create?: XOR<ContactRequestCreateWithoutAppointmentInput, ContactRequestUncheckedCreateWithoutAppointmentInput> | ContactRequestCreateWithoutAppointmentInput[] | ContactRequestUncheckedCreateWithoutAppointmentInput[]
    connectOrCreate?: ContactRequestCreateOrConnectWithoutAppointmentInput | ContactRequestCreateOrConnectWithoutAppointmentInput[]
    upsert?: ContactRequestUpsertWithWhereUniqueWithoutAppointmentInput | ContactRequestUpsertWithWhereUniqueWithoutAppointmentInput[]
    createMany?: ContactRequestCreateManyAppointmentInputEnvelope
    set?: ContactRequestWhereUniqueInput | ContactRequestWhereUniqueInput[]
    disconnect?: ContactRequestWhereUniqueInput | ContactRequestWhereUniqueInput[]
    delete?: ContactRequestWhereUniqueInput | ContactRequestWhereUniqueInput[]
    connect?: ContactRequestWhereUniqueInput | ContactRequestWhereUniqueInput[]
    update?: ContactRequestUpdateWithWhereUniqueWithoutAppointmentInput | ContactRequestUpdateWithWhereUniqueWithoutAppointmentInput[]
    updateMany?: ContactRequestUpdateManyWithWhereWithoutAppointmentInput | ContactRequestUpdateManyWithWhereWithoutAppointmentInput[]
    deleteMany?: ContactRequestScalarWhereInput | ContactRequestScalarWhereInput[]
  }

  export type AppointmentCreateNestedOneWithoutNotesInput = {
    create?: XOR<AppointmentCreateWithoutNotesInput, AppointmentUncheckedCreateWithoutNotesInput>
    connectOrCreate?: AppointmentCreateOrConnectWithoutNotesInput
    connect?: AppointmentWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAppointmentNotesInput = {
    create?: XOR<UserCreateWithoutAppointmentNotesInput, UserUncheckedCreateWithoutAppointmentNotesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAppointmentNotesInput
    connect?: UserWhereUniqueInput
  }

  export type AppointmentUpdateOneRequiredWithoutNotesNestedInput = {
    create?: XOR<AppointmentCreateWithoutNotesInput, AppointmentUncheckedCreateWithoutNotesInput>
    connectOrCreate?: AppointmentCreateOrConnectWithoutNotesInput
    upsert?: AppointmentUpsertWithoutNotesInput
    connect?: AppointmentWhereUniqueInput
    update?: XOR<XOR<AppointmentUpdateToOneWithWhereWithoutNotesInput, AppointmentUpdateWithoutNotesInput>, AppointmentUncheckedUpdateWithoutNotesInput>
  }

  export type UserUpdateOneRequiredWithoutAppointmentNotesNestedInput = {
    create?: XOR<UserCreateWithoutAppointmentNotesInput, UserUncheckedCreateWithoutAppointmentNotesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAppointmentNotesInput
    upsert?: UserUpsertWithoutAppointmentNotesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAppointmentNotesInput, UserUpdateWithoutAppointmentNotesInput>, UserUncheckedUpdateWithoutAppointmentNotesInput>
  }

  export type UserCreateNestedOneWithoutAppointmentLogsInput = {
    create?: XOR<UserCreateWithoutAppointmentLogsInput, UserUncheckedCreateWithoutAppointmentLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAppointmentLogsInput
    connect?: UserWhereUniqueInput
  }

  export type AppointmentCreateNestedOneWithoutLogsInput = {
    create?: XOR<AppointmentCreateWithoutLogsInput, AppointmentUncheckedCreateWithoutLogsInput>
    connectOrCreate?: AppointmentCreateOrConnectWithoutLogsInput
    connect?: AppointmentWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAppointmentLogsNestedInput = {
    create?: XOR<UserCreateWithoutAppointmentLogsInput, UserUncheckedCreateWithoutAppointmentLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAppointmentLogsInput
    upsert?: UserUpsertWithoutAppointmentLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAppointmentLogsInput, UserUpdateWithoutAppointmentLogsInput>, UserUncheckedUpdateWithoutAppointmentLogsInput>
  }

  export type AppointmentUpdateOneRequiredWithoutLogsNestedInput = {
    create?: XOR<AppointmentCreateWithoutLogsInput, AppointmentUncheckedCreateWithoutLogsInput>
    connectOrCreate?: AppointmentCreateOrConnectWithoutLogsInput
    upsert?: AppointmentUpsertWithoutLogsInput
    connect?: AppointmentWhereUniqueInput
    update?: XOR<XOR<AppointmentUpdateToOneWithWhereWithoutLogsInput, AppointmentUpdateWithoutLogsInput>, AppointmentUncheckedUpdateWithoutLogsInput>
  }

  export type RequestNoteCreateNestedManyWithoutRequestInput = {
    create?: XOR<RequestNoteCreateWithoutRequestInput, RequestNoteUncheckedCreateWithoutRequestInput> | RequestNoteCreateWithoutRequestInput[] | RequestNoteUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: RequestNoteCreateOrConnectWithoutRequestInput | RequestNoteCreateOrConnectWithoutRequestInput[]
    createMany?: RequestNoteCreateManyRequestInputEnvelope
    connect?: RequestNoteWhereUniqueInput | RequestNoteWhereUniqueInput[]
  }

  export type RequestLogCreateNestedManyWithoutRequestInput = {
    create?: XOR<RequestLogCreateWithoutRequestInput, RequestLogUncheckedCreateWithoutRequestInput> | RequestLogCreateWithoutRequestInput[] | RequestLogUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: RequestLogCreateOrConnectWithoutRequestInput | RequestLogCreateOrConnectWithoutRequestInput[]
    createMany?: RequestLogCreateManyRequestInputEnvelope
    connect?: RequestLogWhereUniqueInput | RequestLogWhereUniqueInput[]
  }

  export type RequestDataCreateNestedManyWithoutRequestInput = {
    create?: XOR<RequestDataCreateWithoutRequestInput, RequestDataUncheckedCreateWithoutRequestInput> | RequestDataCreateWithoutRequestInput[] | RequestDataUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: RequestDataCreateOrConnectWithoutRequestInput | RequestDataCreateOrConnectWithoutRequestInput[]
    createMany?: RequestDataCreateManyRequestInputEnvelope
    connect?: RequestDataWhereUniqueInput | RequestDataWhereUniqueInput[]
  }

  export type CustomerCreateNestedOneWithoutContactRequestsInput = {
    create?: XOR<CustomerCreateWithoutContactRequestsInput, CustomerUncheckedCreateWithoutContactRequestsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutContactRequestsInput
    connect?: CustomerWhereUniqueInput
  }

  export type AppointmentCreateNestedOneWithoutContactRequestsInput = {
    create?: XOR<AppointmentCreateWithoutContactRequestsInput, AppointmentUncheckedCreateWithoutContactRequestsInput>
    connectOrCreate?: AppointmentCreateOrConnectWithoutContactRequestsInput
    connect?: AppointmentWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutContactRequestsInput = {
    create?: XOR<UserCreateWithoutContactRequestsInput, UserUncheckedCreateWithoutContactRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutContactRequestsInput
    connect?: UserWhereUniqueInput
  }

  export type RequestNoteUncheckedCreateNestedManyWithoutRequestInput = {
    create?: XOR<RequestNoteCreateWithoutRequestInput, RequestNoteUncheckedCreateWithoutRequestInput> | RequestNoteCreateWithoutRequestInput[] | RequestNoteUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: RequestNoteCreateOrConnectWithoutRequestInput | RequestNoteCreateOrConnectWithoutRequestInput[]
    createMany?: RequestNoteCreateManyRequestInputEnvelope
    connect?: RequestNoteWhereUniqueInput | RequestNoteWhereUniqueInput[]
  }

  export type RequestLogUncheckedCreateNestedManyWithoutRequestInput = {
    create?: XOR<RequestLogCreateWithoutRequestInput, RequestLogUncheckedCreateWithoutRequestInput> | RequestLogCreateWithoutRequestInput[] | RequestLogUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: RequestLogCreateOrConnectWithoutRequestInput | RequestLogCreateOrConnectWithoutRequestInput[]
    createMany?: RequestLogCreateManyRequestInputEnvelope
    connect?: RequestLogWhereUniqueInput | RequestLogWhereUniqueInput[]
  }

  export type RequestDataUncheckedCreateNestedManyWithoutRequestInput = {
    create?: XOR<RequestDataCreateWithoutRequestInput, RequestDataUncheckedCreateWithoutRequestInput> | RequestDataCreateWithoutRequestInput[] | RequestDataUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: RequestDataCreateOrConnectWithoutRequestInput | RequestDataCreateOrConnectWithoutRequestInput[]
    createMany?: RequestDataCreateManyRequestInputEnvelope
    connect?: RequestDataWhereUniqueInput | RequestDataWhereUniqueInput[]
  }

  export type RequestNoteUpdateManyWithoutRequestNestedInput = {
    create?: XOR<RequestNoteCreateWithoutRequestInput, RequestNoteUncheckedCreateWithoutRequestInput> | RequestNoteCreateWithoutRequestInput[] | RequestNoteUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: RequestNoteCreateOrConnectWithoutRequestInput | RequestNoteCreateOrConnectWithoutRequestInput[]
    upsert?: RequestNoteUpsertWithWhereUniqueWithoutRequestInput | RequestNoteUpsertWithWhereUniqueWithoutRequestInput[]
    createMany?: RequestNoteCreateManyRequestInputEnvelope
    set?: RequestNoteWhereUniqueInput | RequestNoteWhereUniqueInput[]
    disconnect?: RequestNoteWhereUniqueInput | RequestNoteWhereUniqueInput[]
    delete?: RequestNoteWhereUniqueInput | RequestNoteWhereUniqueInput[]
    connect?: RequestNoteWhereUniqueInput | RequestNoteWhereUniqueInput[]
    update?: RequestNoteUpdateWithWhereUniqueWithoutRequestInput | RequestNoteUpdateWithWhereUniqueWithoutRequestInput[]
    updateMany?: RequestNoteUpdateManyWithWhereWithoutRequestInput | RequestNoteUpdateManyWithWhereWithoutRequestInput[]
    deleteMany?: RequestNoteScalarWhereInput | RequestNoteScalarWhereInput[]
  }

  export type RequestLogUpdateManyWithoutRequestNestedInput = {
    create?: XOR<RequestLogCreateWithoutRequestInput, RequestLogUncheckedCreateWithoutRequestInput> | RequestLogCreateWithoutRequestInput[] | RequestLogUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: RequestLogCreateOrConnectWithoutRequestInput | RequestLogCreateOrConnectWithoutRequestInput[]
    upsert?: RequestLogUpsertWithWhereUniqueWithoutRequestInput | RequestLogUpsertWithWhereUniqueWithoutRequestInput[]
    createMany?: RequestLogCreateManyRequestInputEnvelope
    set?: RequestLogWhereUniqueInput | RequestLogWhereUniqueInput[]
    disconnect?: RequestLogWhereUniqueInput | RequestLogWhereUniqueInput[]
    delete?: RequestLogWhereUniqueInput | RequestLogWhereUniqueInput[]
    connect?: RequestLogWhereUniqueInput | RequestLogWhereUniqueInput[]
    update?: RequestLogUpdateWithWhereUniqueWithoutRequestInput | RequestLogUpdateWithWhereUniqueWithoutRequestInput[]
    updateMany?: RequestLogUpdateManyWithWhereWithoutRequestInput | RequestLogUpdateManyWithWhereWithoutRequestInput[]
    deleteMany?: RequestLogScalarWhereInput | RequestLogScalarWhereInput[]
  }

  export type RequestDataUpdateManyWithoutRequestNestedInput = {
    create?: XOR<RequestDataCreateWithoutRequestInput, RequestDataUncheckedCreateWithoutRequestInput> | RequestDataCreateWithoutRequestInput[] | RequestDataUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: RequestDataCreateOrConnectWithoutRequestInput | RequestDataCreateOrConnectWithoutRequestInput[]
    upsert?: RequestDataUpsertWithWhereUniqueWithoutRequestInput | RequestDataUpsertWithWhereUniqueWithoutRequestInput[]
    createMany?: RequestDataCreateManyRequestInputEnvelope
    set?: RequestDataWhereUniqueInput | RequestDataWhereUniqueInput[]
    disconnect?: RequestDataWhereUniqueInput | RequestDataWhereUniqueInput[]
    delete?: RequestDataWhereUniqueInput | RequestDataWhereUniqueInput[]
    connect?: RequestDataWhereUniqueInput | RequestDataWhereUniqueInput[]
    update?: RequestDataUpdateWithWhereUniqueWithoutRequestInput | RequestDataUpdateWithWhereUniqueWithoutRequestInput[]
    updateMany?: RequestDataUpdateManyWithWhereWithoutRequestInput | RequestDataUpdateManyWithWhereWithoutRequestInput[]
    deleteMany?: RequestDataScalarWhereInput | RequestDataScalarWhereInput[]
  }

  export type CustomerUpdateOneWithoutContactRequestsNestedInput = {
    create?: XOR<CustomerCreateWithoutContactRequestsInput, CustomerUncheckedCreateWithoutContactRequestsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutContactRequestsInput
    upsert?: CustomerUpsertWithoutContactRequestsInput
    disconnect?: CustomerWhereInput | boolean
    delete?: CustomerWhereInput | boolean
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutContactRequestsInput, CustomerUpdateWithoutContactRequestsInput>, CustomerUncheckedUpdateWithoutContactRequestsInput>
  }

  export type AppointmentUpdateOneWithoutContactRequestsNestedInput = {
    create?: XOR<AppointmentCreateWithoutContactRequestsInput, AppointmentUncheckedCreateWithoutContactRequestsInput>
    connectOrCreate?: AppointmentCreateOrConnectWithoutContactRequestsInput
    upsert?: AppointmentUpsertWithoutContactRequestsInput
    disconnect?: AppointmentWhereInput | boolean
    delete?: AppointmentWhereInput | boolean
    connect?: AppointmentWhereUniqueInput
    update?: XOR<XOR<AppointmentUpdateToOneWithWhereWithoutContactRequestsInput, AppointmentUpdateWithoutContactRequestsInput>, AppointmentUncheckedUpdateWithoutContactRequestsInput>
  }

  export type UserUpdateOneWithoutContactRequestsNestedInput = {
    create?: XOR<UserCreateWithoutContactRequestsInput, UserUncheckedCreateWithoutContactRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutContactRequestsInput
    upsert?: UserUpsertWithoutContactRequestsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutContactRequestsInput, UserUpdateWithoutContactRequestsInput>, UserUncheckedUpdateWithoutContactRequestsInput>
  }

  export type RequestNoteUncheckedUpdateManyWithoutRequestNestedInput = {
    create?: XOR<RequestNoteCreateWithoutRequestInput, RequestNoteUncheckedCreateWithoutRequestInput> | RequestNoteCreateWithoutRequestInput[] | RequestNoteUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: RequestNoteCreateOrConnectWithoutRequestInput | RequestNoteCreateOrConnectWithoutRequestInput[]
    upsert?: RequestNoteUpsertWithWhereUniqueWithoutRequestInput | RequestNoteUpsertWithWhereUniqueWithoutRequestInput[]
    createMany?: RequestNoteCreateManyRequestInputEnvelope
    set?: RequestNoteWhereUniqueInput | RequestNoteWhereUniqueInput[]
    disconnect?: RequestNoteWhereUniqueInput | RequestNoteWhereUniqueInput[]
    delete?: RequestNoteWhereUniqueInput | RequestNoteWhereUniqueInput[]
    connect?: RequestNoteWhereUniqueInput | RequestNoteWhereUniqueInput[]
    update?: RequestNoteUpdateWithWhereUniqueWithoutRequestInput | RequestNoteUpdateWithWhereUniqueWithoutRequestInput[]
    updateMany?: RequestNoteUpdateManyWithWhereWithoutRequestInput | RequestNoteUpdateManyWithWhereWithoutRequestInput[]
    deleteMany?: RequestNoteScalarWhereInput | RequestNoteScalarWhereInput[]
  }

  export type RequestLogUncheckedUpdateManyWithoutRequestNestedInput = {
    create?: XOR<RequestLogCreateWithoutRequestInput, RequestLogUncheckedCreateWithoutRequestInput> | RequestLogCreateWithoutRequestInput[] | RequestLogUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: RequestLogCreateOrConnectWithoutRequestInput | RequestLogCreateOrConnectWithoutRequestInput[]
    upsert?: RequestLogUpsertWithWhereUniqueWithoutRequestInput | RequestLogUpsertWithWhereUniqueWithoutRequestInput[]
    createMany?: RequestLogCreateManyRequestInputEnvelope
    set?: RequestLogWhereUniqueInput | RequestLogWhereUniqueInput[]
    disconnect?: RequestLogWhereUniqueInput | RequestLogWhereUniqueInput[]
    delete?: RequestLogWhereUniqueInput | RequestLogWhereUniqueInput[]
    connect?: RequestLogWhereUniqueInput | RequestLogWhereUniqueInput[]
    update?: RequestLogUpdateWithWhereUniqueWithoutRequestInput | RequestLogUpdateWithWhereUniqueWithoutRequestInput[]
    updateMany?: RequestLogUpdateManyWithWhereWithoutRequestInput | RequestLogUpdateManyWithWhereWithoutRequestInput[]
    deleteMany?: RequestLogScalarWhereInput | RequestLogScalarWhereInput[]
  }

  export type RequestDataUncheckedUpdateManyWithoutRequestNestedInput = {
    create?: XOR<RequestDataCreateWithoutRequestInput, RequestDataUncheckedCreateWithoutRequestInput> | RequestDataCreateWithoutRequestInput[] | RequestDataUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: RequestDataCreateOrConnectWithoutRequestInput | RequestDataCreateOrConnectWithoutRequestInput[]
    upsert?: RequestDataUpsertWithWhereUniqueWithoutRequestInput | RequestDataUpsertWithWhereUniqueWithoutRequestInput[]
    createMany?: RequestDataCreateManyRequestInputEnvelope
    set?: RequestDataWhereUniqueInput | RequestDataWhereUniqueInput[]
    disconnect?: RequestDataWhereUniqueInput | RequestDataWhereUniqueInput[]
    delete?: RequestDataWhereUniqueInput | RequestDataWhereUniqueInput[]
    connect?: RequestDataWhereUniqueInput | RequestDataWhereUniqueInput[]
    update?: RequestDataUpdateWithWhereUniqueWithoutRequestInput | RequestDataUpdateWithWhereUniqueWithoutRequestInput[]
    updateMany?: RequestDataUpdateManyWithWhereWithoutRequestInput | RequestDataUpdateManyWithWhereWithoutRequestInput[]
    deleteMany?: RequestDataScalarWhereInput | RequestDataScalarWhereInput[]
  }

  export type ContactRequestCreateNestedOneWithoutNotesInput = {
    create?: XOR<ContactRequestCreateWithoutNotesInput, ContactRequestUncheckedCreateWithoutNotesInput>
    connectOrCreate?: ContactRequestCreateOrConnectWithoutNotesInput
    connect?: ContactRequestWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutRequestNotesInput = {
    create?: XOR<UserCreateWithoutRequestNotesInput, UserUncheckedCreateWithoutRequestNotesInput>
    connectOrCreate?: UserCreateOrConnectWithoutRequestNotesInput
    connect?: UserWhereUniqueInput
  }

  export type ContactRequestUpdateOneRequiredWithoutNotesNestedInput = {
    create?: XOR<ContactRequestCreateWithoutNotesInput, ContactRequestUncheckedCreateWithoutNotesInput>
    connectOrCreate?: ContactRequestCreateOrConnectWithoutNotesInput
    upsert?: ContactRequestUpsertWithoutNotesInput
    connect?: ContactRequestWhereUniqueInput
    update?: XOR<XOR<ContactRequestUpdateToOneWithWhereWithoutNotesInput, ContactRequestUpdateWithoutNotesInput>, ContactRequestUncheckedUpdateWithoutNotesInput>
  }

  export type UserUpdateOneRequiredWithoutRequestNotesNestedInput = {
    create?: XOR<UserCreateWithoutRequestNotesInput, UserUncheckedCreateWithoutRequestNotesInput>
    connectOrCreate?: UserCreateOrConnectWithoutRequestNotesInput
    upsert?: UserUpsertWithoutRequestNotesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRequestNotesInput, UserUpdateWithoutRequestNotesInput>, UserUncheckedUpdateWithoutRequestNotesInput>
  }

  export type UserCreateNestedOneWithoutRequestLogsInput = {
    create?: XOR<UserCreateWithoutRequestLogsInput, UserUncheckedCreateWithoutRequestLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRequestLogsInput
    connect?: UserWhereUniqueInput
  }

  export type ContactRequestCreateNestedOneWithoutLogsInput = {
    create?: XOR<ContactRequestCreateWithoutLogsInput, ContactRequestUncheckedCreateWithoutLogsInput>
    connectOrCreate?: ContactRequestCreateOrConnectWithoutLogsInput
    connect?: ContactRequestWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutRequestLogsNestedInput = {
    create?: XOR<UserCreateWithoutRequestLogsInput, UserUncheckedCreateWithoutRequestLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRequestLogsInput
    upsert?: UserUpsertWithoutRequestLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRequestLogsInput, UserUpdateWithoutRequestLogsInput>, UserUncheckedUpdateWithoutRequestLogsInput>
  }

  export type ContactRequestUpdateOneRequiredWithoutLogsNestedInput = {
    create?: XOR<ContactRequestCreateWithoutLogsInput, ContactRequestUncheckedCreateWithoutLogsInput>
    connectOrCreate?: ContactRequestCreateOrConnectWithoutLogsInput
    upsert?: ContactRequestUpsertWithoutLogsInput
    connect?: ContactRequestWhereUniqueInput
    update?: XOR<XOR<ContactRequestUpdateToOneWithWhereWithoutLogsInput, ContactRequestUpdateWithoutLogsInput>, ContactRequestUncheckedUpdateWithoutLogsInput>
  }

  export type ContactRequestCreateNestedOneWithoutRequestDataInput = {
    create?: XOR<ContactRequestCreateWithoutRequestDataInput, ContactRequestUncheckedCreateWithoutRequestDataInput>
    connectOrCreate?: ContactRequestCreateOrConnectWithoutRequestDataInput
    connect?: ContactRequestWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutRequestDataInput = {
    create?: XOR<UserCreateWithoutRequestDataInput, UserUncheckedCreateWithoutRequestDataInput>
    connectOrCreate?: UserCreateOrConnectWithoutRequestDataInput
    connect?: UserWhereUniqueInput
  }

  export type RequestDataHistoryCreateNestedManyWithoutRequestDataInput = {
    create?: XOR<RequestDataHistoryCreateWithoutRequestDataInput, RequestDataHistoryUncheckedCreateWithoutRequestDataInput> | RequestDataHistoryCreateWithoutRequestDataInput[] | RequestDataHistoryUncheckedCreateWithoutRequestDataInput[]
    connectOrCreate?: RequestDataHistoryCreateOrConnectWithoutRequestDataInput | RequestDataHistoryCreateOrConnectWithoutRequestDataInput[]
    createMany?: RequestDataHistoryCreateManyRequestDataInputEnvelope
    connect?: RequestDataHistoryWhereUniqueInput | RequestDataHistoryWhereUniqueInput[]
  }

  export type RequestDataHistoryUncheckedCreateNestedManyWithoutRequestDataInput = {
    create?: XOR<RequestDataHistoryCreateWithoutRequestDataInput, RequestDataHistoryUncheckedCreateWithoutRequestDataInput> | RequestDataHistoryCreateWithoutRequestDataInput[] | RequestDataHistoryUncheckedCreateWithoutRequestDataInput[]
    connectOrCreate?: RequestDataHistoryCreateOrConnectWithoutRequestDataInput | RequestDataHistoryCreateOrConnectWithoutRequestDataInput[]
    createMany?: RequestDataHistoryCreateManyRequestDataInputEnvelope
    connect?: RequestDataHistoryWhereUniqueInput | RequestDataHistoryWhereUniqueInput[]
  }

  export type ContactRequestUpdateOneRequiredWithoutRequestDataNestedInput = {
    create?: XOR<ContactRequestCreateWithoutRequestDataInput, ContactRequestUncheckedCreateWithoutRequestDataInput>
    connectOrCreate?: ContactRequestCreateOrConnectWithoutRequestDataInput
    upsert?: ContactRequestUpsertWithoutRequestDataInput
    connect?: ContactRequestWhereUniqueInput
    update?: XOR<XOR<ContactRequestUpdateToOneWithWhereWithoutRequestDataInput, ContactRequestUpdateWithoutRequestDataInput>, ContactRequestUncheckedUpdateWithoutRequestDataInput>
  }

  export type UserUpdateOneWithoutRequestDataNestedInput = {
    create?: XOR<UserCreateWithoutRequestDataInput, UserUncheckedCreateWithoutRequestDataInput>
    connectOrCreate?: UserCreateOrConnectWithoutRequestDataInput
    upsert?: UserUpsertWithoutRequestDataInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRequestDataInput, UserUpdateWithoutRequestDataInput>, UserUncheckedUpdateWithoutRequestDataInput>
  }

  export type RequestDataHistoryUpdateManyWithoutRequestDataNestedInput = {
    create?: XOR<RequestDataHistoryCreateWithoutRequestDataInput, RequestDataHistoryUncheckedCreateWithoutRequestDataInput> | RequestDataHistoryCreateWithoutRequestDataInput[] | RequestDataHistoryUncheckedCreateWithoutRequestDataInput[]
    connectOrCreate?: RequestDataHistoryCreateOrConnectWithoutRequestDataInput | RequestDataHistoryCreateOrConnectWithoutRequestDataInput[]
    upsert?: RequestDataHistoryUpsertWithWhereUniqueWithoutRequestDataInput | RequestDataHistoryUpsertWithWhereUniqueWithoutRequestDataInput[]
    createMany?: RequestDataHistoryCreateManyRequestDataInputEnvelope
    set?: RequestDataHistoryWhereUniqueInput | RequestDataHistoryWhereUniqueInput[]
    disconnect?: RequestDataHistoryWhereUniqueInput | RequestDataHistoryWhereUniqueInput[]
    delete?: RequestDataHistoryWhereUniqueInput | RequestDataHistoryWhereUniqueInput[]
    connect?: RequestDataHistoryWhereUniqueInput | RequestDataHistoryWhereUniqueInput[]
    update?: RequestDataHistoryUpdateWithWhereUniqueWithoutRequestDataInput | RequestDataHistoryUpdateWithWhereUniqueWithoutRequestDataInput[]
    updateMany?: RequestDataHistoryUpdateManyWithWhereWithoutRequestDataInput | RequestDataHistoryUpdateManyWithWhereWithoutRequestDataInput[]
    deleteMany?: RequestDataHistoryScalarWhereInput | RequestDataHistoryScalarWhereInput[]
  }

  export type RequestDataHistoryUncheckedUpdateManyWithoutRequestDataNestedInput = {
    create?: XOR<RequestDataHistoryCreateWithoutRequestDataInput, RequestDataHistoryUncheckedCreateWithoutRequestDataInput> | RequestDataHistoryCreateWithoutRequestDataInput[] | RequestDataHistoryUncheckedCreateWithoutRequestDataInput[]
    connectOrCreate?: RequestDataHistoryCreateOrConnectWithoutRequestDataInput | RequestDataHistoryCreateOrConnectWithoutRequestDataInput[]
    upsert?: RequestDataHistoryUpsertWithWhereUniqueWithoutRequestDataInput | RequestDataHistoryUpsertWithWhereUniqueWithoutRequestDataInput[]
    createMany?: RequestDataHistoryCreateManyRequestDataInputEnvelope
    set?: RequestDataHistoryWhereUniqueInput | RequestDataHistoryWhereUniqueInput[]
    disconnect?: RequestDataHistoryWhereUniqueInput | RequestDataHistoryWhereUniqueInput[]
    delete?: RequestDataHistoryWhereUniqueInput | RequestDataHistoryWhereUniqueInput[]
    connect?: RequestDataHistoryWhereUniqueInput | RequestDataHistoryWhereUniqueInput[]
    update?: RequestDataHistoryUpdateWithWhereUniqueWithoutRequestDataInput | RequestDataHistoryUpdateWithWhereUniqueWithoutRequestDataInput[]
    updateMany?: RequestDataHistoryUpdateManyWithWhereWithoutRequestDataInput | RequestDataHistoryUpdateManyWithWhereWithoutRequestDataInput[]
    deleteMany?: RequestDataHistoryScalarWhereInput | RequestDataHistoryScalarWhereInput[]
  }

  export type RequestDataCreateNestedOneWithoutHistoryInput = {
    create?: XOR<RequestDataCreateWithoutHistoryInput, RequestDataUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: RequestDataCreateOrConnectWithoutHistoryInput
    connect?: RequestDataWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutRequestDataHistoryInput = {
    create?: XOR<UserCreateWithoutRequestDataHistoryInput, UserUncheckedCreateWithoutRequestDataHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutRequestDataHistoryInput
    connect?: UserWhereUniqueInput
  }

  export type RequestDataUpdateOneRequiredWithoutHistoryNestedInput = {
    create?: XOR<RequestDataCreateWithoutHistoryInput, RequestDataUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: RequestDataCreateOrConnectWithoutHistoryInput
    upsert?: RequestDataUpsertWithoutHistoryInput
    connect?: RequestDataWhereUniqueInput
    update?: XOR<XOR<RequestDataUpdateToOneWithWhereWithoutHistoryInput, RequestDataUpdateWithoutHistoryInput>, RequestDataUncheckedUpdateWithoutHistoryInput>
  }

  export type UserUpdateOneWithoutRequestDataHistoryNestedInput = {
    create?: XOR<UserCreateWithoutRequestDataHistoryInput, UserUncheckedCreateWithoutRequestDataHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutRequestDataHistoryInput
    upsert?: UserUpsertWithoutRequestDataHistoryInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRequestDataHistoryInput, UserUpdateWithoutRequestDataHistoryInput>, UserUncheckedUpdateWithoutRequestDataHistoryInput>
  }

  export type UserCreateNestedManyWithoutProfilePictureFileInput = {
    create?: XOR<UserCreateWithoutProfilePictureFileInput, UserUncheckedCreateWithoutProfilePictureFileInput> | UserCreateWithoutProfilePictureFileInput[] | UserUncheckedCreateWithoutProfilePictureFileInput[]
    connectOrCreate?: UserCreateOrConnectWithoutProfilePictureFileInput | UserCreateOrConnectWithoutProfilePictureFileInput[]
    createMany?: UserCreateManyProfilePictureFileInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutProfilePictureFileInput = {
    create?: XOR<UserCreateWithoutProfilePictureFileInput, UserUncheckedCreateWithoutProfilePictureFileInput> | UserCreateWithoutProfilePictureFileInput[] | UserUncheckedCreateWithoutProfilePictureFileInput[]
    connectOrCreate?: UserCreateOrConnectWithoutProfilePictureFileInput | UserCreateOrConnectWithoutProfilePictureFileInput[]
    createMany?: UserCreateManyProfilePictureFileInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutProfilePictureFileNestedInput = {
    create?: XOR<UserCreateWithoutProfilePictureFileInput, UserUncheckedCreateWithoutProfilePictureFileInput> | UserCreateWithoutProfilePictureFileInput[] | UserUncheckedCreateWithoutProfilePictureFileInput[]
    connectOrCreate?: UserCreateOrConnectWithoutProfilePictureFileInput | UserCreateOrConnectWithoutProfilePictureFileInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutProfilePictureFileInput | UserUpsertWithWhereUniqueWithoutProfilePictureFileInput[]
    createMany?: UserCreateManyProfilePictureFileInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutProfilePictureFileInput | UserUpdateWithWhereUniqueWithoutProfilePictureFileInput[]
    updateMany?: UserUpdateManyWithWhereWithoutProfilePictureFileInput | UserUpdateManyWithWhereWithoutProfilePictureFileInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutProfilePictureFileNestedInput = {
    create?: XOR<UserCreateWithoutProfilePictureFileInput, UserUncheckedCreateWithoutProfilePictureFileInput> | UserCreateWithoutProfilePictureFileInput[] | UserUncheckedCreateWithoutProfilePictureFileInput[]
    connectOrCreate?: UserCreateOrConnectWithoutProfilePictureFileInput | UserCreateOrConnectWithoutProfilePictureFileInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutProfilePictureFileInput | UserUpsertWithWhereUniqueWithoutProfilePictureFileInput[]
    createMany?: UserCreateManyProfilePictureFileInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutProfilePictureFileInput | UserUpdateWithWhereUniqueWithoutProfilePictureFileInput[]
    updateMany?: UserUpdateManyWithWhereWithoutProfilePictureFileInput | UserUpdateManyWithWhereWithoutProfilePictureFileInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UserSettingsCreateWithoutUserInput = {
    darkMode?: boolean
    emailNotifications?: boolean
    pushNotifications?: boolean
    language?: string
    notificationInterval?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSettingsUncheckedCreateWithoutUserInput = {
    id?: number
    darkMode?: boolean
    emailNotifications?: boolean
    pushNotifications?: boolean
    language?: string
    notificationInterval?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSettingsCreateOrConnectWithoutUserInput = {
    where: UserSettingsWhereUniqueInput
    create: XOR<UserSettingsCreateWithoutUserInput, UserSettingsUncheckedCreateWithoutUserInput>
  }

  export type UserActivityCreateWithoutUserInput = {
    timestamp?: Date | string | null
    activity: string
    details?: string | null
    ipAddress?: string | null
  }

  export type UserActivityUncheckedCreateWithoutUserInput = {
    id?: number
    timestamp?: Date | string | null
    activity: string
    details?: string | null
    ipAddress?: string | null
  }

  export type UserActivityCreateOrConnectWithoutUserInput = {
    where: UserActivityWhereUniqueInput
    create: XOR<UserActivityCreateWithoutUserInput, UserActivityUncheckedCreateWithoutUserInput>
  }

  export type UserActivityCreateManyUserInputEnvelope = {
    data: UserActivityCreateManyUserInput | UserActivityCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AppointmentCreateWithoutCreatorInput = {
    title: string
    appointmentDate: Date | string
    duration?: number | null
    location?: string | null
    description?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    customer?: CustomerCreateNestedOneWithoutAppointmentsInput
    notes?: AppointmentNoteCreateNestedManyWithoutAppointmentInput
    logs?: AppointmentLogCreateNestedManyWithoutAppointmentInput
    contactRequests?: ContactRequestCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutCreatorInput = {
    id?: number
    title: string
    customerId?: number | null
    appointmentDate: Date | string
    duration?: number | null
    location?: string | null
    description?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: AppointmentNoteUncheckedCreateNestedManyWithoutAppointmentInput
    logs?: AppointmentLogUncheckedCreateNestedManyWithoutAppointmentInput
    contactRequests?: ContactRequestUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutCreatorInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutCreatorInput, AppointmentUncheckedCreateWithoutCreatorInput>
  }

  export type AppointmentCreateManyCreatorInputEnvelope = {
    data: AppointmentCreateManyCreatorInput | AppointmentCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type RefreshTokenCreateWithoutUserInput = {
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
    createdByIp?: string | null
    isRevoked?: boolean
    revokedAt?: Date | string | null
    revokedByIp?: string | null
    replacedByToken?: string | null
  }

  export type RefreshTokenUncheckedCreateWithoutUserInput = {
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
    createdByIp?: string | null
    isRevoked?: boolean
    revokedAt?: Date | string | null
    revokedByIp?: string | null
    replacedByToken?: string | null
  }

  export type RefreshTokenCreateOrConnectWithoutUserInput = {
    where: RefreshTokenWhereUniqueInput
    create: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput>
  }

  export type RefreshTokenCreateManyUserInputEnvelope = {
    data: RefreshTokenCreateManyUserInput | RefreshTokenCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CustomerLogCreateWithoutUserInput = {
    userName: string
    action: string
    details?: string | null
    createdAt?: Date | string
    customer: CustomerCreateNestedOneWithoutLogsInput
  }

  export type CustomerLogUncheckedCreateWithoutUserInput = {
    id?: number
    customerId: number
    userName: string
    action: string
    details?: string | null
    createdAt?: Date | string
  }

  export type CustomerLogCreateOrConnectWithoutUserInput = {
    where: CustomerLogWhereUniqueInput
    create: XOR<CustomerLogCreateWithoutUserInput, CustomerLogUncheckedCreateWithoutUserInput>
  }

  export type CustomerLogCreateManyUserInputEnvelope = {
    data: CustomerLogCreateManyUserInput | CustomerLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AppointmentNoteCreateWithoutUserInput = {
    userName: string
    text: string
    createdAt?: Date | string
    appointment: AppointmentCreateNestedOneWithoutNotesInput
  }

  export type AppointmentNoteUncheckedCreateWithoutUserInput = {
    id?: number
    appointmentId: number
    userName: string
    text: string
    createdAt?: Date | string
  }

  export type AppointmentNoteCreateOrConnectWithoutUserInput = {
    where: AppointmentNoteWhereUniqueInput
    create: XOR<AppointmentNoteCreateWithoutUserInput, AppointmentNoteUncheckedCreateWithoutUserInput>
  }

  export type AppointmentNoteCreateManyUserInputEnvelope = {
    data: AppointmentNoteCreateManyUserInput | AppointmentNoteCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AppointmentLogCreateWithoutUserInput = {
    userName: string
    action: string
    details?: string | null
    createdAt?: Date | string
    appointment: AppointmentCreateNestedOneWithoutLogsInput
  }

  export type AppointmentLogUncheckedCreateWithoutUserInput = {
    id?: number
    appointmentId: number
    userName: string
    action: string
    details?: string | null
    createdAt?: Date | string
  }

  export type AppointmentLogCreateOrConnectWithoutUserInput = {
    where: AppointmentLogWhereUniqueInput
    create: XOR<AppointmentLogCreateWithoutUserInput, AppointmentLogUncheckedCreateWithoutUserInput>
  }

  export type AppointmentLogCreateManyUserInputEnvelope = {
    data: AppointmentLogCreateManyUserInput | AppointmentLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ContactRequestCreateWithoutProcessorInput = {
    name: string
    email: string
    phone?: string | null
    service: string
    message: string
    status?: string
    ipAddress?: string | null
    source?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: RequestNoteCreateNestedManyWithoutRequestInput
    logs?: RequestLogCreateNestedManyWithoutRequestInput
    requestData?: RequestDataCreateNestedManyWithoutRequestInput
    customer?: CustomerCreateNestedOneWithoutContactRequestsInput
    appointment?: AppointmentCreateNestedOneWithoutContactRequestsInput
  }

  export type ContactRequestUncheckedCreateWithoutProcessorInput = {
    id?: number
    name: string
    email: string
    phone?: string | null
    service: string
    message: string
    status?: string
    customerId?: number | null
    appointmentId?: number | null
    ipAddress?: string | null
    source?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: RequestNoteUncheckedCreateNestedManyWithoutRequestInput
    logs?: RequestLogUncheckedCreateNestedManyWithoutRequestInput
    requestData?: RequestDataUncheckedCreateNestedManyWithoutRequestInput
  }

  export type ContactRequestCreateOrConnectWithoutProcessorInput = {
    where: ContactRequestWhereUniqueInput
    create: XOR<ContactRequestCreateWithoutProcessorInput, ContactRequestUncheckedCreateWithoutProcessorInput>
  }

  export type ContactRequestCreateManyProcessorInputEnvelope = {
    data: ContactRequestCreateManyProcessorInput | ContactRequestCreateManyProcessorInput[]
    skipDuplicates?: boolean
  }

  export type RequestNoteCreateWithoutUserInput = {
    userName: string
    text: string
    createdAt?: Date | string
    request: ContactRequestCreateNestedOneWithoutNotesInput
  }

  export type RequestNoteUncheckedCreateWithoutUserInput = {
    id?: number
    requestId: number
    userName: string
    text: string
    createdAt?: Date | string
  }

  export type RequestNoteCreateOrConnectWithoutUserInput = {
    where: RequestNoteWhereUniqueInput
    create: XOR<RequestNoteCreateWithoutUserInput, RequestNoteUncheckedCreateWithoutUserInput>
  }

  export type RequestNoteCreateManyUserInputEnvelope = {
    data: RequestNoteCreateManyUserInput | RequestNoteCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RequestLogCreateWithoutUserInput = {
    userName: string
    action: string
    details?: string | null
    createdAt?: Date | string
    request: ContactRequestCreateNestedOneWithoutLogsInput
  }

  export type RequestLogUncheckedCreateWithoutUserInput = {
    id?: number
    requestId: number
    userName: string
    action: string
    details?: string | null
    createdAt?: Date | string
  }

  export type RequestLogCreateOrConnectWithoutUserInput = {
    where: RequestLogWhereUniqueInput
    create: XOR<RequestLogCreateWithoutUserInput, RequestLogUncheckedCreateWithoutUserInput>
  }

  export type RequestLogCreateManyUserInputEnvelope = {
    data: RequestLogCreateManyUserInput | RequestLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserPermissionCreateWithoutUserInput = {
    grantedAt?: Date | string
    grantedBy?: number | null
    permission: PermissionCreateNestedOneWithoutUsersInput
  }

  export type UserPermissionUncheckedCreateWithoutUserInput = {
    id?: number
    permissionId: number
    grantedAt?: Date | string
    grantedBy?: number | null
  }

  export type UserPermissionCreateOrConnectWithoutUserInput = {
    where: UserPermissionWhereUniqueInput
    create: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput>
  }

  export type UserPermissionCreateManyUserInputEnvelope = {
    data: UserPermissionCreateManyUserInput | UserPermissionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FileCreateWithoutUserProfilesInput = {
    filename: string
    originalName: string
    mimeType: string
    path: string
    size: number
    type?: string
    uploadedAt?: Date | string
    uploadedBy?: number | null
    description?: string | null
    isDeleted?: boolean
    deletedAt?: Date | string | null
  }

  export type FileUncheckedCreateWithoutUserProfilesInput = {
    id?: number
    filename: string
    originalName: string
    mimeType: string
    path: string
    size: number
    type?: string
    uploadedAt?: Date | string
    uploadedBy?: number | null
    description?: string | null
    isDeleted?: boolean
    deletedAt?: Date | string | null
  }

  export type FileCreateOrConnectWithoutUserProfilesInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutUserProfilesInput, FileUncheckedCreateWithoutUserProfilesInput>
  }

  export type RequestDataCreateWithoutCreatedByInput = {
    category: string
    label: string
    order?: number
    dataType: string
    data: JsonNullValueInput | InputJsonValue
    isValid?: boolean
    processedBy?: string | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    request: ContactRequestCreateNestedOneWithoutRequestDataInput
    history?: RequestDataHistoryCreateNestedManyWithoutRequestDataInput
  }

  export type RequestDataUncheckedCreateWithoutCreatedByInput = {
    id?: number
    requestId: number
    category: string
    label: string
    order?: number
    dataType: string
    data: JsonNullValueInput | InputJsonValue
    isValid?: boolean
    processedBy?: string | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    history?: RequestDataHistoryUncheckedCreateNestedManyWithoutRequestDataInput
  }

  export type RequestDataCreateOrConnectWithoutCreatedByInput = {
    where: RequestDataWhereUniqueInput
    create: XOR<RequestDataCreateWithoutCreatedByInput, RequestDataUncheckedCreateWithoutCreatedByInput>
  }

  export type RequestDataCreateManyCreatedByInputEnvelope = {
    data: RequestDataCreateManyCreatedByInput | RequestDataCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type RequestDataHistoryCreateWithoutUserInput = {
    data: JsonNullValueInput | InputJsonValue
    changedBy?: string | null
    changeReason?: string | null
    version: number
    createdAt?: Date | string
    requestData: RequestDataCreateNestedOneWithoutHistoryInput
  }

  export type RequestDataHistoryUncheckedCreateWithoutUserInput = {
    id?: number
    requestDataId: number
    data: JsonNullValueInput | InputJsonValue
    changedBy?: string | null
    changeReason?: string | null
    version: number
    createdAt?: Date | string
  }

  export type RequestDataHistoryCreateOrConnectWithoutUserInput = {
    where: RequestDataHistoryWhereUniqueInput
    create: XOR<RequestDataHistoryCreateWithoutUserInput, RequestDataHistoryUncheckedCreateWithoutUserInput>
  }

  export type RequestDataHistoryCreateManyUserInputEnvelope = {
    data: RequestDataHistoryCreateManyUserInput | RequestDataHistoryCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserSettingsUpsertWithoutUserInput = {
    update: XOR<UserSettingsUpdateWithoutUserInput, UserSettingsUncheckedUpdateWithoutUserInput>
    create: XOR<UserSettingsCreateWithoutUserInput, UserSettingsUncheckedCreateWithoutUserInput>
    where?: UserSettingsWhereInput
  }

  export type UserSettingsUpdateToOneWithWhereWithoutUserInput = {
    where?: UserSettingsWhereInput
    data: XOR<UserSettingsUpdateWithoutUserInput, UserSettingsUncheckedUpdateWithoutUserInput>
  }

  export type UserSettingsUpdateWithoutUserInput = {
    darkMode?: BoolFieldUpdateOperationsInput | boolean
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    language?: StringFieldUpdateOperationsInput | string
    notificationInterval?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSettingsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    darkMode?: BoolFieldUpdateOperationsInput | boolean
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    language?: StringFieldUpdateOperationsInput | string
    notificationInterval?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserActivityUpsertWithWhereUniqueWithoutUserInput = {
    where: UserActivityWhereUniqueInput
    update: XOR<UserActivityUpdateWithoutUserInput, UserActivityUncheckedUpdateWithoutUserInput>
    create: XOR<UserActivityCreateWithoutUserInput, UserActivityUncheckedCreateWithoutUserInput>
  }

  export type UserActivityUpdateWithWhereUniqueWithoutUserInput = {
    where: UserActivityWhereUniqueInput
    data: XOR<UserActivityUpdateWithoutUserInput, UserActivityUncheckedUpdateWithoutUserInput>
  }

  export type UserActivityUpdateManyWithWhereWithoutUserInput = {
    where: UserActivityScalarWhereInput
    data: XOR<UserActivityUpdateManyMutationInput, UserActivityUncheckedUpdateManyWithoutUserInput>
  }

  export type UserActivityScalarWhereInput = {
    AND?: UserActivityScalarWhereInput | UserActivityScalarWhereInput[]
    OR?: UserActivityScalarWhereInput[]
    NOT?: UserActivityScalarWhereInput | UserActivityScalarWhereInput[]
    id?: IntFilter<"UserActivity"> | number
    userId?: IntFilter<"UserActivity"> | number
    timestamp?: DateTimeNullableFilter<"UserActivity"> | Date | string | null
    activity?: StringFilter<"UserActivity"> | string
    details?: StringNullableFilter<"UserActivity"> | string | null
    ipAddress?: StringNullableFilter<"UserActivity"> | string | null
  }

  export type AppointmentUpsertWithWhereUniqueWithoutCreatorInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutCreatorInput, AppointmentUncheckedUpdateWithoutCreatorInput>
    create: XOR<AppointmentCreateWithoutCreatorInput, AppointmentUncheckedCreateWithoutCreatorInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutCreatorInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutCreatorInput, AppointmentUncheckedUpdateWithoutCreatorInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutCreatorInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutCreatorInput>
  }

  export type AppointmentScalarWhereInput = {
    AND?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
    OR?: AppointmentScalarWhereInput[]
    NOT?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
    id?: IntFilter<"Appointment"> | number
    title?: StringFilter<"Appointment"> | string
    customerId?: IntNullableFilter<"Appointment"> | number | null
    appointmentDate?: DateTimeFilter<"Appointment"> | Date | string
    duration?: IntNullableFilter<"Appointment"> | number | null
    location?: StringNullableFilter<"Appointment"> | string | null
    description?: StringNullableFilter<"Appointment"> | string | null
    status?: StringFilter<"Appointment"> | string
    createdBy?: IntNullableFilter<"Appointment"> | number | null
    createdAt?: DateTimeFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeFilter<"Appointment"> | Date | string
  }

  export type RefreshTokenUpsertWithWhereUniqueWithoutUserInput = {
    where: RefreshTokenWhereUniqueInput
    update: XOR<RefreshTokenUpdateWithoutUserInput, RefreshTokenUncheckedUpdateWithoutUserInput>
    create: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput>
  }

  export type RefreshTokenUpdateWithWhereUniqueWithoutUserInput = {
    where: RefreshTokenWhereUniqueInput
    data: XOR<RefreshTokenUpdateWithoutUserInput, RefreshTokenUncheckedUpdateWithoutUserInput>
  }

  export type RefreshTokenUpdateManyWithWhereWithoutUserInput = {
    where: RefreshTokenScalarWhereInput
    data: XOR<RefreshTokenUpdateManyMutationInput, RefreshTokenUncheckedUpdateManyWithoutUserInput>
  }

  export type RefreshTokenScalarWhereInput = {
    AND?: RefreshTokenScalarWhereInput | RefreshTokenScalarWhereInput[]
    OR?: RefreshTokenScalarWhereInput[]
    NOT?: RefreshTokenScalarWhereInput | RefreshTokenScalarWhereInput[]
    token?: StringFilter<"RefreshToken"> | string
    userId?: IntFilter<"RefreshToken"> | number
    expiresAt?: DateTimeFilter<"RefreshToken"> | Date | string
    createdAt?: DateTimeFilter<"RefreshToken"> | Date | string
    createdByIp?: StringNullableFilter<"RefreshToken"> | string | null
    isRevoked?: BoolFilter<"RefreshToken"> | boolean
    revokedAt?: DateTimeNullableFilter<"RefreshToken"> | Date | string | null
    revokedByIp?: StringNullableFilter<"RefreshToken"> | string | null
    replacedByToken?: StringNullableFilter<"RefreshToken"> | string | null
  }

  export type CustomerLogUpsertWithWhereUniqueWithoutUserInput = {
    where: CustomerLogWhereUniqueInput
    update: XOR<CustomerLogUpdateWithoutUserInput, CustomerLogUncheckedUpdateWithoutUserInput>
    create: XOR<CustomerLogCreateWithoutUserInput, CustomerLogUncheckedCreateWithoutUserInput>
  }

  export type CustomerLogUpdateWithWhereUniqueWithoutUserInput = {
    where: CustomerLogWhereUniqueInput
    data: XOR<CustomerLogUpdateWithoutUserInput, CustomerLogUncheckedUpdateWithoutUserInput>
  }

  export type CustomerLogUpdateManyWithWhereWithoutUserInput = {
    where: CustomerLogScalarWhereInput
    data: XOR<CustomerLogUpdateManyMutationInput, CustomerLogUncheckedUpdateManyWithoutUserInput>
  }

  export type CustomerLogScalarWhereInput = {
    AND?: CustomerLogScalarWhereInput | CustomerLogScalarWhereInput[]
    OR?: CustomerLogScalarWhereInput[]
    NOT?: CustomerLogScalarWhereInput | CustomerLogScalarWhereInput[]
    id?: IntFilter<"CustomerLog"> | number
    customerId?: IntFilter<"CustomerLog"> | number
    userId?: IntNullableFilter<"CustomerLog"> | number | null
    userName?: StringFilter<"CustomerLog"> | string
    action?: StringFilter<"CustomerLog"> | string
    details?: StringNullableFilter<"CustomerLog"> | string | null
    createdAt?: DateTimeFilter<"CustomerLog"> | Date | string
  }

  export type AppointmentNoteUpsertWithWhereUniqueWithoutUserInput = {
    where: AppointmentNoteWhereUniqueInput
    update: XOR<AppointmentNoteUpdateWithoutUserInput, AppointmentNoteUncheckedUpdateWithoutUserInput>
    create: XOR<AppointmentNoteCreateWithoutUserInput, AppointmentNoteUncheckedCreateWithoutUserInput>
  }

  export type AppointmentNoteUpdateWithWhereUniqueWithoutUserInput = {
    where: AppointmentNoteWhereUniqueInput
    data: XOR<AppointmentNoteUpdateWithoutUserInput, AppointmentNoteUncheckedUpdateWithoutUserInput>
  }

  export type AppointmentNoteUpdateManyWithWhereWithoutUserInput = {
    where: AppointmentNoteScalarWhereInput
    data: XOR<AppointmentNoteUpdateManyMutationInput, AppointmentNoteUncheckedUpdateManyWithoutUserInput>
  }

  export type AppointmentNoteScalarWhereInput = {
    AND?: AppointmentNoteScalarWhereInput | AppointmentNoteScalarWhereInput[]
    OR?: AppointmentNoteScalarWhereInput[]
    NOT?: AppointmentNoteScalarWhereInput | AppointmentNoteScalarWhereInput[]
    id?: IntFilter<"AppointmentNote"> | number
    appointmentId?: IntFilter<"AppointmentNote"> | number
    userId?: IntFilter<"AppointmentNote"> | number
    userName?: StringFilter<"AppointmentNote"> | string
    text?: StringFilter<"AppointmentNote"> | string
    createdAt?: DateTimeFilter<"AppointmentNote"> | Date | string
  }

  export type AppointmentLogUpsertWithWhereUniqueWithoutUserInput = {
    where: AppointmentLogWhereUniqueInput
    update: XOR<AppointmentLogUpdateWithoutUserInput, AppointmentLogUncheckedUpdateWithoutUserInput>
    create: XOR<AppointmentLogCreateWithoutUserInput, AppointmentLogUncheckedCreateWithoutUserInput>
  }

  export type AppointmentLogUpdateWithWhereUniqueWithoutUserInput = {
    where: AppointmentLogWhereUniqueInput
    data: XOR<AppointmentLogUpdateWithoutUserInput, AppointmentLogUncheckedUpdateWithoutUserInput>
  }

  export type AppointmentLogUpdateManyWithWhereWithoutUserInput = {
    where: AppointmentLogScalarWhereInput
    data: XOR<AppointmentLogUpdateManyMutationInput, AppointmentLogUncheckedUpdateManyWithoutUserInput>
  }

  export type AppointmentLogScalarWhereInput = {
    AND?: AppointmentLogScalarWhereInput | AppointmentLogScalarWhereInput[]
    OR?: AppointmentLogScalarWhereInput[]
    NOT?: AppointmentLogScalarWhereInput | AppointmentLogScalarWhereInput[]
    id?: IntFilter<"AppointmentLog"> | number
    appointmentId?: IntFilter<"AppointmentLog"> | number
    userId?: IntFilter<"AppointmentLog"> | number
    userName?: StringFilter<"AppointmentLog"> | string
    action?: StringFilter<"AppointmentLog"> | string
    details?: StringNullableFilter<"AppointmentLog"> | string | null
    createdAt?: DateTimeFilter<"AppointmentLog"> | Date | string
  }

  export type ContactRequestUpsertWithWhereUniqueWithoutProcessorInput = {
    where: ContactRequestWhereUniqueInput
    update: XOR<ContactRequestUpdateWithoutProcessorInput, ContactRequestUncheckedUpdateWithoutProcessorInput>
    create: XOR<ContactRequestCreateWithoutProcessorInput, ContactRequestUncheckedCreateWithoutProcessorInput>
  }

  export type ContactRequestUpdateWithWhereUniqueWithoutProcessorInput = {
    where: ContactRequestWhereUniqueInput
    data: XOR<ContactRequestUpdateWithoutProcessorInput, ContactRequestUncheckedUpdateWithoutProcessorInput>
  }

  export type ContactRequestUpdateManyWithWhereWithoutProcessorInput = {
    where: ContactRequestScalarWhereInput
    data: XOR<ContactRequestUpdateManyMutationInput, ContactRequestUncheckedUpdateManyWithoutProcessorInput>
  }

  export type ContactRequestScalarWhereInput = {
    AND?: ContactRequestScalarWhereInput | ContactRequestScalarWhereInput[]
    OR?: ContactRequestScalarWhereInput[]
    NOT?: ContactRequestScalarWhereInput | ContactRequestScalarWhereInput[]
    id?: IntFilter<"ContactRequest"> | number
    name?: StringFilter<"ContactRequest"> | string
    email?: StringFilter<"ContactRequest"> | string
    phone?: StringNullableFilter<"ContactRequest"> | string | null
    service?: StringFilter<"ContactRequest"> | string
    message?: StringFilter<"ContactRequest"> | string
    status?: StringFilter<"ContactRequest"> | string
    processorId?: IntNullableFilter<"ContactRequest"> | number | null
    customerId?: IntNullableFilter<"ContactRequest"> | number | null
    appointmentId?: IntNullableFilter<"ContactRequest"> | number | null
    ipAddress?: StringNullableFilter<"ContactRequest"> | string | null
    source?: StringNullableFilter<"ContactRequest"> | string | null
    metadata?: JsonNullableFilter<"ContactRequest">
    createdAt?: DateTimeFilter<"ContactRequest"> | Date | string
    updatedAt?: DateTimeFilter<"ContactRequest"> | Date | string
  }

  export type RequestNoteUpsertWithWhereUniqueWithoutUserInput = {
    where: RequestNoteWhereUniqueInput
    update: XOR<RequestNoteUpdateWithoutUserInput, RequestNoteUncheckedUpdateWithoutUserInput>
    create: XOR<RequestNoteCreateWithoutUserInput, RequestNoteUncheckedCreateWithoutUserInput>
  }

  export type RequestNoteUpdateWithWhereUniqueWithoutUserInput = {
    where: RequestNoteWhereUniqueInput
    data: XOR<RequestNoteUpdateWithoutUserInput, RequestNoteUncheckedUpdateWithoutUserInput>
  }

  export type RequestNoteUpdateManyWithWhereWithoutUserInput = {
    where: RequestNoteScalarWhereInput
    data: XOR<RequestNoteUpdateManyMutationInput, RequestNoteUncheckedUpdateManyWithoutUserInput>
  }

  export type RequestNoteScalarWhereInput = {
    AND?: RequestNoteScalarWhereInput | RequestNoteScalarWhereInput[]
    OR?: RequestNoteScalarWhereInput[]
    NOT?: RequestNoteScalarWhereInput | RequestNoteScalarWhereInput[]
    id?: IntFilter<"RequestNote"> | number
    requestId?: IntFilter<"RequestNote"> | number
    userId?: IntFilter<"RequestNote"> | number
    userName?: StringFilter<"RequestNote"> | string
    text?: StringFilter<"RequestNote"> | string
    createdAt?: DateTimeFilter<"RequestNote"> | Date | string
  }

  export type RequestLogUpsertWithWhereUniqueWithoutUserInput = {
    where: RequestLogWhereUniqueInput
    update: XOR<RequestLogUpdateWithoutUserInput, RequestLogUncheckedUpdateWithoutUserInput>
    create: XOR<RequestLogCreateWithoutUserInput, RequestLogUncheckedCreateWithoutUserInput>
  }

  export type RequestLogUpdateWithWhereUniqueWithoutUserInput = {
    where: RequestLogWhereUniqueInput
    data: XOR<RequestLogUpdateWithoutUserInput, RequestLogUncheckedUpdateWithoutUserInput>
  }

  export type RequestLogUpdateManyWithWhereWithoutUserInput = {
    where: RequestLogScalarWhereInput
    data: XOR<RequestLogUpdateManyMutationInput, RequestLogUncheckedUpdateManyWithoutUserInput>
  }

  export type RequestLogScalarWhereInput = {
    AND?: RequestLogScalarWhereInput | RequestLogScalarWhereInput[]
    OR?: RequestLogScalarWhereInput[]
    NOT?: RequestLogScalarWhereInput | RequestLogScalarWhereInput[]
    id?: IntFilter<"RequestLog"> | number
    requestId?: IntFilter<"RequestLog"> | number
    userId?: IntFilter<"RequestLog"> | number
    userName?: StringFilter<"RequestLog"> | string
    action?: StringFilter<"RequestLog"> | string
    details?: StringNullableFilter<"RequestLog"> | string | null
    createdAt?: DateTimeFilter<"RequestLog"> | Date | string
  }

  export type UserPermissionUpsertWithWhereUniqueWithoutUserInput = {
    where: UserPermissionWhereUniqueInput
    update: XOR<UserPermissionUpdateWithoutUserInput, UserPermissionUncheckedUpdateWithoutUserInput>
    create: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput>
  }

  export type UserPermissionUpdateWithWhereUniqueWithoutUserInput = {
    where: UserPermissionWhereUniqueInput
    data: XOR<UserPermissionUpdateWithoutUserInput, UserPermissionUncheckedUpdateWithoutUserInput>
  }

  export type UserPermissionUpdateManyWithWhereWithoutUserInput = {
    where: UserPermissionScalarWhereInput
    data: XOR<UserPermissionUpdateManyMutationInput, UserPermissionUncheckedUpdateManyWithoutUserInput>
  }

  export type UserPermissionScalarWhereInput = {
    AND?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
    OR?: UserPermissionScalarWhereInput[]
    NOT?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
    id?: IntFilter<"UserPermission"> | number
    userId?: IntFilter<"UserPermission"> | number
    permissionId?: IntFilter<"UserPermission"> | number
    grantedAt?: DateTimeFilter<"UserPermission"> | Date | string
    grantedBy?: IntNullableFilter<"UserPermission"> | number | null
  }

  export type FileUpsertWithoutUserProfilesInput = {
    update: XOR<FileUpdateWithoutUserProfilesInput, FileUncheckedUpdateWithoutUserProfilesInput>
    create: XOR<FileCreateWithoutUserProfilesInput, FileUncheckedCreateWithoutUserProfilesInput>
    where?: FileWhereInput
  }

  export type FileUpdateToOneWithWhereWithoutUserProfilesInput = {
    where?: FileWhereInput
    data: XOR<FileUpdateWithoutUserProfilesInput, FileUncheckedUpdateWithoutUserProfilesInput>
  }

  export type FileUpdateWithoutUserProfilesInput = {
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedBy?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FileUncheckedUpdateWithoutUserProfilesInput = {
    id?: IntFieldUpdateOperationsInput | number
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedBy?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RequestDataUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: RequestDataWhereUniqueInput
    update: XOR<RequestDataUpdateWithoutCreatedByInput, RequestDataUncheckedUpdateWithoutCreatedByInput>
    create: XOR<RequestDataCreateWithoutCreatedByInput, RequestDataUncheckedCreateWithoutCreatedByInput>
  }

  export type RequestDataUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: RequestDataWhereUniqueInput
    data: XOR<RequestDataUpdateWithoutCreatedByInput, RequestDataUncheckedUpdateWithoutCreatedByInput>
  }

  export type RequestDataUpdateManyWithWhereWithoutCreatedByInput = {
    where: RequestDataScalarWhereInput
    data: XOR<RequestDataUpdateManyMutationInput, RequestDataUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type RequestDataScalarWhereInput = {
    AND?: RequestDataScalarWhereInput | RequestDataScalarWhereInput[]
    OR?: RequestDataScalarWhereInput[]
    NOT?: RequestDataScalarWhereInput | RequestDataScalarWhereInput[]
    id?: IntFilter<"RequestData"> | number
    requestId?: IntFilter<"RequestData"> | number
    category?: StringFilter<"RequestData"> | string
    label?: StringFilter<"RequestData"> | string
    order?: IntFilter<"RequestData"> | number
    dataType?: StringFilter<"RequestData"> | string
    data?: JsonFilter<"RequestData">
    isValid?: BoolFilter<"RequestData"> | boolean
    processedBy?: StringNullableFilter<"RequestData"> | string | null
    version?: IntFilter<"RequestData"> | number
    createdAt?: DateTimeFilter<"RequestData"> | Date | string
    updatedAt?: DateTimeFilter<"RequestData"> | Date | string
    createdById?: IntNullableFilter<"RequestData"> | number | null
  }

  export type RequestDataHistoryUpsertWithWhereUniqueWithoutUserInput = {
    where: RequestDataHistoryWhereUniqueInput
    update: XOR<RequestDataHistoryUpdateWithoutUserInput, RequestDataHistoryUncheckedUpdateWithoutUserInput>
    create: XOR<RequestDataHistoryCreateWithoutUserInput, RequestDataHistoryUncheckedCreateWithoutUserInput>
  }

  export type RequestDataHistoryUpdateWithWhereUniqueWithoutUserInput = {
    where: RequestDataHistoryWhereUniqueInput
    data: XOR<RequestDataHistoryUpdateWithoutUserInput, RequestDataHistoryUncheckedUpdateWithoutUserInput>
  }

  export type RequestDataHistoryUpdateManyWithWhereWithoutUserInput = {
    where: RequestDataHistoryScalarWhereInput
    data: XOR<RequestDataHistoryUpdateManyMutationInput, RequestDataHistoryUncheckedUpdateManyWithoutUserInput>
  }

  export type RequestDataHistoryScalarWhereInput = {
    AND?: RequestDataHistoryScalarWhereInput | RequestDataHistoryScalarWhereInput[]
    OR?: RequestDataHistoryScalarWhereInput[]
    NOT?: RequestDataHistoryScalarWhereInput | RequestDataHistoryScalarWhereInput[]
    id?: IntFilter<"RequestDataHistory"> | number
    requestDataId?: IntFilter<"RequestDataHistory"> | number
    data?: JsonFilter<"RequestDataHistory">
    changedBy?: StringNullableFilter<"RequestDataHistory"> | string | null
    changeReason?: StringNullableFilter<"RequestDataHistory"> | string | null
    version?: IntFilter<"RequestDataHistory"> | number
    createdAt?: DateTimeFilter<"RequestDataHistory"> | Date | string
    userId?: IntNullableFilter<"RequestDataHistory"> | number | null
  }

  export type UserCreateWithoutSettingsInput = {
    name: string
    email: string
    password: string
    role?: string
    phone?: string | null
    status?: string
    profilePicture?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    activities?: UserActivityCreateNestedManyWithoutUserInput
    appointments?: AppointmentCreateNestedManyWithoutCreatorInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    customerLogs?: CustomerLogCreateNestedManyWithoutUserInput
    appointmentNotes?: AppointmentNoteCreateNestedManyWithoutUserInput
    appointmentLogs?: AppointmentLogCreateNestedManyWithoutUserInput
    contactRequests?: ContactRequestCreateNestedManyWithoutProcessorInput
    requestNotes?: RequestNoteCreateNestedManyWithoutUserInput
    requestLogs?: RequestLogCreateNestedManyWithoutUserInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    profilePictureFile?: FileCreateNestedOneWithoutUserProfilesInput
    requestData?: RequestDataCreateNestedManyWithoutCreatedByInput
    requestDataHistory?: RequestDataHistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSettingsInput = {
    id?: number
    name: string
    email: string
    password: string
    role?: string
    phone?: string | null
    status?: string
    profilePicture?: string | null
    profilePictureId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutCreatorInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    customerLogs?: CustomerLogUncheckedCreateNestedManyWithoutUserInput
    appointmentNotes?: AppointmentNoteUncheckedCreateNestedManyWithoutUserInput
    appointmentLogs?: AppointmentLogUncheckedCreateNestedManyWithoutUserInput
    contactRequests?: ContactRequestUncheckedCreateNestedManyWithoutProcessorInput
    requestNotes?: RequestNoteUncheckedCreateNestedManyWithoutUserInput
    requestLogs?: RequestLogUncheckedCreateNestedManyWithoutUserInput
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    requestData?: RequestDataUncheckedCreateNestedManyWithoutCreatedByInput
    requestDataHistory?: RequestDataHistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSettingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSettingsInput, UserUncheckedCreateWithoutSettingsInput>
  }

  export type UserUpsertWithoutSettingsInput = {
    update: XOR<UserUpdateWithoutSettingsInput, UserUncheckedUpdateWithoutSettingsInput>
    create: XOR<UserCreateWithoutSettingsInput, UserUncheckedCreateWithoutSettingsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSettingsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSettingsInput, UserUncheckedUpdateWithoutSettingsInput>
  }

  export type UserUpdateWithoutSettingsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    appointments?: AppointmentUpdateManyWithoutCreatorNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    customerLogs?: CustomerLogUpdateManyWithoutUserNestedInput
    appointmentNotes?: AppointmentNoteUpdateManyWithoutUserNestedInput
    appointmentLogs?: AppointmentLogUpdateManyWithoutUserNestedInput
    contactRequests?: ContactRequestUpdateManyWithoutProcessorNestedInput
    requestNotes?: RequestNoteUpdateManyWithoutUserNestedInput
    requestLogs?: RequestLogUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    profilePictureFile?: FileUpdateOneWithoutUserProfilesNestedInput
    requestData?: RequestDataUpdateManyWithoutCreatedByNestedInput
    requestDataHistory?: RequestDataHistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSettingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutCreatorNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    customerLogs?: CustomerLogUncheckedUpdateManyWithoutUserNestedInput
    appointmentNotes?: AppointmentNoteUncheckedUpdateManyWithoutUserNestedInput
    appointmentLogs?: AppointmentLogUncheckedUpdateManyWithoutUserNestedInput
    contactRequests?: ContactRequestUncheckedUpdateManyWithoutProcessorNestedInput
    requestNotes?: RequestNoteUncheckedUpdateManyWithoutUserNestedInput
    requestLogs?: RequestLogUncheckedUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    requestData?: RequestDataUncheckedUpdateManyWithoutCreatedByNestedInput
    requestDataHistory?: RequestDataHistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutActivitiesInput = {
    name: string
    email: string
    password: string
    role?: string
    phone?: string | null
    status?: string
    profilePicture?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    appointments?: AppointmentCreateNestedManyWithoutCreatorInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    customerLogs?: CustomerLogCreateNestedManyWithoutUserInput
    appointmentNotes?: AppointmentNoteCreateNestedManyWithoutUserInput
    appointmentLogs?: AppointmentLogCreateNestedManyWithoutUserInput
    contactRequests?: ContactRequestCreateNestedManyWithoutProcessorInput
    requestNotes?: RequestNoteCreateNestedManyWithoutUserInput
    requestLogs?: RequestLogCreateNestedManyWithoutUserInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    profilePictureFile?: FileCreateNestedOneWithoutUserProfilesInput
    requestData?: RequestDataCreateNestedManyWithoutCreatedByInput
    requestDataHistory?: RequestDataHistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutActivitiesInput = {
    id?: number
    name: string
    email: string
    password: string
    role?: string
    phone?: string | null
    status?: string
    profilePicture?: string | null
    profilePictureId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutCreatorInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    customerLogs?: CustomerLogUncheckedCreateNestedManyWithoutUserInput
    appointmentNotes?: AppointmentNoteUncheckedCreateNestedManyWithoutUserInput
    appointmentLogs?: AppointmentLogUncheckedCreateNestedManyWithoutUserInput
    contactRequests?: ContactRequestUncheckedCreateNestedManyWithoutProcessorInput
    requestNotes?: RequestNoteUncheckedCreateNestedManyWithoutUserInput
    requestLogs?: RequestLogUncheckedCreateNestedManyWithoutUserInput
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    requestData?: RequestDataUncheckedCreateNestedManyWithoutCreatedByInput
    requestDataHistory?: RequestDataHistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutActivitiesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutActivitiesInput, UserUncheckedCreateWithoutActivitiesInput>
  }

  export type UserUpsertWithoutActivitiesInput = {
    update: XOR<UserUpdateWithoutActivitiesInput, UserUncheckedUpdateWithoutActivitiesInput>
    create: XOR<UserCreateWithoutActivitiesInput, UserUncheckedCreateWithoutActivitiesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutActivitiesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutActivitiesInput, UserUncheckedUpdateWithoutActivitiesInput>
  }

  export type UserUpdateWithoutActivitiesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    appointments?: AppointmentUpdateManyWithoutCreatorNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    customerLogs?: CustomerLogUpdateManyWithoutUserNestedInput
    appointmentNotes?: AppointmentNoteUpdateManyWithoutUserNestedInput
    appointmentLogs?: AppointmentLogUpdateManyWithoutUserNestedInput
    contactRequests?: ContactRequestUpdateManyWithoutProcessorNestedInput
    requestNotes?: RequestNoteUpdateManyWithoutUserNestedInput
    requestLogs?: RequestLogUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    profilePictureFile?: FileUpdateOneWithoutUserProfilesNestedInput
    requestData?: RequestDataUpdateManyWithoutCreatedByNestedInput
    requestDataHistory?: RequestDataHistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutActivitiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutCreatorNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    customerLogs?: CustomerLogUncheckedUpdateManyWithoutUserNestedInput
    appointmentNotes?: AppointmentNoteUncheckedUpdateManyWithoutUserNestedInput
    appointmentLogs?: AppointmentLogUncheckedUpdateManyWithoutUserNestedInput
    contactRequests?: ContactRequestUncheckedUpdateManyWithoutProcessorNestedInput
    requestNotes?: RequestNoteUncheckedUpdateManyWithoutUserNestedInput
    requestLogs?: RequestLogUncheckedUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    requestData?: RequestDataUncheckedUpdateManyWithoutCreatedByNestedInput
    requestDataHistory?: RequestDataHistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserPermissionCreateWithoutPermissionInput = {
    grantedAt?: Date | string
    grantedBy?: number | null
    user: UserCreateNestedOneWithoutPermissionsInput
  }

  export type UserPermissionUncheckedCreateWithoutPermissionInput = {
    id?: number
    userId: number
    grantedAt?: Date | string
    grantedBy?: number | null
  }

  export type UserPermissionCreateOrConnectWithoutPermissionInput = {
    where: UserPermissionWhereUniqueInput
    create: XOR<UserPermissionCreateWithoutPermissionInput, UserPermissionUncheckedCreateWithoutPermissionInput>
  }

  export type UserPermissionCreateManyPermissionInputEnvelope = {
    data: UserPermissionCreateManyPermissionInput | UserPermissionCreateManyPermissionInput[]
    skipDuplicates?: boolean
  }

  export type UserPermissionUpsertWithWhereUniqueWithoutPermissionInput = {
    where: UserPermissionWhereUniqueInput
    update: XOR<UserPermissionUpdateWithoutPermissionInput, UserPermissionUncheckedUpdateWithoutPermissionInput>
    create: XOR<UserPermissionCreateWithoutPermissionInput, UserPermissionUncheckedCreateWithoutPermissionInput>
  }

  export type UserPermissionUpdateWithWhereUniqueWithoutPermissionInput = {
    where: UserPermissionWhereUniqueInput
    data: XOR<UserPermissionUpdateWithoutPermissionInput, UserPermissionUncheckedUpdateWithoutPermissionInput>
  }

  export type UserPermissionUpdateManyWithWhereWithoutPermissionInput = {
    where: UserPermissionScalarWhereInput
    data: XOR<UserPermissionUpdateManyMutationInput, UserPermissionUncheckedUpdateManyWithoutPermissionInput>
  }

  export type UserCreateWithoutPermissionsInput = {
    name: string
    email: string
    password: string
    role?: string
    phone?: string | null
    status?: string
    profilePicture?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    appointments?: AppointmentCreateNestedManyWithoutCreatorInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    customerLogs?: CustomerLogCreateNestedManyWithoutUserInput
    appointmentNotes?: AppointmentNoteCreateNestedManyWithoutUserInput
    appointmentLogs?: AppointmentLogCreateNestedManyWithoutUserInput
    contactRequests?: ContactRequestCreateNestedManyWithoutProcessorInput
    requestNotes?: RequestNoteCreateNestedManyWithoutUserInput
    requestLogs?: RequestLogCreateNestedManyWithoutUserInput
    profilePictureFile?: FileCreateNestedOneWithoutUserProfilesInput
    requestData?: RequestDataCreateNestedManyWithoutCreatedByInput
    requestDataHistory?: RequestDataHistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPermissionsInput = {
    id?: number
    name: string
    email: string
    password: string
    role?: string
    phone?: string | null
    status?: string
    profilePicture?: string | null
    profilePictureId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutCreatorInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    customerLogs?: CustomerLogUncheckedCreateNestedManyWithoutUserInput
    appointmentNotes?: AppointmentNoteUncheckedCreateNestedManyWithoutUserInput
    appointmentLogs?: AppointmentLogUncheckedCreateNestedManyWithoutUserInput
    contactRequests?: ContactRequestUncheckedCreateNestedManyWithoutProcessorInput
    requestNotes?: RequestNoteUncheckedCreateNestedManyWithoutUserInput
    requestLogs?: RequestLogUncheckedCreateNestedManyWithoutUserInput
    requestData?: RequestDataUncheckedCreateNestedManyWithoutCreatedByInput
    requestDataHistory?: RequestDataHistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPermissionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPermissionsInput, UserUncheckedCreateWithoutPermissionsInput>
  }

  export type PermissionCreateWithoutUsersInput = {
    code: string
    name: string
    description: string
    category: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
  }

  export type PermissionUncheckedCreateWithoutUsersInput = {
    id?: number
    code: string
    name: string
    description: string
    category: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
  }

  export type PermissionCreateOrConnectWithoutUsersInput = {
    where: PermissionWhereUniqueInput
    create: XOR<PermissionCreateWithoutUsersInput, PermissionUncheckedCreateWithoutUsersInput>
  }

  export type UserUpsertWithoutPermissionsInput = {
    update: XOR<UserUpdateWithoutPermissionsInput, UserUncheckedUpdateWithoutPermissionsInput>
    create: XOR<UserCreateWithoutPermissionsInput, UserUncheckedCreateWithoutPermissionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPermissionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPermissionsInput, UserUncheckedUpdateWithoutPermissionsInput>
  }

  export type UserUpdateWithoutPermissionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    appointments?: AppointmentUpdateManyWithoutCreatorNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    customerLogs?: CustomerLogUpdateManyWithoutUserNestedInput
    appointmentNotes?: AppointmentNoteUpdateManyWithoutUserNestedInput
    appointmentLogs?: AppointmentLogUpdateManyWithoutUserNestedInput
    contactRequests?: ContactRequestUpdateManyWithoutProcessorNestedInput
    requestNotes?: RequestNoteUpdateManyWithoutUserNestedInput
    requestLogs?: RequestLogUpdateManyWithoutUserNestedInput
    profilePictureFile?: FileUpdateOneWithoutUserProfilesNestedInput
    requestData?: RequestDataUpdateManyWithoutCreatedByNestedInput
    requestDataHistory?: RequestDataHistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPermissionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutCreatorNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    customerLogs?: CustomerLogUncheckedUpdateManyWithoutUserNestedInput
    appointmentNotes?: AppointmentNoteUncheckedUpdateManyWithoutUserNestedInput
    appointmentLogs?: AppointmentLogUncheckedUpdateManyWithoutUserNestedInput
    contactRequests?: ContactRequestUncheckedUpdateManyWithoutProcessorNestedInput
    requestNotes?: RequestNoteUncheckedUpdateManyWithoutUserNestedInput
    requestLogs?: RequestLogUncheckedUpdateManyWithoutUserNestedInput
    requestData?: RequestDataUncheckedUpdateManyWithoutCreatedByNestedInput
    requestDataHistory?: RequestDataHistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PermissionUpsertWithoutUsersInput = {
    update: XOR<PermissionUpdateWithoutUsersInput, PermissionUncheckedUpdateWithoutUsersInput>
    create: XOR<PermissionCreateWithoutUsersInput, PermissionUncheckedCreateWithoutUsersInput>
    where?: PermissionWhereInput
  }

  export type PermissionUpdateToOneWithWhereWithoutUsersInput = {
    where?: PermissionWhereInput
    data: XOR<PermissionUpdateWithoutUsersInput, PermissionUncheckedUpdateWithoutUsersInput>
  }

  export type PermissionUpdateWithoutUsersInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PermissionUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserCreateWithoutRefreshTokensInput = {
    name: string
    email: string
    password: string
    role?: string
    phone?: string | null
    status?: string
    profilePicture?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    appointments?: AppointmentCreateNestedManyWithoutCreatorInput
    customerLogs?: CustomerLogCreateNestedManyWithoutUserInput
    appointmentNotes?: AppointmentNoteCreateNestedManyWithoutUserInput
    appointmentLogs?: AppointmentLogCreateNestedManyWithoutUserInput
    contactRequests?: ContactRequestCreateNestedManyWithoutProcessorInput
    requestNotes?: RequestNoteCreateNestedManyWithoutUserInput
    requestLogs?: RequestLogCreateNestedManyWithoutUserInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    profilePictureFile?: FileCreateNestedOneWithoutUserProfilesInput
    requestData?: RequestDataCreateNestedManyWithoutCreatedByInput
    requestDataHistory?: RequestDataHistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRefreshTokensInput = {
    id?: number
    name: string
    email: string
    password: string
    role?: string
    phone?: string | null
    status?: string
    profilePicture?: string | null
    profilePictureId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutCreatorInput
    customerLogs?: CustomerLogUncheckedCreateNestedManyWithoutUserInput
    appointmentNotes?: AppointmentNoteUncheckedCreateNestedManyWithoutUserInput
    appointmentLogs?: AppointmentLogUncheckedCreateNestedManyWithoutUserInput
    contactRequests?: ContactRequestUncheckedCreateNestedManyWithoutProcessorInput
    requestNotes?: RequestNoteUncheckedCreateNestedManyWithoutUserInput
    requestLogs?: RequestLogUncheckedCreateNestedManyWithoutUserInput
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    requestData?: RequestDataUncheckedCreateNestedManyWithoutCreatedByInput
    requestDataHistory?: RequestDataHistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRefreshTokensInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRefreshTokensInput, UserUncheckedCreateWithoutRefreshTokensInput>
  }

  export type UserUpsertWithoutRefreshTokensInput = {
    update: XOR<UserUpdateWithoutRefreshTokensInput, UserUncheckedUpdateWithoutRefreshTokensInput>
    create: XOR<UserCreateWithoutRefreshTokensInput, UserUncheckedCreateWithoutRefreshTokensInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRefreshTokensInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRefreshTokensInput, UserUncheckedUpdateWithoutRefreshTokensInput>
  }

  export type UserUpdateWithoutRefreshTokensInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    appointments?: AppointmentUpdateManyWithoutCreatorNestedInput
    customerLogs?: CustomerLogUpdateManyWithoutUserNestedInput
    appointmentNotes?: AppointmentNoteUpdateManyWithoutUserNestedInput
    appointmentLogs?: AppointmentLogUpdateManyWithoutUserNestedInput
    contactRequests?: ContactRequestUpdateManyWithoutProcessorNestedInput
    requestNotes?: RequestNoteUpdateManyWithoutUserNestedInput
    requestLogs?: RequestLogUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    profilePictureFile?: FileUpdateOneWithoutUserProfilesNestedInput
    requestData?: RequestDataUpdateManyWithoutCreatedByNestedInput
    requestDataHistory?: RequestDataHistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRefreshTokensInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutCreatorNestedInput
    customerLogs?: CustomerLogUncheckedUpdateManyWithoutUserNestedInput
    appointmentNotes?: AppointmentNoteUncheckedUpdateManyWithoutUserNestedInput
    appointmentLogs?: AppointmentLogUncheckedUpdateManyWithoutUserNestedInput
    contactRequests?: ContactRequestUncheckedUpdateManyWithoutProcessorNestedInput
    requestNotes?: RequestNoteUncheckedUpdateManyWithoutUserNestedInput
    requestLogs?: RequestLogUncheckedUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    requestData?: RequestDataUncheckedUpdateManyWithoutCreatedByNestedInput
    requestDataHistory?: RequestDataHistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AppointmentCreateWithoutCustomerInput = {
    title: string
    appointmentDate: Date | string
    duration?: number | null
    location?: string | null
    description?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    creator?: UserCreateNestedOneWithoutAppointmentsInput
    notes?: AppointmentNoteCreateNestedManyWithoutAppointmentInput
    logs?: AppointmentLogCreateNestedManyWithoutAppointmentInput
    contactRequests?: ContactRequestCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutCustomerInput = {
    id?: number
    title: string
    appointmentDate: Date | string
    duration?: number | null
    location?: string | null
    description?: string | null
    status?: string
    createdBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: AppointmentNoteUncheckedCreateNestedManyWithoutAppointmentInput
    logs?: AppointmentLogUncheckedCreateNestedManyWithoutAppointmentInput
    contactRequests?: ContactRequestUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutCustomerInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutCustomerInput, AppointmentUncheckedCreateWithoutCustomerInput>
  }

  export type AppointmentCreateManyCustomerInputEnvelope = {
    data: AppointmentCreateManyCustomerInput | AppointmentCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type CustomerLogCreateWithoutCustomerInput = {
    userName: string
    action: string
    details?: string | null
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutCustomerLogsInput
  }

  export type CustomerLogUncheckedCreateWithoutCustomerInput = {
    id?: number
    userId?: number | null
    userName: string
    action: string
    details?: string | null
    createdAt?: Date | string
  }

  export type CustomerLogCreateOrConnectWithoutCustomerInput = {
    where: CustomerLogWhereUniqueInput
    create: XOR<CustomerLogCreateWithoutCustomerInput, CustomerLogUncheckedCreateWithoutCustomerInput>
  }

  export type CustomerLogCreateManyCustomerInputEnvelope = {
    data: CustomerLogCreateManyCustomerInput | CustomerLogCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type ContactRequestCreateWithoutCustomerInput = {
    name: string
    email: string
    phone?: string | null
    service: string
    message: string
    status?: string
    ipAddress?: string | null
    source?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: RequestNoteCreateNestedManyWithoutRequestInput
    logs?: RequestLogCreateNestedManyWithoutRequestInput
    requestData?: RequestDataCreateNestedManyWithoutRequestInput
    appointment?: AppointmentCreateNestedOneWithoutContactRequestsInput
    processor?: UserCreateNestedOneWithoutContactRequestsInput
  }

  export type ContactRequestUncheckedCreateWithoutCustomerInput = {
    id?: number
    name: string
    email: string
    phone?: string | null
    service: string
    message: string
    status?: string
    processorId?: number | null
    appointmentId?: number | null
    ipAddress?: string | null
    source?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: RequestNoteUncheckedCreateNestedManyWithoutRequestInput
    logs?: RequestLogUncheckedCreateNestedManyWithoutRequestInput
    requestData?: RequestDataUncheckedCreateNestedManyWithoutRequestInput
  }

  export type ContactRequestCreateOrConnectWithoutCustomerInput = {
    where: ContactRequestWhereUniqueInput
    create: XOR<ContactRequestCreateWithoutCustomerInput, ContactRequestUncheckedCreateWithoutCustomerInput>
  }

  export type ContactRequestCreateManyCustomerInputEnvelope = {
    data: ContactRequestCreateManyCustomerInput | ContactRequestCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type AppointmentUpsertWithWhereUniqueWithoutCustomerInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutCustomerInput, AppointmentUncheckedUpdateWithoutCustomerInput>
    create: XOR<AppointmentCreateWithoutCustomerInput, AppointmentUncheckedCreateWithoutCustomerInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutCustomerInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutCustomerInput, AppointmentUncheckedUpdateWithoutCustomerInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutCustomerInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutCustomerInput>
  }

  export type CustomerLogUpsertWithWhereUniqueWithoutCustomerInput = {
    where: CustomerLogWhereUniqueInput
    update: XOR<CustomerLogUpdateWithoutCustomerInput, CustomerLogUncheckedUpdateWithoutCustomerInput>
    create: XOR<CustomerLogCreateWithoutCustomerInput, CustomerLogUncheckedCreateWithoutCustomerInput>
  }

  export type CustomerLogUpdateWithWhereUniqueWithoutCustomerInput = {
    where: CustomerLogWhereUniqueInput
    data: XOR<CustomerLogUpdateWithoutCustomerInput, CustomerLogUncheckedUpdateWithoutCustomerInput>
  }

  export type CustomerLogUpdateManyWithWhereWithoutCustomerInput = {
    where: CustomerLogScalarWhereInput
    data: XOR<CustomerLogUpdateManyMutationInput, CustomerLogUncheckedUpdateManyWithoutCustomerInput>
  }

  export type ContactRequestUpsertWithWhereUniqueWithoutCustomerInput = {
    where: ContactRequestWhereUniqueInput
    update: XOR<ContactRequestUpdateWithoutCustomerInput, ContactRequestUncheckedUpdateWithoutCustomerInput>
    create: XOR<ContactRequestCreateWithoutCustomerInput, ContactRequestUncheckedCreateWithoutCustomerInput>
  }

  export type ContactRequestUpdateWithWhereUniqueWithoutCustomerInput = {
    where: ContactRequestWhereUniqueInput
    data: XOR<ContactRequestUpdateWithoutCustomerInput, ContactRequestUncheckedUpdateWithoutCustomerInput>
  }

  export type ContactRequestUpdateManyWithWhereWithoutCustomerInput = {
    where: ContactRequestScalarWhereInput
    data: XOR<ContactRequestUpdateManyMutationInput, ContactRequestUncheckedUpdateManyWithoutCustomerInput>
  }

  export type UserCreateWithoutCustomerLogsInput = {
    name: string
    email: string
    password: string
    role?: string
    phone?: string | null
    status?: string
    profilePicture?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    appointments?: AppointmentCreateNestedManyWithoutCreatorInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    appointmentNotes?: AppointmentNoteCreateNestedManyWithoutUserInput
    appointmentLogs?: AppointmentLogCreateNestedManyWithoutUserInput
    contactRequests?: ContactRequestCreateNestedManyWithoutProcessorInput
    requestNotes?: RequestNoteCreateNestedManyWithoutUserInput
    requestLogs?: RequestLogCreateNestedManyWithoutUserInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    profilePictureFile?: FileCreateNestedOneWithoutUserProfilesInput
    requestData?: RequestDataCreateNestedManyWithoutCreatedByInput
    requestDataHistory?: RequestDataHistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCustomerLogsInput = {
    id?: number
    name: string
    email: string
    password: string
    role?: string
    phone?: string | null
    status?: string
    profilePicture?: string | null
    profilePictureId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutCreatorInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    appointmentNotes?: AppointmentNoteUncheckedCreateNestedManyWithoutUserInput
    appointmentLogs?: AppointmentLogUncheckedCreateNestedManyWithoutUserInput
    contactRequests?: ContactRequestUncheckedCreateNestedManyWithoutProcessorInput
    requestNotes?: RequestNoteUncheckedCreateNestedManyWithoutUserInput
    requestLogs?: RequestLogUncheckedCreateNestedManyWithoutUserInput
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    requestData?: RequestDataUncheckedCreateNestedManyWithoutCreatedByInput
    requestDataHistory?: RequestDataHistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCustomerLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCustomerLogsInput, UserUncheckedCreateWithoutCustomerLogsInput>
  }

  export type CustomerCreateWithoutLogsInput = {
    name: string
    company?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    postalCode?: string | null
    city?: string | null
    country?: string
    vatNumber?: string | null
    notes?: string | null
    newsletter?: boolean
    status?: string
    type?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    appointments?: AppointmentCreateNestedManyWithoutCustomerInput
    contactRequests?: ContactRequestCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutLogsInput = {
    id?: number
    name: string
    company?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    postalCode?: string | null
    city?: string | null
    country?: string
    vatNumber?: string | null
    notes?: string | null
    newsletter?: boolean
    status?: string
    type?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    appointments?: AppointmentUncheckedCreateNestedManyWithoutCustomerInput
    contactRequests?: ContactRequestUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutLogsInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutLogsInput, CustomerUncheckedCreateWithoutLogsInput>
  }

  export type UserUpsertWithoutCustomerLogsInput = {
    update: XOR<UserUpdateWithoutCustomerLogsInput, UserUncheckedUpdateWithoutCustomerLogsInput>
    create: XOR<UserCreateWithoutCustomerLogsInput, UserUncheckedCreateWithoutCustomerLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCustomerLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCustomerLogsInput, UserUncheckedUpdateWithoutCustomerLogsInput>
  }

  export type UserUpdateWithoutCustomerLogsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    appointments?: AppointmentUpdateManyWithoutCreatorNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    appointmentNotes?: AppointmentNoteUpdateManyWithoutUserNestedInput
    appointmentLogs?: AppointmentLogUpdateManyWithoutUserNestedInput
    contactRequests?: ContactRequestUpdateManyWithoutProcessorNestedInput
    requestNotes?: RequestNoteUpdateManyWithoutUserNestedInput
    requestLogs?: RequestLogUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    profilePictureFile?: FileUpdateOneWithoutUserProfilesNestedInput
    requestData?: RequestDataUpdateManyWithoutCreatedByNestedInput
    requestDataHistory?: RequestDataHistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCustomerLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutCreatorNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    appointmentNotes?: AppointmentNoteUncheckedUpdateManyWithoutUserNestedInput
    appointmentLogs?: AppointmentLogUncheckedUpdateManyWithoutUserNestedInput
    contactRequests?: ContactRequestUncheckedUpdateManyWithoutProcessorNestedInput
    requestNotes?: RequestNoteUncheckedUpdateManyWithoutUserNestedInput
    requestLogs?: RequestLogUncheckedUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    requestData?: RequestDataUncheckedUpdateManyWithoutCreatedByNestedInput
    requestDataHistory?: RequestDataHistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CustomerUpsertWithoutLogsInput = {
    update: XOR<CustomerUpdateWithoutLogsInput, CustomerUncheckedUpdateWithoutLogsInput>
    create: XOR<CustomerCreateWithoutLogsInput, CustomerUncheckedCreateWithoutLogsInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutLogsInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutLogsInput, CustomerUncheckedUpdateWithoutLogsInput>
  }

  export type CustomerUpdateWithoutLogsInput = {
    name?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    appointments?: AppointmentUpdateManyWithoutCustomerNestedInput
    contactRequests?: ContactRequestUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    appointments?: AppointmentUncheckedUpdateManyWithoutCustomerNestedInput
    contactRequests?: ContactRequestUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerCreateWithoutAppointmentsInput = {
    name: string
    company?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    postalCode?: string | null
    city?: string | null
    country?: string
    vatNumber?: string | null
    notes?: string | null
    newsletter?: boolean
    status?: string
    type?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    logs?: CustomerLogCreateNestedManyWithoutCustomerInput
    contactRequests?: ContactRequestCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutAppointmentsInput = {
    id?: number
    name: string
    company?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    postalCode?: string | null
    city?: string | null
    country?: string
    vatNumber?: string | null
    notes?: string | null
    newsletter?: boolean
    status?: string
    type?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    logs?: CustomerLogUncheckedCreateNestedManyWithoutCustomerInput
    contactRequests?: ContactRequestUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutAppointmentsInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutAppointmentsInput, CustomerUncheckedCreateWithoutAppointmentsInput>
  }

  export type UserCreateWithoutAppointmentsInput = {
    name: string
    email: string
    password: string
    role?: string
    phone?: string | null
    status?: string
    profilePicture?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    customerLogs?: CustomerLogCreateNestedManyWithoutUserInput
    appointmentNotes?: AppointmentNoteCreateNestedManyWithoutUserInput
    appointmentLogs?: AppointmentLogCreateNestedManyWithoutUserInput
    contactRequests?: ContactRequestCreateNestedManyWithoutProcessorInput
    requestNotes?: RequestNoteCreateNestedManyWithoutUserInput
    requestLogs?: RequestLogCreateNestedManyWithoutUserInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    profilePictureFile?: FileCreateNestedOneWithoutUserProfilesInput
    requestData?: RequestDataCreateNestedManyWithoutCreatedByInput
    requestDataHistory?: RequestDataHistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAppointmentsInput = {
    id?: number
    name: string
    email: string
    password: string
    role?: string
    phone?: string | null
    status?: string
    profilePicture?: string | null
    profilePictureId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    customerLogs?: CustomerLogUncheckedCreateNestedManyWithoutUserInput
    appointmentNotes?: AppointmentNoteUncheckedCreateNestedManyWithoutUserInput
    appointmentLogs?: AppointmentLogUncheckedCreateNestedManyWithoutUserInput
    contactRequests?: ContactRequestUncheckedCreateNestedManyWithoutProcessorInput
    requestNotes?: RequestNoteUncheckedCreateNestedManyWithoutUserInput
    requestLogs?: RequestLogUncheckedCreateNestedManyWithoutUserInput
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    requestData?: RequestDataUncheckedCreateNestedManyWithoutCreatedByInput
    requestDataHistory?: RequestDataHistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAppointmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAppointmentsInput, UserUncheckedCreateWithoutAppointmentsInput>
  }

  export type AppointmentNoteCreateWithoutAppointmentInput = {
    userName: string
    text: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutAppointmentNotesInput
  }

  export type AppointmentNoteUncheckedCreateWithoutAppointmentInput = {
    id?: number
    userId: number
    userName: string
    text: string
    createdAt?: Date | string
  }

  export type AppointmentNoteCreateOrConnectWithoutAppointmentInput = {
    where: AppointmentNoteWhereUniqueInput
    create: XOR<AppointmentNoteCreateWithoutAppointmentInput, AppointmentNoteUncheckedCreateWithoutAppointmentInput>
  }

  export type AppointmentNoteCreateManyAppointmentInputEnvelope = {
    data: AppointmentNoteCreateManyAppointmentInput | AppointmentNoteCreateManyAppointmentInput[]
    skipDuplicates?: boolean
  }

  export type AppointmentLogCreateWithoutAppointmentInput = {
    userName: string
    action: string
    details?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutAppointmentLogsInput
  }

  export type AppointmentLogUncheckedCreateWithoutAppointmentInput = {
    id?: number
    userId: number
    userName: string
    action: string
    details?: string | null
    createdAt?: Date | string
  }

  export type AppointmentLogCreateOrConnectWithoutAppointmentInput = {
    where: AppointmentLogWhereUniqueInput
    create: XOR<AppointmentLogCreateWithoutAppointmentInput, AppointmentLogUncheckedCreateWithoutAppointmentInput>
  }

  export type AppointmentLogCreateManyAppointmentInputEnvelope = {
    data: AppointmentLogCreateManyAppointmentInput | AppointmentLogCreateManyAppointmentInput[]
    skipDuplicates?: boolean
  }

  export type ContactRequestCreateWithoutAppointmentInput = {
    name: string
    email: string
    phone?: string | null
    service: string
    message: string
    status?: string
    ipAddress?: string | null
    source?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: RequestNoteCreateNestedManyWithoutRequestInput
    logs?: RequestLogCreateNestedManyWithoutRequestInput
    requestData?: RequestDataCreateNestedManyWithoutRequestInput
    customer?: CustomerCreateNestedOneWithoutContactRequestsInput
    processor?: UserCreateNestedOneWithoutContactRequestsInput
  }

  export type ContactRequestUncheckedCreateWithoutAppointmentInput = {
    id?: number
    name: string
    email: string
    phone?: string | null
    service: string
    message: string
    status?: string
    processorId?: number | null
    customerId?: number | null
    ipAddress?: string | null
    source?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: RequestNoteUncheckedCreateNestedManyWithoutRequestInput
    logs?: RequestLogUncheckedCreateNestedManyWithoutRequestInput
    requestData?: RequestDataUncheckedCreateNestedManyWithoutRequestInput
  }

  export type ContactRequestCreateOrConnectWithoutAppointmentInput = {
    where: ContactRequestWhereUniqueInput
    create: XOR<ContactRequestCreateWithoutAppointmentInput, ContactRequestUncheckedCreateWithoutAppointmentInput>
  }

  export type ContactRequestCreateManyAppointmentInputEnvelope = {
    data: ContactRequestCreateManyAppointmentInput | ContactRequestCreateManyAppointmentInput[]
    skipDuplicates?: boolean
  }

  export type CustomerUpsertWithoutAppointmentsInput = {
    update: XOR<CustomerUpdateWithoutAppointmentsInput, CustomerUncheckedUpdateWithoutAppointmentsInput>
    create: XOR<CustomerCreateWithoutAppointmentsInput, CustomerUncheckedCreateWithoutAppointmentsInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutAppointmentsInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutAppointmentsInput, CustomerUncheckedUpdateWithoutAppointmentsInput>
  }

  export type CustomerUpdateWithoutAppointmentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    logs?: CustomerLogUpdateManyWithoutCustomerNestedInput
    contactRequests?: ContactRequestUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutAppointmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    logs?: CustomerLogUncheckedUpdateManyWithoutCustomerNestedInput
    contactRequests?: ContactRequestUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type UserUpsertWithoutAppointmentsInput = {
    update: XOR<UserUpdateWithoutAppointmentsInput, UserUncheckedUpdateWithoutAppointmentsInput>
    create: XOR<UserCreateWithoutAppointmentsInput, UserUncheckedCreateWithoutAppointmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAppointmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAppointmentsInput, UserUncheckedUpdateWithoutAppointmentsInput>
  }

  export type UserUpdateWithoutAppointmentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    customerLogs?: CustomerLogUpdateManyWithoutUserNestedInput
    appointmentNotes?: AppointmentNoteUpdateManyWithoutUserNestedInput
    appointmentLogs?: AppointmentLogUpdateManyWithoutUserNestedInput
    contactRequests?: ContactRequestUpdateManyWithoutProcessorNestedInput
    requestNotes?: RequestNoteUpdateManyWithoutUserNestedInput
    requestLogs?: RequestLogUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    profilePictureFile?: FileUpdateOneWithoutUserProfilesNestedInput
    requestData?: RequestDataUpdateManyWithoutCreatedByNestedInput
    requestDataHistory?: RequestDataHistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAppointmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    customerLogs?: CustomerLogUncheckedUpdateManyWithoutUserNestedInput
    appointmentNotes?: AppointmentNoteUncheckedUpdateManyWithoutUserNestedInput
    appointmentLogs?: AppointmentLogUncheckedUpdateManyWithoutUserNestedInput
    contactRequests?: ContactRequestUncheckedUpdateManyWithoutProcessorNestedInput
    requestNotes?: RequestNoteUncheckedUpdateManyWithoutUserNestedInput
    requestLogs?: RequestLogUncheckedUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    requestData?: RequestDataUncheckedUpdateManyWithoutCreatedByNestedInput
    requestDataHistory?: RequestDataHistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AppointmentNoteUpsertWithWhereUniqueWithoutAppointmentInput = {
    where: AppointmentNoteWhereUniqueInput
    update: XOR<AppointmentNoteUpdateWithoutAppointmentInput, AppointmentNoteUncheckedUpdateWithoutAppointmentInput>
    create: XOR<AppointmentNoteCreateWithoutAppointmentInput, AppointmentNoteUncheckedCreateWithoutAppointmentInput>
  }

  export type AppointmentNoteUpdateWithWhereUniqueWithoutAppointmentInput = {
    where: AppointmentNoteWhereUniqueInput
    data: XOR<AppointmentNoteUpdateWithoutAppointmentInput, AppointmentNoteUncheckedUpdateWithoutAppointmentInput>
  }

  export type AppointmentNoteUpdateManyWithWhereWithoutAppointmentInput = {
    where: AppointmentNoteScalarWhereInput
    data: XOR<AppointmentNoteUpdateManyMutationInput, AppointmentNoteUncheckedUpdateManyWithoutAppointmentInput>
  }

  export type AppointmentLogUpsertWithWhereUniqueWithoutAppointmentInput = {
    where: AppointmentLogWhereUniqueInput
    update: XOR<AppointmentLogUpdateWithoutAppointmentInput, AppointmentLogUncheckedUpdateWithoutAppointmentInput>
    create: XOR<AppointmentLogCreateWithoutAppointmentInput, AppointmentLogUncheckedCreateWithoutAppointmentInput>
  }

  export type AppointmentLogUpdateWithWhereUniqueWithoutAppointmentInput = {
    where: AppointmentLogWhereUniqueInput
    data: XOR<AppointmentLogUpdateWithoutAppointmentInput, AppointmentLogUncheckedUpdateWithoutAppointmentInput>
  }

  export type AppointmentLogUpdateManyWithWhereWithoutAppointmentInput = {
    where: AppointmentLogScalarWhereInput
    data: XOR<AppointmentLogUpdateManyMutationInput, AppointmentLogUncheckedUpdateManyWithoutAppointmentInput>
  }

  export type ContactRequestUpsertWithWhereUniqueWithoutAppointmentInput = {
    where: ContactRequestWhereUniqueInput
    update: XOR<ContactRequestUpdateWithoutAppointmentInput, ContactRequestUncheckedUpdateWithoutAppointmentInput>
    create: XOR<ContactRequestCreateWithoutAppointmentInput, ContactRequestUncheckedCreateWithoutAppointmentInput>
  }

  export type ContactRequestUpdateWithWhereUniqueWithoutAppointmentInput = {
    where: ContactRequestWhereUniqueInput
    data: XOR<ContactRequestUpdateWithoutAppointmentInput, ContactRequestUncheckedUpdateWithoutAppointmentInput>
  }

  export type ContactRequestUpdateManyWithWhereWithoutAppointmentInput = {
    where: ContactRequestScalarWhereInput
    data: XOR<ContactRequestUpdateManyMutationInput, ContactRequestUncheckedUpdateManyWithoutAppointmentInput>
  }

  export type AppointmentCreateWithoutNotesInput = {
    title: string
    appointmentDate: Date | string
    duration?: number | null
    location?: string | null
    description?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    customer?: CustomerCreateNestedOneWithoutAppointmentsInput
    creator?: UserCreateNestedOneWithoutAppointmentsInput
    logs?: AppointmentLogCreateNestedManyWithoutAppointmentInput
    contactRequests?: ContactRequestCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutNotesInput = {
    id?: number
    title: string
    customerId?: number | null
    appointmentDate: Date | string
    duration?: number | null
    location?: string | null
    description?: string | null
    status?: string
    createdBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    logs?: AppointmentLogUncheckedCreateNestedManyWithoutAppointmentInput
    contactRequests?: ContactRequestUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutNotesInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutNotesInput, AppointmentUncheckedCreateWithoutNotesInput>
  }

  export type UserCreateWithoutAppointmentNotesInput = {
    name: string
    email: string
    password: string
    role?: string
    phone?: string | null
    status?: string
    profilePicture?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    appointments?: AppointmentCreateNestedManyWithoutCreatorInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    customerLogs?: CustomerLogCreateNestedManyWithoutUserInput
    appointmentLogs?: AppointmentLogCreateNestedManyWithoutUserInput
    contactRequests?: ContactRequestCreateNestedManyWithoutProcessorInput
    requestNotes?: RequestNoteCreateNestedManyWithoutUserInput
    requestLogs?: RequestLogCreateNestedManyWithoutUserInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    profilePictureFile?: FileCreateNestedOneWithoutUserProfilesInput
    requestData?: RequestDataCreateNestedManyWithoutCreatedByInput
    requestDataHistory?: RequestDataHistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAppointmentNotesInput = {
    id?: number
    name: string
    email: string
    password: string
    role?: string
    phone?: string | null
    status?: string
    profilePicture?: string | null
    profilePictureId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutCreatorInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    customerLogs?: CustomerLogUncheckedCreateNestedManyWithoutUserInput
    appointmentLogs?: AppointmentLogUncheckedCreateNestedManyWithoutUserInput
    contactRequests?: ContactRequestUncheckedCreateNestedManyWithoutProcessorInput
    requestNotes?: RequestNoteUncheckedCreateNestedManyWithoutUserInput
    requestLogs?: RequestLogUncheckedCreateNestedManyWithoutUserInput
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    requestData?: RequestDataUncheckedCreateNestedManyWithoutCreatedByInput
    requestDataHistory?: RequestDataHistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAppointmentNotesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAppointmentNotesInput, UserUncheckedCreateWithoutAppointmentNotesInput>
  }

  export type AppointmentUpsertWithoutNotesInput = {
    update: XOR<AppointmentUpdateWithoutNotesInput, AppointmentUncheckedUpdateWithoutNotesInput>
    create: XOR<AppointmentCreateWithoutNotesInput, AppointmentUncheckedCreateWithoutNotesInput>
    where?: AppointmentWhereInput
  }

  export type AppointmentUpdateToOneWithWhereWithoutNotesInput = {
    where?: AppointmentWhereInput
    data: XOR<AppointmentUpdateWithoutNotesInput, AppointmentUncheckedUpdateWithoutNotesInput>
  }

  export type AppointmentUpdateWithoutNotesInput = {
    title?: StringFieldUpdateOperationsInput | string
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneWithoutAppointmentsNestedInput
    creator?: UserUpdateOneWithoutAppointmentsNestedInput
    logs?: AppointmentLogUpdateManyWithoutAppointmentNestedInput
    contactRequests?: ContactRequestUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutNotesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    customerId?: NullableIntFieldUpdateOperationsInput | number | null
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logs?: AppointmentLogUncheckedUpdateManyWithoutAppointmentNestedInput
    contactRequests?: ContactRequestUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type UserUpsertWithoutAppointmentNotesInput = {
    update: XOR<UserUpdateWithoutAppointmentNotesInput, UserUncheckedUpdateWithoutAppointmentNotesInput>
    create: XOR<UserCreateWithoutAppointmentNotesInput, UserUncheckedCreateWithoutAppointmentNotesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAppointmentNotesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAppointmentNotesInput, UserUncheckedUpdateWithoutAppointmentNotesInput>
  }

  export type UserUpdateWithoutAppointmentNotesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    appointments?: AppointmentUpdateManyWithoutCreatorNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    customerLogs?: CustomerLogUpdateManyWithoutUserNestedInput
    appointmentLogs?: AppointmentLogUpdateManyWithoutUserNestedInput
    contactRequests?: ContactRequestUpdateManyWithoutProcessorNestedInput
    requestNotes?: RequestNoteUpdateManyWithoutUserNestedInput
    requestLogs?: RequestLogUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    profilePictureFile?: FileUpdateOneWithoutUserProfilesNestedInput
    requestData?: RequestDataUpdateManyWithoutCreatedByNestedInput
    requestDataHistory?: RequestDataHistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAppointmentNotesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutCreatorNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    customerLogs?: CustomerLogUncheckedUpdateManyWithoutUserNestedInput
    appointmentLogs?: AppointmentLogUncheckedUpdateManyWithoutUserNestedInput
    contactRequests?: ContactRequestUncheckedUpdateManyWithoutProcessorNestedInput
    requestNotes?: RequestNoteUncheckedUpdateManyWithoutUserNestedInput
    requestLogs?: RequestLogUncheckedUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    requestData?: RequestDataUncheckedUpdateManyWithoutCreatedByNestedInput
    requestDataHistory?: RequestDataHistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutAppointmentLogsInput = {
    name: string
    email: string
    password: string
    role?: string
    phone?: string | null
    status?: string
    profilePicture?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    appointments?: AppointmentCreateNestedManyWithoutCreatorInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    customerLogs?: CustomerLogCreateNestedManyWithoutUserInput
    appointmentNotes?: AppointmentNoteCreateNestedManyWithoutUserInput
    contactRequests?: ContactRequestCreateNestedManyWithoutProcessorInput
    requestNotes?: RequestNoteCreateNestedManyWithoutUserInput
    requestLogs?: RequestLogCreateNestedManyWithoutUserInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    profilePictureFile?: FileCreateNestedOneWithoutUserProfilesInput
    requestData?: RequestDataCreateNestedManyWithoutCreatedByInput
    requestDataHistory?: RequestDataHistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAppointmentLogsInput = {
    id?: number
    name: string
    email: string
    password: string
    role?: string
    phone?: string | null
    status?: string
    profilePicture?: string | null
    profilePictureId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutCreatorInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    customerLogs?: CustomerLogUncheckedCreateNestedManyWithoutUserInput
    appointmentNotes?: AppointmentNoteUncheckedCreateNestedManyWithoutUserInput
    contactRequests?: ContactRequestUncheckedCreateNestedManyWithoutProcessorInput
    requestNotes?: RequestNoteUncheckedCreateNestedManyWithoutUserInput
    requestLogs?: RequestLogUncheckedCreateNestedManyWithoutUserInput
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    requestData?: RequestDataUncheckedCreateNestedManyWithoutCreatedByInput
    requestDataHistory?: RequestDataHistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAppointmentLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAppointmentLogsInput, UserUncheckedCreateWithoutAppointmentLogsInput>
  }

  export type AppointmentCreateWithoutLogsInput = {
    title: string
    appointmentDate: Date | string
    duration?: number | null
    location?: string | null
    description?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    customer?: CustomerCreateNestedOneWithoutAppointmentsInput
    creator?: UserCreateNestedOneWithoutAppointmentsInput
    notes?: AppointmentNoteCreateNestedManyWithoutAppointmentInput
    contactRequests?: ContactRequestCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutLogsInput = {
    id?: number
    title: string
    customerId?: number | null
    appointmentDate: Date | string
    duration?: number | null
    location?: string | null
    description?: string | null
    status?: string
    createdBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: AppointmentNoteUncheckedCreateNestedManyWithoutAppointmentInput
    contactRequests?: ContactRequestUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutLogsInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutLogsInput, AppointmentUncheckedCreateWithoutLogsInput>
  }

  export type UserUpsertWithoutAppointmentLogsInput = {
    update: XOR<UserUpdateWithoutAppointmentLogsInput, UserUncheckedUpdateWithoutAppointmentLogsInput>
    create: XOR<UserCreateWithoutAppointmentLogsInput, UserUncheckedCreateWithoutAppointmentLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAppointmentLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAppointmentLogsInput, UserUncheckedUpdateWithoutAppointmentLogsInput>
  }

  export type UserUpdateWithoutAppointmentLogsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    appointments?: AppointmentUpdateManyWithoutCreatorNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    customerLogs?: CustomerLogUpdateManyWithoutUserNestedInput
    appointmentNotes?: AppointmentNoteUpdateManyWithoutUserNestedInput
    contactRequests?: ContactRequestUpdateManyWithoutProcessorNestedInput
    requestNotes?: RequestNoteUpdateManyWithoutUserNestedInput
    requestLogs?: RequestLogUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    profilePictureFile?: FileUpdateOneWithoutUserProfilesNestedInput
    requestData?: RequestDataUpdateManyWithoutCreatedByNestedInput
    requestDataHistory?: RequestDataHistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAppointmentLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutCreatorNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    customerLogs?: CustomerLogUncheckedUpdateManyWithoutUserNestedInput
    appointmentNotes?: AppointmentNoteUncheckedUpdateManyWithoutUserNestedInput
    contactRequests?: ContactRequestUncheckedUpdateManyWithoutProcessorNestedInput
    requestNotes?: RequestNoteUncheckedUpdateManyWithoutUserNestedInput
    requestLogs?: RequestLogUncheckedUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    requestData?: RequestDataUncheckedUpdateManyWithoutCreatedByNestedInput
    requestDataHistory?: RequestDataHistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AppointmentUpsertWithoutLogsInput = {
    update: XOR<AppointmentUpdateWithoutLogsInput, AppointmentUncheckedUpdateWithoutLogsInput>
    create: XOR<AppointmentCreateWithoutLogsInput, AppointmentUncheckedCreateWithoutLogsInput>
    where?: AppointmentWhereInput
  }

  export type AppointmentUpdateToOneWithWhereWithoutLogsInput = {
    where?: AppointmentWhereInput
    data: XOR<AppointmentUpdateWithoutLogsInput, AppointmentUncheckedUpdateWithoutLogsInput>
  }

  export type AppointmentUpdateWithoutLogsInput = {
    title?: StringFieldUpdateOperationsInput | string
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneWithoutAppointmentsNestedInput
    creator?: UserUpdateOneWithoutAppointmentsNestedInput
    notes?: AppointmentNoteUpdateManyWithoutAppointmentNestedInput
    contactRequests?: ContactRequestUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    customerId?: NullableIntFieldUpdateOperationsInput | number | null
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: AppointmentNoteUncheckedUpdateManyWithoutAppointmentNestedInput
    contactRequests?: ContactRequestUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type RequestNoteCreateWithoutRequestInput = {
    userName: string
    text: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutRequestNotesInput
  }

  export type RequestNoteUncheckedCreateWithoutRequestInput = {
    id?: number
    userId: number
    userName: string
    text: string
    createdAt?: Date | string
  }

  export type RequestNoteCreateOrConnectWithoutRequestInput = {
    where: RequestNoteWhereUniqueInput
    create: XOR<RequestNoteCreateWithoutRequestInput, RequestNoteUncheckedCreateWithoutRequestInput>
  }

  export type RequestNoteCreateManyRequestInputEnvelope = {
    data: RequestNoteCreateManyRequestInput | RequestNoteCreateManyRequestInput[]
    skipDuplicates?: boolean
  }

  export type RequestLogCreateWithoutRequestInput = {
    userName: string
    action: string
    details?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutRequestLogsInput
  }

  export type RequestLogUncheckedCreateWithoutRequestInput = {
    id?: number
    userId: number
    userName: string
    action: string
    details?: string | null
    createdAt?: Date | string
  }

  export type RequestLogCreateOrConnectWithoutRequestInput = {
    where: RequestLogWhereUniqueInput
    create: XOR<RequestLogCreateWithoutRequestInput, RequestLogUncheckedCreateWithoutRequestInput>
  }

  export type RequestLogCreateManyRequestInputEnvelope = {
    data: RequestLogCreateManyRequestInput | RequestLogCreateManyRequestInput[]
    skipDuplicates?: boolean
  }

  export type RequestDataCreateWithoutRequestInput = {
    category: string
    label: string
    order?: number
    dataType: string
    data: JsonNullValueInput | InputJsonValue
    isValid?: boolean
    processedBy?: string | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: UserCreateNestedOneWithoutRequestDataInput
    history?: RequestDataHistoryCreateNestedManyWithoutRequestDataInput
  }

  export type RequestDataUncheckedCreateWithoutRequestInput = {
    id?: number
    category: string
    label: string
    order?: number
    dataType: string
    data: JsonNullValueInput | InputJsonValue
    isValid?: boolean
    processedBy?: string | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: number | null
    history?: RequestDataHistoryUncheckedCreateNestedManyWithoutRequestDataInput
  }

  export type RequestDataCreateOrConnectWithoutRequestInput = {
    where: RequestDataWhereUniqueInput
    create: XOR<RequestDataCreateWithoutRequestInput, RequestDataUncheckedCreateWithoutRequestInput>
  }

  export type RequestDataCreateManyRequestInputEnvelope = {
    data: RequestDataCreateManyRequestInput | RequestDataCreateManyRequestInput[]
    skipDuplicates?: boolean
  }

  export type CustomerCreateWithoutContactRequestsInput = {
    name: string
    company?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    postalCode?: string | null
    city?: string | null
    country?: string
    vatNumber?: string | null
    notes?: string | null
    newsletter?: boolean
    status?: string
    type?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    appointments?: AppointmentCreateNestedManyWithoutCustomerInput
    logs?: CustomerLogCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutContactRequestsInput = {
    id?: number
    name: string
    company?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    postalCode?: string | null
    city?: string | null
    country?: string
    vatNumber?: string | null
    notes?: string | null
    newsletter?: boolean
    status?: string
    type?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    appointments?: AppointmentUncheckedCreateNestedManyWithoutCustomerInput
    logs?: CustomerLogUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutContactRequestsInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutContactRequestsInput, CustomerUncheckedCreateWithoutContactRequestsInput>
  }

  export type AppointmentCreateWithoutContactRequestsInput = {
    title: string
    appointmentDate: Date | string
    duration?: number | null
    location?: string | null
    description?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    customer?: CustomerCreateNestedOneWithoutAppointmentsInput
    creator?: UserCreateNestedOneWithoutAppointmentsInput
    notes?: AppointmentNoteCreateNestedManyWithoutAppointmentInput
    logs?: AppointmentLogCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutContactRequestsInput = {
    id?: number
    title: string
    customerId?: number | null
    appointmentDate: Date | string
    duration?: number | null
    location?: string | null
    description?: string | null
    status?: string
    createdBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: AppointmentNoteUncheckedCreateNestedManyWithoutAppointmentInput
    logs?: AppointmentLogUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutContactRequestsInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutContactRequestsInput, AppointmentUncheckedCreateWithoutContactRequestsInput>
  }

  export type UserCreateWithoutContactRequestsInput = {
    name: string
    email: string
    password: string
    role?: string
    phone?: string | null
    status?: string
    profilePicture?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    appointments?: AppointmentCreateNestedManyWithoutCreatorInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    customerLogs?: CustomerLogCreateNestedManyWithoutUserInput
    appointmentNotes?: AppointmentNoteCreateNestedManyWithoutUserInput
    appointmentLogs?: AppointmentLogCreateNestedManyWithoutUserInput
    requestNotes?: RequestNoteCreateNestedManyWithoutUserInput
    requestLogs?: RequestLogCreateNestedManyWithoutUserInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    profilePictureFile?: FileCreateNestedOneWithoutUserProfilesInput
    requestData?: RequestDataCreateNestedManyWithoutCreatedByInput
    requestDataHistory?: RequestDataHistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutContactRequestsInput = {
    id?: number
    name: string
    email: string
    password: string
    role?: string
    phone?: string | null
    status?: string
    profilePicture?: string | null
    profilePictureId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutCreatorInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    customerLogs?: CustomerLogUncheckedCreateNestedManyWithoutUserInput
    appointmentNotes?: AppointmentNoteUncheckedCreateNestedManyWithoutUserInput
    appointmentLogs?: AppointmentLogUncheckedCreateNestedManyWithoutUserInput
    requestNotes?: RequestNoteUncheckedCreateNestedManyWithoutUserInput
    requestLogs?: RequestLogUncheckedCreateNestedManyWithoutUserInput
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    requestData?: RequestDataUncheckedCreateNestedManyWithoutCreatedByInput
    requestDataHistory?: RequestDataHistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutContactRequestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutContactRequestsInput, UserUncheckedCreateWithoutContactRequestsInput>
  }

  export type RequestNoteUpsertWithWhereUniqueWithoutRequestInput = {
    where: RequestNoteWhereUniqueInput
    update: XOR<RequestNoteUpdateWithoutRequestInput, RequestNoteUncheckedUpdateWithoutRequestInput>
    create: XOR<RequestNoteCreateWithoutRequestInput, RequestNoteUncheckedCreateWithoutRequestInput>
  }

  export type RequestNoteUpdateWithWhereUniqueWithoutRequestInput = {
    where: RequestNoteWhereUniqueInput
    data: XOR<RequestNoteUpdateWithoutRequestInput, RequestNoteUncheckedUpdateWithoutRequestInput>
  }

  export type RequestNoteUpdateManyWithWhereWithoutRequestInput = {
    where: RequestNoteScalarWhereInput
    data: XOR<RequestNoteUpdateManyMutationInput, RequestNoteUncheckedUpdateManyWithoutRequestInput>
  }

  export type RequestLogUpsertWithWhereUniqueWithoutRequestInput = {
    where: RequestLogWhereUniqueInput
    update: XOR<RequestLogUpdateWithoutRequestInput, RequestLogUncheckedUpdateWithoutRequestInput>
    create: XOR<RequestLogCreateWithoutRequestInput, RequestLogUncheckedCreateWithoutRequestInput>
  }

  export type RequestLogUpdateWithWhereUniqueWithoutRequestInput = {
    where: RequestLogWhereUniqueInput
    data: XOR<RequestLogUpdateWithoutRequestInput, RequestLogUncheckedUpdateWithoutRequestInput>
  }

  export type RequestLogUpdateManyWithWhereWithoutRequestInput = {
    where: RequestLogScalarWhereInput
    data: XOR<RequestLogUpdateManyMutationInput, RequestLogUncheckedUpdateManyWithoutRequestInput>
  }

  export type RequestDataUpsertWithWhereUniqueWithoutRequestInput = {
    where: RequestDataWhereUniqueInput
    update: XOR<RequestDataUpdateWithoutRequestInput, RequestDataUncheckedUpdateWithoutRequestInput>
    create: XOR<RequestDataCreateWithoutRequestInput, RequestDataUncheckedCreateWithoutRequestInput>
  }

  export type RequestDataUpdateWithWhereUniqueWithoutRequestInput = {
    where: RequestDataWhereUniqueInput
    data: XOR<RequestDataUpdateWithoutRequestInput, RequestDataUncheckedUpdateWithoutRequestInput>
  }

  export type RequestDataUpdateManyWithWhereWithoutRequestInput = {
    where: RequestDataScalarWhereInput
    data: XOR<RequestDataUpdateManyMutationInput, RequestDataUncheckedUpdateManyWithoutRequestInput>
  }

  export type CustomerUpsertWithoutContactRequestsInput = {
    update: XOR<CustomerUpdateWithoutContactRequestsInput, CustomerUncheckedUpdateWithoutContactRequestsInput>
    create: XOR<CustomerCreateWithoutContactRequestsInput, CustomerUncheckedCreateWithoutContactRequestsInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutContactRequestsInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutContactRequestsInput, CustomerUncheckedUpdateWithoutContactRequestsInput>
  }

  export type CustomerUpdateWithoutContactRequestsInput = {
    name?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    appointments?: AppointmentUpdateManyWithoutCustomerNestedInput
    logs?: CustomerLogUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutContactRequestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    appointments?: AppointmentUncheckedUpdateManyWithoutCustomerNestedInput
    logs?: CustomerLogUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type AppointmentUpsertWithoutContactRequestsInput = {
    update: XOR<AppointmentUpdateWithoutContactRequestsInput, AppointmentUncheckedUpdateWithoutContactRequestsInput>
    create: XOR<AppointmentCreateWithoutContactRequestsInput, AppointmentUncheckedCreateWithoutContactRequestsInput>
    where?: AppointmentWhereInput
  }

  export type AppointmentUpdateToOneWithWhereWithoutContactRequestsInput = {
    where?: AppointmentWhereInput
    data: XOR<AppointmentUpdateWithoutContactRequestsInput, AppointmentUncheckedUpdateWithoutContactRequestsInput>
  }

  export type AppointmentUpdateWithoutContactRequestsInput = {
    title?: StringFieldUpdateOperationsInput | string
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneWithoutAppointmentsNestedInput
    creator?: UserUpdateOneWithoutAppointmentsNestedInput
    notes?: AppointmentNoteUpdateManyWithoutAppointmentNestedInput
    logs?: AppointmentLogUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutContactRequestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    customerId?: NullableIntFieldUpdateOperationsInput | number | null
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: AppointmentNoteUncheckedUpdateManyWithoutAppointmentNestedInput
    logs?: AppointmentLogUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type UserUpsertWithoutContactRequestsInput = {
    update: XOR<UserUpdateWithoutContactRequestsInput, UserUncheckedUpdateWithoutContactRequestsInput>
    create: XOR<UserCreateWithoutContactRequestsInput, UserUncheckedCreateWithoutContactRequestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutContactRequestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutContactRequestsInput, UserUncheckedUpdateWithoutContactRequestsInput>
  }

  export type UserUpdateWithoutContactRequestsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    appointments?: AppointmentUpdateManyWithoutCreatorNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    customerLogs?: CustomerLogUpdateManyWithoutUserNestedInput
    appointmentNotes?: AppointmentNoteUpdateManyWithoutUserNestedInput
    appointmentLogs?: AppointmentLogUpdateManyWithoutUserNestedInput
    requestNotes?: RequestNoteUpdateManyWithoutUserNestedInput
    requestLogs?: RequestLogUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    profilePictureFile?: FileUpdateOneWithoutUserProfilesNestedInput
    requestData?: RequestDataUpdateManyWithoutCreatedByNestedInput
    requestDataHistory?: RequestDataHistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutContactRequestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutCreatorNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    customerLogs?: CustomerLogUncheckedUpdateManyWithoutUserNestedInput
    appointmentNotes?: AppointmentNoteUncheckedUpdateManyWithoutUserNestedInput
    appointmentLogs?: AppointmentLogUncheckedUpdateManyWithoutUserNestedInput
    requestNotes?: RequestNoteUncheckedUpdateManyWithoutUserNestedInput
    requestLogs?: RequestLogUncheckedUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    requestData?: RequestDataUncheckedUpdateManyWithoutCreatedByNestedInput
    requestDataHistory?: RequestDataHistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ContactRequestCreateWithoutNotesInput = {
    name: string
    email: string
    phone?: string | null
    service: string
    message: string
    status?: string
    ipAddress?: string | null
    source?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    logs?: RequestLogCreateNestedManyWithoutRequestInput
    requestData?: RequestDataCreateNestedManyWithoutRequestInput
    customer?: CustomerCreateNestedOneWithoutContactRequestsInput
    appointment?: AppointmentCreateNestedOneWithoutContactRequestsInput
    processor?: UserCreateNestedOneWithoutContactRequestsInput
  }

  export type ContactRequestUncheckedCreateWithoutNotesInput = {
    id?: number
    name: string
    email: string
    phone?: string | null
    service: string
    message: string
    status?: string
    processorId?: number | null
    customerId?: number | null
    appointmentId?: number | null
    ipAddress?: string | null
    source?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    logs?: RequestLogUncheckedCreateNestedManyWithoutRequestInput
    requestData?: RequestDataUncheckedCreateNestedManyWithoutRequestInput
  }

  export type ContactRequestCreateOrConnectWithoutNotesInput = {
    where: ContactRequestWhereUniqueInput
    create: XOR<ContactRequestCreateWithoutNotesInput, ContactRequestUncheckedCreateWithoutNotesInput>
  }

  export type UserCreateWithoutRequestNotesInput = {
    name: string
    email: string
    password: string
    role?: string
    phone?: string | null
    status?: string
    profilePicture?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    appointments?: AppointmentCreateNestedManyWithoutCreatorInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    customerLogs?: CustomerLogCreateNestedManyWithoutUserInput
    appointmentNotes?: AppointmentNoteCreateNestedManyWithoutUserInput
    appointmentLogs?: AppointmentLogCreateNestedManyWithoutUserInput
    contactRequests?: ContactRequestCreateNestedManyWithoutProcessorInput
    requestLogs?: RequestLogCreateNestedManyWithoutUserInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    profilePictureFile?: FileCreateNestedOneWithoutUserProfilesInput
    requestData?: RequestDataCreateNestedManyWithoutCreatedByInput
    requestDataHistory?: RequestDataHistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRequestNotesInput = {
    id?: number
    name: string
    email: string
    password: string
    role?: string
    phone?: string | null
    status?: string
    profilePicture?: string | null
    profilePictureId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutCreatorInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    customerLogs?: CustomerLogUncheckedCreateNestedManyWithoutUserInput
    appointmentNotes?: AppointmentNoteUncheckedCreateNestedManyWithoutUserInput
    appointmentLogs?: AppointmentLogUncheckedCreateNestedManyWithoutUserInput
    contactRequests?: ContactRequestUncheckedCreateNestedManyWithoutProcessorInput
    requestLogs?: RequestLogUncheckedCreateNestedManyWithoutUserInput
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    requestData?: RequestDataUncheckedCreateNestedManyWithoutCreatedByInput
    requestDataHistory?: RequestDataHistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRequestNotesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRequestNotesInput, UserUncheckedCreateWithoutRequestNotesInput>
  }

  export type ContactRequestUpsertWithoutNotesInput = {
    update: XOR<ContactRequestUpdateWithoutNotesInput, ContactRequestUncheckedUpdateWithoutNotesInput>
    create: XOR<ContactRequestCreateWithoutNotesInput, ContactRequestUncheckedCreateWithoutNotesInput>
    where?: ContactRequestWhereInput
  }

  export type ContactRequestUpdateToOneWithWhereWithoutNotesInput = {
    where?: ContactRequestWhereInput
    data: XOR<ContactRequestUpdateWithoutNotesInput, ContactRequestUncheckedUpdateWithoutNotesInput>
  }

  export type ContactRequestUpdateWithoutNotesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    service?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logs?: RequestLogUpdateManyWithoutRequestNestedInput
    requestData?: RequestDataUpdateManyWithoutRequestNestedInput
    customer?: CustomerUpdateOneWithoutContactRequestsNestedInput
    appointment?: AppointmentUpdateOneWithoutContactRequestsNestedInput
    processor?: UserUpdateOneWithoutContactRequestsNestedInput
  }

  export type ContactRequestUncheckedUpdateWithoutNotesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    service?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    processorId?: NullableIntFieldUpdateOperationsInput | number | null
    customerId?: NullableIntFieldUpdateOperationsInput | number | null
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logs?: RequestLogUncheckedUpdateManyWithoutRequestNestedInput
    requestData?: RequestDataUncheckedUpdateManyWithoutRequestNestedInput
  }

  export type UserUpsertWithoutRequestNotesInput = {
    update: XOR<UserUpdateWithoutRequestNotesInput, UserUncheckedUpdateWithoutRequestNotesInput>
    create: XOR<UserCreateWithoutRequestNotesInput, UserUncheckedCreateWithoutRequestNotesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRequestNotesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRequestNotesInput, UserUncheckedUpdateWithoutRequestNotesInput>
  }

  export type UserUpdateWithoutRequestNotesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    appointments?: AppointmentUpdateManyWithoutCreatorNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    customerLogs?: CustomerLogUpdateManyWithoutUserNestedInput
    appointmentNotes?: AppointmentNoteUpdateManyWithoutUserNestedInput
    appointmentLogs?: AppointmentLogUpdateManyWithoutUserNestedInput
    contactRequests?: ContactRequestUpdateManyWithoutProcessorNestedInput
    requestLogs?: RequestLogUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    profilePictureFile?: FileUpdateOneWithoutUserProfilesNestedInput
    requestData?: RequestDataUpdateManyWithoutCreatedByNestedInput
    requestDataHistory?: RequestDataHistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRequestNotesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutCreatorNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    customerLogs?: CustomerLogUncheckedUpdateManyWithoutUserNestedInput
    appointmentNotes?: AppointmentNoteUncheckedUpdateManyWithoutUserNestedInput
    appointmentLogs?: AppointmentLogUncheckedUpdateManyWithoutUserNestedInput
    contactRequests?: ContactRequestUncheckedUpdateManyWithoutProcessorNestedInput
    requestLogs?: RequestLogUncheckedUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    requestData?: RequestDataUncheckedUpdateManyWithoutCreatedByNestedInput
    requestDataHistory?: RequestDataHistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutRequestLogsInput = {
    name: string
    email: string
    password: string
    role?: string
    phone?: string | null
    status?: string
    profilePicture?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    appointments?: AppointmentCreateNestedManyWithoutCreatorInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    customerLogs?: CustomerLogCreateNestedManyWithoutUserInput
    appointmentNotes?: AppointmentNoteCreateNestedManyWithoutUserInput
    appointmentLogs?: AppointmentLogCreateNestedManyWithoutUserInput
    contactRequests?: ContactRequestCreateNestedManyWithoutProcessorInput
    requestNotes?: RequestNoteCreateNestedManyWithoutUserInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    profilePictureFile?: FileCreateNestedOneWithoutUserProfilesInput
    requestData?: RequestDataCreateNestedManyWithoutCreatedByInput
    requestDataHistory?: RequestDataHistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRequestLogsInput = {
    id?: number
    name: string
    email: string
    password: string
    role?: string
    phone?: string | null
    status?: string
    profilePicture?: string | null
    profilePictureId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutCreatorInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    customerLogs?: CustomerLogUncheckedCreateNestedManyWithoutUserInput
    appointmentNotes?: AppointmentNoteUncheckedCreateNestedManyWithoutUserInput
    appointmentLogs?: AppointmentLogUncheckedCreateNestedManyWithoutUserInput
    contactRequests?: ContactRequestUncheckedCreateNestedManyWithoutProcessorInput
    requestNotes?: RequestNoteUncheckedCreateNestedManyWithoutUserInput
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    requestData?: RequestDataUncheckedCreateNestedManyWithoutCreatedByInput
    requestDataHistory?: RequestDataHistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRequestLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRequestLogsInput, UserUncheckedCreateWithoutRequestLogsInput>
  }

  export type ContactRequestCreateWithoutLogsInput = {
    name: string
    email: string
    phone?: string | null
    service: string
    message: string
    status?: string
    ipAddress?: string | null
    source?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: RequestNoteCreateNestedManyWithoutRequestInput
    requestData?: RequestDataCreateNestedManyWithoutRequestInput
    customer?: CustomerCreateNestedOneWithoutContactRequestsInput
    appointment?: AppointmentCreateNestedOneWithoutContactRequestsInput
    processor?: UserCreateNestedOneWithoutContactRequestsInput
  }

  export type ContactRequestUncheckedCreateWithoutLogsInput = {
    id?: number
    name: string
    email: string
    phone?: string | null
    service: string
    message: string
    status?: string
    processorId?: number | null
    customerId?: number | null
    appointmentId?: number | null
    ipAddress?: string | null
    source?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: RequestNoteUncheckedCreateNestedManyWithoutRequestInput
    requestData?: RequestDataUncheckedCreateNestedManyWithoutRequestInput
  }

  export type ContactRequestCreateOrConnectWithoutLogsInput = {
    where: ContactRequestWhereUniqueInput
    create: XOR<ContactRequestCreateWithoutLogsInput, ContactRequestUncheckedCreateWithoutLogsInput>
  }

  export type UserUpsertWithoutRequestLogsInput = {
    update: XOR<UserUpdateWithoutRequestLogsInput, UserUncheckedUpdateWithoutRequestLogsInput>
    create: XOR<UserCreateWithoutRequestLogsInput, UserUncheckedCreateWithoutRequestLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRequestLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRequestLogsInput, UserUncheckedUpdateWithoutRequestLogsInput>
  }

  export type UserUpdateWithoutRequestLogsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    appointments?: AppointmentUpdateManyWithoutCreatorNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    customerLogs?: CustomerLogUpdateManyWithoutUserNestedInput
    appointmentNotes?: AppointmentNoteUpdateManyWithoutUserNestedInput
    appointmentLogs?: AppointmentLogUpdateManyWithoutUserNestedInput
    contactRequests?: ContactRequestUpdateManyWithoutProcessorNestedInput
    requestNotes?: RequestNoteUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    profilePictureFile?: FileUpdateOneWithoutUserProfilesNestedInput
    requestData?: RequestDataUpdateManyWithoutCreatedByNestedInput
    requestDataHistory?: RequestDataHistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRequestLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutCreatorNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    customerLogs?: CustomerLogUncheckedUpdateManyWithoutUserNestedInput
    appointmentNotes?: AppointmentNoteUncheckedUpdateManyWithoutUserNestedInput
    appointmentLogs?: AppointmentLogUncheckedUpdateManyWithoutUserNestedInput
    contactRequests?: ContactRequestUncheckedUpdateManyWithoutProcessorNestedInput
    requestNotes?: RequestNoteUncheckedUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    requestData?: RequestDataUncheckedUpdateManyWithoutCreatedByNestedInput
    requestDataHistory?: RequestDataHistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ContactRequestUpsertWithoutLogsInput = {
    update: XOR<ContactRequestUpdateWithoutLogsInput, ContactRequestUncheckedUpdateWithoutLogsInput>
    create: XOR<ContactRequestCreateWithoutLogsInput, ContactRequestUncheckedCreateWithoutLogsInput>
    where?: ContactRequestWhereInput
  }

  export type ContactRequestUpdateToOneWithWhereWithoutLogsInput = {
    where?: ContactRequestWhereInput
    data: XOR<ContactRequestUpdateWithoutLogsInput, ContactRequestUncheckedUpdateWithoutLogsInput>
  }

  export type ContactRequestUpdateWithoutLogsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    service?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: RequestNoteUpdateManyWithoutRequestNestedInput
    requestData?: RequestDataUpdateManyWithoutRequestNestedInput
    customer?: CustomerUpdateOneWithoutContactRequestsNestedInput
    appointment?: AppointmentUpdateOneWithoutContactRequestsNestedInput
    processor?: UserUpdateOneWithoutContactRequestsNestedInput
  }

  export type ContactRequestUncheckedUpdateWithoutLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    service?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    processorId?: NullableIntFieldUpdateOperationsInput | number | null
    customerId?: NullableIntFieldUpdateOperationsInput | number | null
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: RequestNoteUncheckedUpdateManyWithoutRequestNestedInput
    requestData?: RequestDataUncheckedUpdateManyWithoutRequestNestedInput
  }

  export type ContactRequestCreateWithoutRequestDataInput = {
    name: string
    email: string
    phone?: string | null
    service: string
    message: string
    status?: string
    ipAddress?: string | null
    source?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: RequestNoteCreateNestedManyWithoutRequestInput
    logs?: RequestLogCreateNestedManyWithoutRequestInput
    customer?: CustomerCreateNestedOneWithoutContactRequestsInput
    appointment?: AppointmentCreateNestedOneWithoutContactRequestsInput
    processor?: UserCreateNestedOneWithoutContactRequestsInput
  }

  export type ContactRequestUncheckedCreateWithoutRequestDataInput = {
    id?: number
    name: string
    email: string
    phone?: string | null
    service: string
    message: string
    status?: string
    processorId?: number | null
    customerId?: number | null
    appointmentId?: number | null
    ipAddress?: string | null
    source?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: RequestNoteUncheckedCreateNestedManyWithoutRequestInput
    logs?: RequestLogUncheckedCreateNestedManyWithoutRequestInput
  }

  export type ContactRequestCreateOrConnectWithoutRequestDataInput = {
    where: ContactRequestWhereUniqueInput
    create: XOR<ContactRequestCreateWithoutRequestDataInput, ContactRequestUncheckedCreateWithoutRequestDataInput>
  }

  export type UserCreateWithoutRequestDataInput = {
    name: string
    email: string
    password: string
    role?: string
    phone?: string | null
    status?: string
    profilePicture?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    appointments?: AppointmentCreateNestedManyWithoutCreatorInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    customerLogs?: CustomerLogCreateNestedManyWithoutUserInput
    appointmentNotes?: AppointmentNoteCreateNestedManyWithoutUserInput
    appointmentLogs?: AppointmentLogCreateNestedManyWithoutUserInput
    contactRequests?: ContactRequestCreateNestedManyWithoutProcessorInput
    requestNotes?: RequestNoteCreateNestedManyWithoutUserInput
    requestLogs?: RequestLogCreateNestedManyWithoutUserInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    profilePictureFile?: FileCreateNestedOneWithoutUserProfilesInput
    requestDataHistory?: RequestDataHistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRequestDataInput = {
    id?: number
    name: string
    email: string
    password: string
    role?: string
    phone?: string | null
    status?: string
    profilePicture?: string | null
    profilePictureId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutCreatorInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    customerLogs?: CustomerLogUncheckedCreateNestedManyWithoutUserInput
    appointmentNotes?: AppointmentNoteUncheckedCreateNestedManyWithoutUserInput
    appointmentLogs?: AppointmentLogUncheckedCreateNestedManyWithoutUserInput
    contactRequests?: ContactRequestUncheckedCreateNestedManyWithoutProcessorInput
    requestNotes?: RequestNoteUncheckedCreateNestedManyWithoutUserInput
    requestLogs?: RequestLogUncheckedCreateNestedManyWithoutUserInput
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    requestDataHistory?: RequestDataHistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRequestDataInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRequestDataInput, UserUncheckedCreateWithoutRequestDataInput>
  }

  export type RequestDataHistoryCreateWithoutRequestDataInput = {
    data: JsonNullValueInput | InputJsonValue
    changedBy?: string | null
    changeReason?: string | null
    version: number
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutRequestDataHistoryInput
  }

  export type RequestDataHistoryUncheckedCreateWithoutRequestDataInput = {
    id?: number
    data: JsonNullValueInput | InputJsonValue
    changedBy?: string | null
    changeReason?: string | null
    version: number
    createdAt?: Date | string
    userId?: number | null
  }

  export type RequestDataHistoryCreateOrConnectWithoutRequestDataInput = {
    where: RequestDataHistoryWhereUniqueInput
    create: XOR<RequestDataHistoryCreateWithoutRequestDataInput, RequestDataHistoryUncheckedCreateWithoutRequestDataInput>
  }

  export type RequestDataHistoryCreateManyRequestDataInputEnvelope = {
    data: RequestDataHistoryCreateManyRequestDataInput | RequestDataHistoryCreateManyRequestDataInput[]
    skipDuplicates?: boolean
  }

  export type ContactRequestUpsertWithoutRequestDataInput = {
    update: XOR<ContactRequestUpdateWithoutRequestDataInput, ContactRequestUncheckedUpdateWithoutRequestDataInput>
    create: XOR<ContactRequestCreateWithoutRequestDataInput, ContactRequestUncheckedCreateWithoutRequestDataInput>
    where?: ContactRequestWhereInput
  }

  export type ContactRequestUpdateToOneWithWhereWithoutRequestDataInput = {
    where?: ContactRequestWhereInput
    data: XOR<ContactRequestUpdateWithoutRequestDataInput, ContactRequestUncheckedUpdateWithoutRequestDataInput>
  }

  export type ContactRequestUpdateWithoutRequestDataInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    service?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: RequestNoteUpdateManyWithoutRequestNestedInput
    logs?: RequestLogUpdateManyWithoutRequestNestedInput
    customer?: CustomerUpdateOneWithoutContactRequestsNestedInput
    appointment?: AppointmentUpdateOneWithoutContactRequestsNestedInput
    processor?: UserUpdateOneWithoutContactRequestsNestedInput
  }

  export type ContactRequestUncheckedUpdateWithoutRequestDataInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    service?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    processorId?: NullableIntFieldUpdateOperationsInput | number | null
    customerId?: NullableIntFieldUpdateOperationsInput | number | null
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: RequestNoteUncheckedUpdateManyWithoutRequestNestedInput
    logs?: RequestLogUncheckedUpdateManyWithoutRequestNestedInput
  }

  export type UserUpsertWithoutRequestDataInput = {
    update: XOR<UserUpdateWithoutRequestDataInput, UserUncheckedUpdateWithoutRequestDataInput>
    create: XOR<UserCreateWithoutRequestDataInput, UserUncheckedCreateWithoutRequestDataInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRequestDataInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRequestDataInput, UserUncheckedUpdateWithoutRequestDataInput>
  }

  export type UserUpdateWithoutRequestDataInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    appointments?: AppointmentUpdateManyWithoutCreatorNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    customerLogs?: CustomerLogUpdateManyWithoutUserNestedInput
    appointmentNotes?: AppointmentNoteUpdateManyWithoutUserNestedInput
    appointmentLogs?: AppointmentLogUpdateManyWithoutUserNestedInput
    contactRequests?: ContactRequestUpdateManyWithoutProcessorNestedInput
    requestNotes?: RequestNoteUpdateManyWithoutUserNestedInput
    requestLogs?: RequestLogUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    profilePictureFile?: FileUpdateOneWithoutUserProfilesNestedInput
    requestDataHistory?: RequestDataHistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRequestDataInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutCreatorNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    customerLogs?: CustomerLogUncheckedUpdateManyWithoutUserNestedInput
    appointmentNotes?: AppointmentNoteUncheckedUpdateManyWithoutUserNestedInput
    appointmentLogs?: AppointmentLogUncheckedUpdateManyWithoutUserNestedInput
    contactRequests?: ContactRequestUncheckedUpdateManyWithoutProcessorNestedInput
    requestNotes?: RequestNoteUncheckedUpdateManyWithoutUserNestedInput
    requestLogs?: RequestLogUncheckedUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    requestDataHistory?: RequestDataHistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RequestDataHistoryUpsertWithWhereUniqueWithoutRequestDataInput = {
    where: RequestDataHistoryWhereUniqueInput
    update: XOR<RequestDataHistoryUpdateWithoutRequestDataInput, RequestDataHistoryUncheckedUpdateWithoutRequestDataInput>
    create: XOR<RequestDataHistoryCreateWithoutRequestDataInput, RequestDataHistoryUncheckedCreateWithoutRequestDataInput>
  }

  export type RequestDataHistoryUpdateWithWhereUniqueWithoutRequestDataInput = {
    where: RequestDataHistoryWhereUniqueInput
    data: XOR<RequestDataHistoryUpdateWithoutRequestDataInput, RequestDataHistoryUncheckedUpdateWithoutRequestDataInput>
  }

  export type RequestDataHistoryUpdateManyWithWhereWithoutRequestDataInput = {
    where: RequestDataHistoryScalarWhereInput
    data: XOR<RequestDataHistoryUpdateManyMutationInput, RequestDataHistoryUncheckedUpdateManyWithoutRequestDataInput>
  }

  export type RequestDataCreateWithoutHistoryInput = {
    category: string
    label: string
    order?: number
    dataType: string
    data: JsonNullValueInput | InputJsonValue
    isValid?: boolean
    processedBy?: string | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    request: ContactRequestCreateNestedOneWithoutRequestDataInput
    createdBy?: UserCreateNestedOneWithoutRequestDataInput
  }

  export type RequestDataUncheckedCreateWithoutHistoryInput = {
    id?: number
    requestId: number
    category: string
    label: string
    order?: number
    dataType: string
    data: JsonNullValueInput | InputJsonValue
    isValid?: boolean
    processedBy?: string | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: number | null
  }

  export type RequestDataCreateOrConnectWithoutHistoryInput = {
    where: RequestDataWhereUniqueInput
    create: XOR<RequestDataCreateWithoutHistoryInput, RequestDataUncheckedCreateWithoutHistoryInput>
  }

  export type UserCreateWithoutRequestDataHistoryInput = {
    name: string
    email: string
    password: string
    role?: string
    phone?: string | null
    status?: string
    profilePicture?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    appointments?: AppointmentCreateNestedManyWithoutCreatorInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    customerLogs?: CustomerLogCreateNestedManyWithoutUserInput
    appointmentNotes?: AppointmentNoteCreateNestedManyWithoutUserInput
    appointmentLogs?: AppointmentLogCreateNestedManyWithoutUserInput
    contactRequests?: ContactRequestCreateNestedManyWithoutProcessorInput
    requestNotes?: RequestNoteCreateNestedManyWithoutUserInput
    requestLogs?: RequestLogCreateNestedManyWithoutUserInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    profilePictureFile?: FileCreateNestedOneWithoutUserProfilesInput
    requestData?: RequestDataCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutRequestDataHistoryInput = {
    id?: number
    name: string
    email: string
    password: string
    role?: string
    phone?: string | null
    status?: string
    profilePicture?: string | null
    profilePictureId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutCreatorInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    customerLogs?: CustomerLogUncheckedCreateNestedManyWithoutUserInput
    appointmentNotes?: AppointmentNoteUncheckedCreateNestedManyWithoutUserInput
    appointmentLogs?: AppointmentLogUncheckedCreateNestedManyWithoutUserInput
    contactRequests?: ContactRequestUncheckedCreateNestedManyWithoutProcessorInput
    requestNotes?: RequestNoteUncheckedCreateNestedManyWithoutUserInput
    requestLogs?: RequestLogUncheckedCreateNestedManyWithoutUserInput
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    requestData?: RequestDataUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutRequestDataHistoryInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRequestDataHistoryInput, UserUncheckedCreateWithoutRequestDataHistoryInput>
  }

  export type RequestDataUpsertWithoutHistoryInput = {
    update: XOR<RequestDataUpdateWithoutHistoryInput, RequestDataUncheckedUpdateWithoutHistoryInput>
    create: XOR<RequestDataCreateWithoutHistoryInput, RequestDataUncheckedCreateWithoutHistoryInput>
    where?: RequestDataWhereInput
  }

  export type RequestDataUpdateToOneWithWhereWithoutHistoryInput = {
    where?: RequestDataWhereInput
    data: XOR<RequestDataUpdateWithoutHistoryInput, RequestDataUncheckedUpdateWithoutHistoryInput>
  }

  export type RequestDataUpdateWithoutHistoryInput = {
    category?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    dataType?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    isValid?: BoolFieldUpdateOperationsInput | boolean
    processedBy?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    request?: ContactRequestUpdateOneRequiredWithoutRequestDataNestedInput
    createdBy?: UserUpdateOneWithoutRequestDataNestedInput
  }

  export type RequestDataUncheckedUpdateWithoutHistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestId?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    dataType?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    isValid?: BoolFieldUpdateOperationsInput | boolean
    processedBy?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserUpsertWithoutRequestDataHistoryInput = {
    update: XOR<UserUpdateWithoutRequestDataHistoryInput, UserUncheckedUpdateWithoutRequestDataHistoryInput>
    create: XOR<UserCreateWithoutRequestDataHistoryInput, UserUncheckedCreateWithoutRequestDataHistoryInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRequestDataHistoryInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRequestDataHistoryInput, UserUncheckedUpdateWithoutRequestDataHistoryInput>
  }

  export type UserUpdateWithoutRequestDataHistoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    appointments?: AppointmentUpdateManyWithoutCreatorNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    customerLogs?: CustomerLogUpdateManyWithoutUserNestedInput
    appointmentNotes?: AppointmentNoteUpdateManyWithoutUserNestedInput
    appointmentLogs?: AppointmentLogUpdateManyWithoutUserNestedInput
    contactRequests?: ContactRequestUpdateManyWithoutProcessorNestedInput
    requestNotes?: RequestNoteUpdateManyWithoutUserNestedInput
    requestLogs?: RequestLogUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    profilePictureFile?: FileUpdateOneWithoutUserProfilesNestedInput
    requestData?: RequestDataUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutRequestDataHistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    profilePictureId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutCreatorNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    customerLogs?: CustomerLogUncheckedUpdateManyWithoutUserNestedInput
    appointmentNotes?: AppointmentNoteUncheckedUpdateManyWithoutUserNestedInput
    appointmentLogs?: AppointmentLogUncheckedUpdateManyWithoutUserNestedInput
    contactRequests?: ContactRequestUncheckedUpdateManyWithoutProcessorNestedInput
    requestNotes?: RequestNoteUncheckedUpdateManyWithoutUserNestedInput
    requestLogs?: RequestLogUncheckedUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    requestData?: RequestDataUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserCreateWithoutProfilePictureFileInput = {
    name: string
    email: string
    password: string
    role?: string
    phone?: string | null
    status?: string
    profilePicture?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    settings?: UserSettingsCreateNestedOneWithoutUserInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    appointments?: AppointmentCreateNestedManyWithoutCreatorInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    customerLogs?: CustomerLogCreateNestedManyWithoutUserInput
    appointmentNotes?: AppointmentNoteCreateNestedManyWithoutUserInput
    appointmentLogs?: AppointmentLogCreateNestedManyWithoutUserInput
    contactRequests?: ContactRequestCreateNestedManyWithoutProcessorInput
    requestNotes?: RequestNoteCreateNestedManyWithoutUserInput
    requestLogs?: RequestLogCreateNestedManyWithoutUserInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    requestData?: RequestDataCreateNestedManyWithoutCreatedByInput
    requestDataHistory?: RequestDataHistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProfilePictureFileInput = {
    id?: number
    name: string
    email: string
    password: string
    role?: string
    phone?: string | null
    status?: string
    profilePicture?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    settings?: UserSettingsUncheckedCreateNestedOneWithoutUserInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutCreatorInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    customerLogs?: CustomerLogUncheckedCreateNestedManyWithoutUserInput
    appointmentNotes?: AppointmentNoteUncheckedCreateNestedManyWithoutUserInput
    appointmentLogs?: AppointmentLogUncheckedCreateNestedManyWithoutUserInput
    contactRequests?: ContactRequestUncheckedCreateNestedManyWithoutProcessorInput
    requestNotes?: RequestNoteUncheckedCreateNestedManyWithoutUserInput
    requestLogs?: RequestLogUncheckedCreateNestedManyWithoutUserInput
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    requestData?: RequestDataUncheckedCreateNestedManyWithoutCreatedByInput
    requestDataHistory?: RequestDataHistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProfilePictureFileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfilePictureFileInput, UserUncheckedCreateWithoutProfilePictureFileInput>
  }

  export type UserCreateManyProfilePictureFileInputEnvelope = {
    data: UserCreateManyProfilePictureFileInput | UserCreateManyProfilePictureFileInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutProfilePictureFileInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutProfilePictureFileInput, UserUncheckedUpdateWithoutProfilePictureFileInput>
    create: XOR<UserCreateWithoutProfilePictureFileInput, UserUncheckedCreateWithoutProfilePictureFileInput>
  }

  export type UserUpdateWithWhereUniqueWithoutProfilePictureFileInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutProfilePictureFileInput, UserUncheckedUpdateWithoutProfilePictureFileInput>
  }

  export type UserUpdateManyWithWhereWithoutProfilePictureFileInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutProfilePictureFileInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    phone?: StringNullableFilter<"User"> | string | null
    status?: StringFilter<"User"> | string
    profilePicture?: StringNullableFilter<"User"> | string | null
    profilePictureId?: IntNullableFilter<"User"> | number | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    createdBy?: IntNullableFilter<"User"> | number | null
    updatedBy?: IntNullableFilter<"User"> | number | null
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    resetToken?: StringNullableFilter<"User"> | string | null
    resetTokenExpiry?: DateTimeNullableFilter<"User"> | Date | string | null
  }

  export type UserActivityCreateManyUserInput = {
    id?: number
    timestamp?: Date | string | null
    activity: string
    details?: string | null
    ipAddress?: string | null
  }

  export type AppointmentCreateManyCreatorInput = {
    id?: number
    title: string
    customerId?: number | null
    appointmentDate: Date | string
    duration?: number | null
    location?: string | null
    description?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RefreshTokenCreateManyUserInput = {
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
    createdByIp?: string | null
    isRevoked?: boolean
    revokedAt?: Date | string | null
    revokedByIp?: string | null
    replacedByToken?: string | null
  }

  export type CustomerLogCreateManyUserInput = {
    id?: number
    customerId: number
    userName: string
    action: string
    details?: string | null
    createdAt?: Date | string
  }

  export type AppointmentNoteCreateManyUserInput = {
    id?: number
    appointmentId: number
    userName: string
    text: string
    createdAt?: Date | string
  }

  export type AppointmentLogCreateManyUserInput = {
    id?: number
    appointmentId: number
    userName: string
    action: string
    details?: string | null
    createdAt?: Date | string
  }

  export type ContactRequestCreateManyProcessorInput = {
    id?: number
    name: string
    email: string
    phone?: string | null
    service: string
    message: string
    status?: string
    customerId?: number | null
    appointmentId?: number | null
    ipAddress?: string | null
    source?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RequestNoteCreateManyUserInput = {
    id?: number
    requestId: number
    userName: string
    text: string
    createdAt?: Date | string
  }

  export type RequestLogCreateManyUserInput = {
    id?: number
    requestId: number
    userName: string
    action: string
    details?: string | null
    createdAt?: Date | string
  }

  export type UserPermissionCreateManyUserInput = {
    id?: number
    permissionId: number
    grantedAt?: Date | string
    grantedBy?: number | null
  }

  export type RequestDataCreateManyCreatedByInput = {
    id?: number
    requestId: number
    category: string
    label: string
    order?: number
    dataType: string
    data: JsonNullValueInput | InputJsonValue
    isValid?: boolean
    processedBy?: string | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RequestDataHistoryCreateManyUserInput = {
    id?: number
    requestDataId: number
    data: JsonNullValueInput | InputJsonValue
    changedBy?: string | null
    changeReason?: string | null
    version: number
    createdAt?: Date | string
  }

  export type UserActivityUpdateWithoutUserInput = {
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activity?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserActivityUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activity?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserActivityUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activity?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AppointmentUpdateWithoutCreatorInput = {
    title?: StringFieldUpdateOperationsInput | string
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneWithoutAppointmentsNestedInput
    notes?: AppointmentNoteUpdateManyWithoutAppointmentNestedInput
    logs?: AppointmentLogUpdateManyWithoutAppointmentNestedInput
    contactRequests?: ContactRequestUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    customerId?: NullableIntFieldUpdateOperationsInput | number | null
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: AppointmentNoteUncheckedUpdateManyWithoutAppointmentNestedInput
    logs?: AppointmentLogUncheckedUpdateManyWithoutAppointmentNestedInput
    contactRequests?: ContactRequestUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateManyWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    customerId?: NullableIntFieldUpdateOperationsInput | number | null
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefreshTokenUpdateWithoutUserInput = {
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByIp?: NullableStringFieldUpdateOperationsInput | string | null
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revokedByIp?: NullableStringFieldUpdateOperationsInput | string | null
    replacedByToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RefreshTokenUncheckedUpdateWithoutUserInput = {
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByIp?: NullableStringFieldUpdateOperationsInput | string | null
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revokedByIp?: NullableStringFieldUpdateOperationsInput | string | null
    replacedByToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RefreshTokenUncheckedUpdateManyWithoutUserInput = {
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByIp?: NullableStringFieldUpdateOperationsInput | string | null
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revokedByIp?: NullableStringFieldUpdateOperationsInput | string | null
    replacedByToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CustomerLogUpdateWithoutUserInput = {
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutLogsNestedInput
  }

  export type CustomerLogUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerId?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerLogUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerId?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentNoteUpdateWithoutUserInput = {
    userName?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointment?: AppointmentUpdateOneRequiredWithoutNotesNestedInput
  }

  export type AppointmentNoteUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    appointmentId?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentNoteUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    appointmentId?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentLogUpdateWithoutUserInput = {
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointment?: AppointmentUpdateOneRequiredWithoutLogsNestedInput
  }

  export type AppointmentLogUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    appointmentId?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentLogUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    appointmentId?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactRequestUpdateWithoutProcessorInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    service?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: RequestNoteUpdateManyWithoutRequestNestedInput
    logs?: RequestLogUpdateManyWithoutRequestNestedInput
    requestData?: RequestDataUpdateManyWithoutRequestNestedInput
    customer?: CustomerUpdateOneWithoutContactRequestsNestedInput
    appointment?: AppointmentUpdateOneWithoutContactRequestsNestedInput
  }

  export type ContactRequestUncheckedUpdateWithoutProcessorInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    service?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    customerId?: NullableIntFieldUpdateOperationsInput | number | null
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: RequestNoteUncheckedUpdateManyWithoutRequestNestedInput
    logs?: RequestLogUncheckedUpdateManyWithoutRequestNestedInput
    requestData?: RequestDataUncheckedUpdateManyWithoutRequestNestedInput
  }

  export type ContactRequestUncheckedUpdateManyWithoutProcessorInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    service?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    customerId?: NullableIntFieldUpdateOperationsInput | number | null
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestNoteUpdateWithoutUserInput = {
    userName?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    request?: ContactRequestUpdateOneRequiredWithoutNotesNestedInput
  }

  export type RequestNoteUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestId?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestNoteUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestId?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestLogUpdateWithoutUserInput = {
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    request?: ContactRequestUpdateOneRequiredWithoutLogsNestedInput
  }

  export type RequestLogUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestId?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestLogUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestId?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPermissionUpdateWithoutUserInput = {
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grantedBy?: NullableIntFieldUpdateOperationsInput | number | null
    permission?: PermissionUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserPermissionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    permissionId?: IntFieldUpdateOperationsInput | number
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grantedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserPermissionUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    permissionId?: IntFieldUpdateOperationsInput | number
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grantedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RequestDataUpdateWithoutCreatedByInput = {
    category?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    dataType?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    isValid?: BoolFieldUpdateOperationsInput | boolean
    processedBy?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    request?: ContactRequestUpdateOneRequiredWithoutRequestDataNestedInput
    history?: RequestDataHistoryUpdateManyWithoutRequestDataNestedInput
  }

  export type RequestDataUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestId?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    dataType?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    isValid?: BoolFieldUpdateOperationsInput | boolean
    processedBy?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    history?: RequestDataHistoryUncheckedUpdateManyWithoutRequestDataNestedInput
  }

  export type RequestDataUncheckedUpdateManyWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestId?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    dataType?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    isValid?: BoolFieldUpdateOperationsInput | boolean
    processedBy?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestDataHistoryUpdateWithoutUserInput = {
    data?: JsonNullValueInput | InputJsonValue
    changedBy?: NullableStringFieldUpdateOperationsInput | string | null
    changeReason?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requestData?: RequestDataUpdateOneRequiredWithoutHistoryNestedInput
  }

  export type RequestDataHistoryUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestDataId?: IntFieldUpdateOperationsInput | number
    data?: JsonNullValueInput | InputJsonValue
    changedBy?: NullableStringFieldUpdateOperationsInput | string | null
    changeReason?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestDataHistoryUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestDataId?: IntFieldUpdateOperationsInput | number
    data?: JsonNullValueInput | InputJsonValue
    changedBy?: NullableStringFieldUpdateOperationsInput | string | null
    changeReason?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPermissionCreateManyPermissionInput = {
    id?: number
    userId: number
    grantedAt?: Date | string
    grantedBy?: number | null
  }

  export type UserPermissionUpdateWithoutPermissionInput = {
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grantedBy?: NullableIntFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutPermissionsNestedInput
  }

  export type UserPermissionUncheckedUpdateWithoutPermissionInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grantedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserPermissionUncheckedUpdateManyWithoutPermissionInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grantedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AppointmentCreateManyCustomerInput = {
    id?: number
    title: string
    appointmentDate: Date | string
    duration?: number | null
    location?: string | null
    description?: string | null
    status?: string
    createdBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomerLogCreateManyCustomerInput = {
    id?: number
    userId?: number | null
    userName: string
    action: string
    details?: string | null
    createdAt?: Date | string
  }

  export type ContactRequestCreateManyCustomerInput = {
    id?: number
    name: string
    email: string
    phone?: string | null
    service: string
    message: string
    status?: string
    processorId?: number | null
    appointmentId?: number | null
    ipAddress?: string | null
    source?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointmentUpdateWithoutCustomerInput = {
    title?: StringFieldUpdateOperationsInput | string
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneWithoutAppointmentsNestedInput
    notes?: AppointmentNoteUpdateManyWithoutAppointmentNestedInput
    logs?: AppointmentLogUpdateManyWithoutAppointmentNestedInput
    contactRequests?: ContactRequestUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutCustomerInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: AppointmentNoteUncheckedUpdateManyWithoutAppointmentNestedInput
    logs?: AppointmentLogUncheckedUpdateManyWithoutAppointmentNestedInput
    contactRequests?: ContactRequestUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateManyWithoutCustomerInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerLogUpdateWithoutCustomerInput = {
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutCustomerLogsNestedInput
  }

  export type CustomerLogUncheckedUpdateWithoutCustomerInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerLogUncheckedUpdateManyWithoutCustomerInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactRequestUpdateWithoutCustomerInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    service?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: RequestNoteUpdateManyWithoutRequestNestedInput
    logs?: RequestLogUpdateManyWithoutRequestNestedInput
    requestData?: RequestDataUpdateManyWithoutRequestNestedInput
    appointment?: AppointmentUpdateOneWithoutContactRequestsNestedInput
    processor?: UserUpdateOneWithoutContactRequestsNestedInput
  }

  export type ContactRequestUncheckedUpdateWithoutCustomerInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    service?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    processorId?: NullableIntFieldUpdateOperationsInput | number | null
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: RequestNoteUncheckedUpdateManyWithoutRequestNestedInput
    logs?: RequestLogUncheckedUpdateManyWithoutRequestNestedInput
    requestData?: RequestDataUncheckedUpdateManyWithoutRequestNestedInput
  }

  export type ContactRequestUncheckedUpdateManyWithoutCustomerInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    service?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    processorId?: NullableIntFieldUpdateOperationsInput | number | null
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentNoteCreateManyAppointmentInput = {
    id?: number
    userId: number
    userName: string
    text: string
    createdAt?: Date | string
  }

  export type AppointmentLogCreateManyAppointmentInput = {
    id?: number
    userId: number
    userName: string
    action: string
    details?: string | null
    createdAt?: Date | string
  }

  export type ContactRequestCreateManyAppointmentInput = {
    id?: number
    name: string
    email: string
    phone?: string | null
    service: string
    message: string
    status?: string
    processorId?: number | null
    customerId?: number | null
    ipAddress?: string | null
    source?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointmentNoteUpdateWithoutAppointmentInput = {
    userName?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAppointmentNotesNestedInput
  }

  export type AppointmentNoteUncheckedUpdateWithoutAppointmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentNoteUncheckedUpdateManyWithoutAppointmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentLogUpdateWithoutAppointmentInput = {
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAppointmentLogsNestedInput
  }

  export type AppointmentLogUncheckedUpdateWithoutAppointmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentLogUncheckedUpdateManyWithoutAppointmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactRequestUpdateWithoutAppointmentInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    service?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: RequestNoteUpdateManyWithoutRequestNestedInput
    logs?: RequestLogUpdateManyWithoutRequestNestedInput
    requestData?: RequestDataUpdateManyWithoutRequestNestedInput
    customer?: CustomerUpdateOneWithoutContactRequestsNestedInput
    processor?: UserUpdateOneWithoutContactRequestsNestedInput
  }

  export type ContactRequestUncheckedUpdateWithoutAppointmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    service?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    processorId?: NullableIntFieldUpdateOperationsInput | number | null
    customerId?: NullableIntFieldUpdateOperationsInput | number | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: RequestNoteUncheckedUpdateManyWithoutRequestNestedInput
    logs?: RequestLogUncheckedUpdateManyWithoutRequestNestedInput
    requestData?: RequestDataUncheckedUpdateManyWithoutRequestNestedInput
  }

  export type ContactRequestUncheckedUpdateManyWithoutAppointmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    service?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    processorId?: NullableIntFieldUpdateOperationsInput | number | null
    customerId?: NullableIntFieldUpdateOperationsInput | number | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestNoteCreateManyRequestInput = {
    id?: number
    userId: number
    userName: string
    text: string
    createdAt?: Date | string
  }

  export type RequestLogCreateManyRequestInput = {
    id?: number
    userId: number
    userName: string
    action: string
    details?: string | null
    createdAt?: Date | string
  }

  export type RequestDataCreateManyRequestInput = {
    id?: number
    category: string
    label: string
    order?: number
    dataType: string
    data: JsonNullValueInput | InputJsonValue
    isValid?: boolean
    processedBy?: string | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: number | null
  }

  export type RequestNoteUpdateWithoutRequestInput = {
    userName?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRequestNotesNestedInput
  }

  export type RequestNoteUncheckedUpdateWithoutRequestInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestNoteUncheckedUpdateManyWithoutRequestInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestLogUpdateWithoutRequestInput = {
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRequestLogsNestedInput
  }

  export type RequestLogUncheckedUpdateWithoutRequestInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestLogUncheckedUpdateManyWithoutRequestInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestDataUpdateWithoutRequestInput = {
    category?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    dataType?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    isValid?: BoolFieldUpdateOperationsInput | boolean
    processedBy?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneWithoutRequestDataNestedInput
    history?: RequestDataHistoryUpdateManyWithoutRequestDataNestedInput
  }

  export type RequestDataUncheckedUpdateWithoutRequestInput = {
    id?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    dataType?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    isValid?: BoolFieldUpdateOperationsInput | boolean
    processedBy?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableIntFieldUpdateOperationsInput | number | null
    history?: RequestDataHistoryUncheckedUpdateManyWithoutRequestDataNestedInput
  }

  export type RequestDataUncheckedUpdateManyWithoutRequestInput = {
    id?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    dataType?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    isValid?: BoolFieldUpdateOperationsInput | boolean
    processedBy?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RequestDataHistoryCreateManyRequestDataInput = {
    id?: number
    data: JsonNullValueInput | InputJsonValue
    changedBy?: string | null
    changeReason?: string | null
    version: number
    createdAt?: Date | string
    userId?: number | null
  }

  export type RequestDataHistoryUpdateWithoutRequestDataInput = {
    data?: JsonNullValueInput | InputJsonValue
    changedBy?: NullableStringFieldUpdateOperationsInput | string | null
    changeReason?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutRequestDataHistoryNestedInput
  }

  export type RequestDataHistoryUncheckedUpdateWithoutRequestDataInput = {
    id?: IntFieldUpdateOperationsInput | number
    data?: JsonNullValueInput | InputJsonValue
    changedBy?: NullableStringFieldUpdateOperationsInput | string | null
    changeReason?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RequestDataHistoryUncheckedUpdateManyWithoutRequestDataInput = {
    id?: IntFieldUpdateOperationsInput | number
    data?: JsonNullValueInput | InputJsonValue
    changedBy?: NullableStringFieldUpdateOperationsInput | string | null
    changeReason?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserCreateManyProfilePictureFileInput = {
    id?: number
    name: string
    email: string
    password: string
    role?: string
    phone?: string | null
    status?: string
    profilePicture?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    lastLoginAt?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
  }

  export type UserUpdateWithoutProfilePictureFileInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: UserSettingsUpdateOneWithoutUserNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    appointments?: AppointmentUpdateManyWithoutCreatorNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    customerLogs?: CustomerLogUpdateManyWithoutUserNestedInput
    appointmentNotes?: AppointmentNoteUpdateManyWithoutUserNestedInput
    appointmentLogs?: AppointmentLogUpdateManyWithoutUserNestedInput
    contactRequests?: ContactRequestUpdateManyWithoutProcessorNestedInput
    requestNotes?: RequestNoteUpdateManyWithoutUserNestedInput
    requestLogs?: RequestLogUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    requestData?: RequestDataUpdateManyWithoutCreatedByNestedInput
    requestDataHistory?: RequestDataHistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProfilePictureFileInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: UserSettingsUncheckedUpdateOneWithoutUserNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutCreatorNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    customerLogs?: CustomerLogUncheckedUpdateManyWithoutUserNestedInput
    appointmentNotes?: AppointmentNoteUncheckedUpdateManyWithoutUserNestedInput
    appointmentLogs?: AppointmentLogUncheckedUpdateManyWithoutUserNestedInput
    contactRequests?: ContactRequestUncheckedUpdateManyWithoutProcessorNestedInput
    requestNotes?: RequestNoteUncheckedUpdateManyWithoutUserNestedInput
    requestLogs?: RequestLogUncheckedUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    requestData?: RequestDataUncheckedUpdateManyWithoutCreatedByNestedInput
    requestDataHistory?: RequestDataHistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutProfilePictureFileInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}