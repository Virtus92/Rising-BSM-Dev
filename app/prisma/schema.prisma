generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/@prisma/client"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(100)
  email              String               @unique @db.VarChar(100)
  password           String               @db.VarChar(100)
  role               String               @default("employee") @db.VarChar(20)
  phone              String?              @db.VarChar(30)
  status             String               @default("active")
  profilePicture     String?              @db.VarChar(255)
  profilePictureId   Int?
  createdAt          DateTime             @default(now()) @db.Timestamp(6)
  updatedAt          DateTime             @updatedAt @db.Timestamp(6)
  createdBy          Int?
  updatedBy          Int?
  lastLoginAt        DateTime?
  resetToken         String?
  resetTokenExpiry   DateTime?
  appointments       Appointment[]
  appointmentLogs    AppointmentLog[]
  appointmentNotes   AppointmentNote[]
  createdSchedules   AutomationSchedule[] @relation("ScheduleCreator")
  updatedSchedules   AutomationSchedule[] @relation("ScheduleUpdater")
  createdWebhooks    AutomationWebhook[]  @relation("WebhookCreator")
  updatedWebhooks    AutomationWebhook[]  @relation("WebhookUpdater")
  contactRequests    ContactRequest[]
  customerLogs       CustomerLog[]
  refreshTokens      RefreshToken[]
  requestData        RequestData[]
  requestDataHistory RequestDataHistory[]
  requestLogs        RequestLog[]
  requestNotes       RequestNote[]
  profilePictureFile File?                @relation("ProfilePicture", fields: [profilePictureId], references: [id])
  activities         UserActivity[]
  permissions        UserPermission[]
  settings           UserSettings?
  
  // Plugin relations
  plugins            Plugin[]           @relation("PluginAuthor")
  pluginLicenses     PluginLicense[]
  pluginInstallations PluginInstallation[]
  pluginReviews      PluginReview[]

  @@index([email])
  @@index([name])
  @@index([profilePictureId])
  @@index([id])
}

model UserSettings {
  id                   Int      @id @default(autoincrement())
  userId               Int      @unique
  darkMode             Boolean  @default(false)
  emailNotifications   Boolean  @default(true)
  pushNotifications    Boolean  @default(false)
  language             String   @default("de") @db.VarChar(10)
  notificationInterval String   @default("immediate") @db.VarChar(20)
  createdAt            DateTime @default(now()) @db.Timestamp(6)
  updatedAt            DateTime @updatedAt @db.Timestamp(6)
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserActivity {
  id        Int       @id @default(autoincrement())
  userId    Int
  timestamp DateTime? @default(now()) @db.Timestamp(6)
  activity  String    @db.VarChar(255)
  details   String?
  ipAddress String?   @db.VarChar(255)
  user      User      @relation(fields: [userId], references: [id])
}

model UserSession {
  sid    String   @id @db.VarChar
  sess   Json
  expire DateTime @db.Timestamp(6)
}

model Permission {
  id          Int              @id @default(autoincrement())
  code        String           @unique @db.VarChar(100)
  name        String           @db.VarChar(100)
  description String
  category    String           @db.VarChar(50)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  createdBy   Int?
  updatedBy   Int?
  roles       RolePermission[]
  users       UserPermission[]

  @@index([code])
  @@index([category])
}

model UserPermission {
  id           Int        @id @default(autoincrement())
  userId       Int
  permissionId Int
  grantedAt    DateTime?  @default(now())
  grantedBy    Int?
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, permissionId])
  @@index([userId])
  @@index([permissionId])
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  role         String     @db.VarChar(50)
  permissionId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  createdBy    Int?
  updatedBy    Int?
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([role, permissionId])
  @@index([role])
  @@index([permissionId])
}

model RefreshToken {
  token           String    @id
  userId          Int
  expiresAt       DateTime
  createdAt       DateTime  @default(now())
  createdByIp     String?
  isRevoked       Boolean   @default(false)
  revokedAt       DateTime?
  revokedByIp     String?
  replacedByToken String?
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model SystemSettings {
  id          Int      @id @default(autoincrement())
  key         String   @unique @db.VarChar(100)
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Customer {
  id              Int              @id @default(autoincrement())
  name            String           @db.VarChar(100)
  company         String?          @db.VarChar(100)
  email           String?          @db.VarChar(100)
  phone           String?          @db.VarChar(30)
  address         String?
  postalCode      String?          @db.VarChar(10)
  city            String?          @db.VarChar(100)
  country         String           @default("Deutschland") @db.VarChar(100)
  vatNumber       String?          @db.VarChar(50)
  notes           String?
  newsletter      Boolean          @default(false)
  status          String           @default("active") @db.VarChar(20)
  type            String           @default("private") @db.VarChar(20)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  createdBy       Int?
  updatedBy       Int?
  appointments    Appointment[]
  contactRequests ContactRequest[]
  logs            CustomerLog[]

  @@index([email])
  @@index([status])
}

model CustomerLog {
  id         Int      @id @default(autoincrement())
  customerId Int
  userId     Int?
  userName   String
  action     String
  details    String?
  createdAt  DateTime @default(now()) @db.Timestamp(6)
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  user       User?    @relation(fields: [userId], references: [id])
}

model Appointment {
  id              Int               @id @default(autoincrement())
  title           String            @db.VarChar(200)
  customerId      Int?
  appointmentDate DateTime          @db.Timestamp(6)
  duration        Int?
  location        String?           @db.VarChar(200)
  description     String?
  status          String            @default("planned") @db.VarChar(20)
  createdBy       Int?
  createdAt       DateTime          @default(now()) @db.Timestamp(6)
  updatedAt       DateTime          @updatedAt @db.Timestamp(6)
  creator         User?             @relation(fields: [createdBy], references: [id])
  customer        Customer?         @relation(fields: [customerId], references: [id])
  logs            AppointmentLog[]
  notes           AppointmentNote[]
  contactRequests ContactRequest[]

  @@index([customerId])
  @@index([appointmentDate])
  @@index([status])
}

model AppointmentNote {
  id            Int         @id @default(autoincrement())
  appointmentId Int
  userId        Int
  userName      String      @db.VarChar(100)
  text          String
  createdAt     DateTime    @default(now()) @db.Timestamp(6)
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
}

model AppointmentLog {
  id            Int         @id @default(autoincrement())
  appointmentId Int
  userId        Int
  userName      String
  action        String
  details       String?
  createdAt     DateTime    @default(now()) @db.Timestamp(6)
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ContactRequest {
  id            Int           @id @default(autoincrement())
  name          String        @db.VarChar(100)
  email         String        @db.VarChar(100)
  phone         String?       @db.VarChar(30)
  service       String        @db.VarChar(50)
  message       String
  status        String        @default("new") @db.VarChar(20)
  processorId   Int?
  customerId    Int?
  appointmentId Int?
  ipAddress     String?       @db.VarChar(255)
  source        String?       @db.VarChar(50)
  metadata      Json?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt @db.Timestamp(6)
  appointment   Appointment?  @relation(fields: [appointmentId], references: [id])
  customer      Customer?     @relation(fields: [customerId], references: [id])
  processor     User?         @relation(fields: [processorId], references: [id])
  requestData   RequestData[]
  logs          RequestLog[]
  notes         RequestNote[]

  @@index([email])
  @@index([status])
  @@index([createdAt])
  @@index([source])
}

model RequestNote {
  id        Int            @id @default(autoincrement())
  requestId Int
  userId    Int
  userName  String         @db.VarChar(100)
  text      String
  createdAt DateTime       @default(now()) @db.Timestamp(6)
  request   ContactRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id])
}

model RequestLog {
  id        Int            @id @default(autoincrement())
  requestId Int
  userId    Int
  userName  String         @db.VarChar(255)
  action    String         @db.VarChar(255)
  details   String?
  createdAt DateTime       @default(now())
  request   ContactRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RequestData {
  id          Int                  @id @default(autoincrement())
  requestId   Int
  category    String               @db.VarChar(50)
  label       String               @db.VarChar(100)
  order       Int                  @default(0)
  dataType    String               @db.VarChar(50)
  data        Json
  isValid     Boolean              @default(true)
  processedBy String?              @db.VarChar(50)
  version     Int                  @default(1)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  createdById Int?
  createdBy   User?                @relation(fields: [createdById], references: [id])
  request     ContactRequest       @relation(fields: [requestId], references: [id], onDelete: Cascade)
  history     RequestDataHistory[]

  @@index([requestId])
  @@index([category])
  @@index([createdById])
}

model RequestDataHistory {
  id            Int         @id @default(autoincrement())
  requestDataId Int
  data          Json
  changedBy     String?     @db.VarChar(100)
  changeReason  String?
  version       Int
  createdAt     DateTime    @default(now())
  userId        Int?
  requestData   RequestData @relation(fields: [requestDataId], references: [id], onDelete: Cascade)
  user          User?       @relation(fields: [userId], references: [id])

  @@index([requestDataId])
  @@index([userId])
}

model N8NWebhook {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  description String?
  url         String   @db.VarChar(255)
  workflowId  String?  @db.VarChar(100)
  active      Boolean  @default(true)
  category    String   @db.VarChar(50)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category])
  @@index([active])
}

model Notification {
  id            Int      @id @default(autoincrement())
  userId        Int?
  referenceId   Int?
  referenceType String?  @db.VarChar(50)
  type          String   @db.VarChar(20)
  title         String   @db.VarChar(100)
  message       String?
  description   String?
  read          Boolean  @default(false)
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  updatedAt     DateTime @updatedAt
  createdBy     Int?
  updatedBy     Int?
}

model AutomationWebhook {
  id                Int      @id @default(autoincrement())
  name              String   @db.VarChar(100)
  description       String?
  entityType        String   @db.VarChar(50)
  operation         String   @db.VarChar(20)
  webhookUrl        String   @db.VarChar(500)
  headers           Json     @default("{}")
  payloadTemplate   Json     @default("{}")
  active            Boolean  @default(true)
  retryCount        Int      @default(3)
  retryDelaySeconds Int      @default(30)
  createdAt         DateTime @default(now()) @db.Timestamp(6)
  updatedAt         DateTime @updatedAt @db.Timestamp(6)
  createdBy         Int?
  updatedBy         Int?
  creator           User?    @relation("WebhookCreator", fields: [createdBy], references: [id])
  updater           User?    @relation("WebhookUpdater", fields: [updatedBy], references: [id])

  @@index([entityType])
  @@index([operation])
  @@index([active])
  @@index([createdBy])
  @@index([active], map: "idx_automation_webhook_active")
  @@index([createdAt(sort: Desc)], map: "idx_automation_webhook_created_at")
  @@index([entityType, operation, active], map: "idx_automation_webhook_entity_operation")
  @@index([name], map: "idx_automation_webhook_name")
}

model AutomationSchedule {
  id             Int       @id @default(autoincrement())
  name           String    @db.VarChar(100)
  description    String?
  cronExpression String    @db.VarChar(100)
  webhookUrl     String    @db.VarChar(500)
  headers        Json      @default("{}")
  payload        Json      @default("{}")
  timezone       String    @default("UTC") @db.VarChar(50)
  active         Boolean   @default(true)
  lastRunAt      DateTime?
  nextRunAt      DateTime?
  createdAt      DateTime  @default(now()) @db.Timestamp(6)
  updatedAt      DateTime  @updatedAt @db.Timestamp(6)
  createdBy      Int?
  updatedBy      Int?
  creator        User?     @relation("ScheduleCreator", fields: [createdBy], references: [id])
  updater        User?     @relation("ScheduleUpdater", fields: [updatedBy], references: [id])

  @@index([active])
  @@index([nextRunAt])
  @@index([createdBy])
  @@index([active], map: "idx_automation_schedule_active")
  @@index([createdAt(sort: Desc)], map: "idx_automation_schedule_created_at")
  @@index([name], map: "idx_automation_schedule_name")
  @@index([nextRunAt, active], map: "idx_automation_schedule_next_run")
}

model AutomationExecution {
  id              Int      @id @default(autoincrement())
  automationType  String   @db.VarChar(20)
  automationId    Int
  entityId        Int?
  entityType      String?  @db.VarChar(50)
  status          String   @db.VarChar(20)
  responseStatus  Int?
  responseBody    String?
  errorMessage    String?
  executionTimeMs Int?
  executedAt      DateTime @default(now()) @db.Timestamp(6)
  retryAttempt    Int      @default(0)

  @@index([automationType, automationId])
  @@index([status])
  @@index([executedAt])
  @@index([entityType, entityId])
  @@index([entityType, entityId], map: "idx_automation_execution_entity")
  @@index([executedAt(sort: Desc)], map: "idx_automation_execution_executed_at")
  @@index([status, executedAt(sort: Desc)], map: "idx_automation_execution_stats")
  @@index([status], map: "idx_automation_execution_status")
  @@index([automationType, automationId], map: "idx_automation_execution_type_id")
}

model File {
  id           Int       @id @default(autoincrement())
  filename     String    @db.VarChar(255)
  originalName String    @db.VarChar(255)
  mimeType     String    @db.VarChar(100)
  path         String    @db.VarChar(255)
  size         Int
  type         String    @default("general") @db.VarChar(50)
  uploadedAt   DateTime  @default(now())
  uploadedBy   Int?
  description  String?
  isDeleted    Boolean   @default(false)
  deletedAt    DateTime?
  userProfiles User[]    @relation("ProfilePicture")

  @@index([type])
  @@index([uploadedBy])
  @@index([path])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model documents {
  id        BigInt                 @id @default(autoincrement())
  content   String?
  metadata  Json?
  embedding Unsupported("vector")?
}

model n8n_api_histories {
  id         Int    @id @default(autoincrement())
  session_id String @db.VarChar(255)
  message    Json
}

model n8n_chat_histories {
  id         Int    @id @default(autoincrement())
  session_id String @db.VarChar(255)
  message    Json
}

model n8n_documents_histories {
  id         Int    @id @default(autoincrement())
  session_id String @db.VarChar(255)
  message    Json
}

// Plugin System Models
model Plugin {
  id              Int       @id @default(autoincrement())
  uuid            String    @unique @default(uuid())
  name            String    @unique @db.VarChar(100)
  displayName     String    @db.VarChar(200)
  description     String?   @db.Text
  version         String    @db.VarChar(20)
  author          String    @db.VarChar(100)
  authorId        Int
  status          String    @default("pending") // pending, approved, rejected, suspended
  type            String    @db.VarChar(50)
  category        String    @db.VarChar(50)
  tags            String[]
  icon            String?
  screenshots     Json      @default("[]")
  
  // Security
  certificate     String    @db.Text // Plugin certificate
  publicKey       String    @db.Text // For signature verification
  checksum        String    @db.VarChar(64)
  
  // Monetization
  pricing         Json      @default("{}") // Pricing tiers
  trialDays       Int       @default(0)
  
  // Technical
  permissions     Json      @default("[]")
  dependencies    Json      @default("[]")
  minAppVersion   String    @db.VarChar(20)
  maxAppVersion   String?   @db.VarChar(20)
  
  // Metadata
  downloads       Int       @default(0)
  rating          Float     @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdBy       Int?
  updatedBy       Int?
  
  authorUser      User      @relation("PluginAuthor", fields: [authorId], references: [id])
  licenses        PluginLicense[]
  installations   PluginInstallation[]
  reviews         PluginReview[]
}

model PluginLicense {
  id              Int       @id @default(autoincrement())
  licenseKey      String    @unique @db.VarChar(255)
  pluginId        Int
  userId          Int
  type            String    @db.VarChar(50) // trial, basic, premium, enterprise
  status          String    @default("active") // active, expired, revoked, suspended
  
  // License binding
  hardwareId      String?   @db.VarChar(255) // Hardware fingerprint
  maxInstalls     Int       @default(1)
  currentInstalls Int       @default(0)
  
  // Validity
  issuedAt        DateTime  @default(now())
  expiresAt       DateTime?
  lastVerified    DateTime?
  
  // Usage limits
  usageLimits     Json      @default("{}")
  usageData       Json      @default("{}")
  
  plugin          Plugin    @relation(fields: [pluginId], references: [id])
  user            User      @relation(fields: [userId], references: [id])
  installations   PluginInstallation[]
}

model PluginInstallation {
  id              Int       @id @default(autoincrement())
  pluginId        Int
  licenseId       Int
  userId          Int
  
  // Installation details
  installationId  String    @unique @default(uuid())
  hardwareId      String    @db.VarChar(255)
  version         String    @db.VarChar(20)
  status          String    @default("active") // active, inactive, uninstalled
  
  // Security
  encryptionKey   String    @db.Text // Encrypted with user's key
  lastHeartbeat   DateTime?
  
  // Metadata
  installedAt     DateTime  @default(now())
  lastActivated   DateTime?
  uninstalledAt   DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  plugin          Plugin    @relation(fields: [pluginId], references: [id])
  license         PluginLicense @relation(fields: [licenseId], references: [id])
  user            User      @relation(fields: [userId], references: [id])
  executions      PluginExecution[]
}

model PluginExecution {
  id              Int       @id @default(autoincrement())
  installationId  Int
  action          String    @db.VarChar(100)
  status          String    @db.VarChar(20)
  duration        Int?
  resourceUsage   Json      @default("{}")
  errorMessage    String?   @db.Text
  executedAt      DateTime  @default(now())
  
  installation    PluginInstallation @relation(fields: [installationId], references: [id])
}

model PluginReview {
  id              Int       @id @default(autoincrement())
  pluginId        Int
  userId          Int
  rating          Int
  title           String?   @db.VarChar(200)
  comment         String?   @db.Text
  helpful         Int       @default(0)
  notHelpful      Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  plugin          Plugin    @relation(fields: [pluginId], references: [id])
  user            User      @relation(fields: [userId], references: [id])
}
